/**
 * Panther is a Cloud-Native SIEM for the Modern Security Team.
 * Copyright (C) 2020 Panther Labs Inc
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

import { Text, Box, Flex, SimpleGrid, Card, Img, Heading, Button, useSnackbar } from 'pouncejs';
import React from 'react';
import { downloadData } from 'Helpers/utils';
import { useFormikContext } from 'formik';
import { pantherConfig } from 'Source/config';
import { useWizardContext, WizardPanel } from 'Components/Wizard';
import lightningIllustration from 'Assets/illustrations/lightning.svg';
import cogsIllustration from 'Assets/illustrations/cogs.svg';
import LinkButton from 'Components/buttons/LinkButton';
import { useGetComplianceCfnTemplate } from './graphql/getComplianceCfnTemplate.generated';
import { ComplianceSourceWizardValues } from '../ComplianceSourceWizard';

const StackDeployment: React.FC = () => {
  const { pushSnackbar } = useSnackbar();
  const { initialValues, values } = useFormikContext<ComplianceSourceWizardValues>();
  const { goToNextStep } = useWizardContext();
  const { data, loading } = useGetComplianceCfnTemplate({
    variables: {
      input: {
        awsAccountId: pantherConfig.AWS_ACCOUNT_ID,
        integrationLabel: values.integrationLabel,
        remediationEnabled: values.remediationEnabled,
        cweEnabled: values.cweEnabled,
      },
    },
    onError: () => pushSnackbar({ variant: 'error', title: 'Failed to generate CFN template' }),
  });

  const { stackName, body } = data?.getComplianceIntegrationTemplate ?? {};
  const cfnConsoleLink =
    `https://${pantherConfig.AWS_REGION}.console.aws.amazon.com/cloudformation/home?region=${pantherConfig.AWS_REGION}#/stacks/create/review` +
    `?templateURL=https://s3-us-west-2.amazonaws.com/panther-public-cloudformation-templates/panther-cloudsec-iam/v${pantherConfig.PANTHER_VERSION}/template.yml` +
    `&stackName=${stackName}` +
    `&param_MasterAccountRegion=${pantherConfig.AWS_REGION}` +
    `&param_MasterAccountId=${pantherConfig.AWS_ACCOUNT_ID}` +
    `&param_DeployCloudWatchEventSetup=${values.cweEnabled}` +
    `&param_DeployRemediation=${values.remediationEnabled}`;

  return (
    <WizardPanel>
      <WizardPanel.Heading
        title="Deploy Panther's IAM roles"
        subtitle="These roles will allow Panther to get information about the state of your AWS resources"
      />
      <SimpleGrid columns={2} gap={5} px={80} mx="auto" mb={6}>
        <Card variant="dark" p={6}>
          <Flex direction="column" align="center" spacing={4}>
            <Img src={lightningIllustration} alt="Lightning" nativeWidth={40} nativeHeight={40} />
            <Heading as="h4" size="x-small">
              Using Cloudformation Console
            </Heading>
            <Text fontSize="small-medium" color="gray-300" textAlign="center">
              Deploy our autogenerated Cloudformation template to the AWS account that you are
              onboarding, to generate the necessary ReadOnly IAM Roles. After deployment please
              continue with setup completion.
              {initialValues.integrationId && (
                <Box as="b" mt={3} display="block">
                  Make sure you select Update and then Replace current template
                </Box>
              )}
            </Text>
            <LinkButton external to={cfnConsoleLink} variantColor="teal">
              Launch Console
            </LinkButton>
          </Flex>
        </Card>
        <Card variant="dark" p={6}>
          <Flex direction="column" align="center" spacing={4}>
            <Img src={cogsIllustration} alt="Cogssn" nativeWidth={40} nativeHeight={40} />
            <Heading as="h4" size="x-small">
              Using the AWS CLI
            </Heading>
            <Text fontSize="small-medium" color="gray-300" textAlign="center">
              Download the autogenerated Cloudformation template and deploy it to the AWS account
              that you are onboarding via the given CLI/SDK. After deployment please continue with
              setup completion.
              {initialValues.integrationId && (
                <Box as="b" mt={3} display="block">
                  Make sure you update the template of the existing stack
                </Box>
              )}
            </Text>
            <Button
              icon="download"
              variantColor="violet"
              loading={loading}
              disabled={loading}
              onClick={() => downloadData(body, `${stackName}.yaml`)}
            >
              Get template file
            </Button>
          </Flex>
        </Card>
      </SimpleGrid>
      <WizardPanel.Actions>
        <WizardPanel.ActionPrev />
        <Flex spacing={4} direction="column" align="center">
          <Text fontSize="small">Successfully configured and deployed your stack?</Text>
          <Button variant="outline" variantColor="navyblue" onClick={goToNextStep}>
            Continue
          </Button>
        </Flex>
      </WizardPanel.Actions>
    </WizardPanel>
  );
};

export default StackDeployment;
