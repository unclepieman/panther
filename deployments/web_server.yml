# Panther is a Cloud-Native SIEM for the Modern Security Team.
# Copyright (C) 2020 Panther Labs Inc
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

AWSTemplateFormatVersion: 2010-09-09
Description: The service that defines the front-end NodeJS server that serves the Panther web application statics

Parameters:
  # Alphabetize parameters so it's easy to compare side-by-side with other code that passes values
  # and because the CloudFormation console always shows parameters in alphabetical order.
  AlarmTopicArn:
    Type: String
    Description: SNS topic for CloudWatch alarms
    # Example: "arn:aws:sns:us-west-2:111122223333:panther-cw-alarms"
    AllowedPattern: '^arn:(aws|aws-cn|aws-us-gov):sns:[a-z]{2}-[a-z]{4,9}-[1-9]:\d{12}:\S+$'
  AppClientId:
    Type: String
    Description: The ID of the App Client that handles sign-in for the user pool
    # Example: "4tnlr4boaiscbnsp5h19g27ri2"
    AllowedPattern: '^[a-z0-9]{10,50}$'
  CertificateArn:
    Type: String
    Description: TLS certificate used by the web app. If not specified, a self-signed cert is created for you.
    # Example: "arn:aws:acm:us-west-2:111122223333:certificate/6e51b91b-0d7d-4592-89a3-c113c78e3ab3" or
    # "arn:aws:iam::111122223333:server-certificate/panther/us-west-2/MyCert"
    AllowedPattern: '^((arn:(aws|aws-cn|aws-us-gov):acm:[a-z]{2}-[a-z]{4,9}-[1-9]:\d{12}:certificate\/[a-f0-9-]{36})|(arn:(aws|aws-cn|aws-us-gov):iam::\d{12}:server-certificate\/\S+))?$'
  CloudWatchLogRetentionDays:
    Type: Number
    Description: CloudWatch log retention period
    MinValue: 1
  CustomResourceVersion:
    Type: String
    Description: Forces updates to custom resources when changed
    MinLength: 1
  ElbArn:
    Type: String
    Description: The ARN of the load balancer
    # Example: "arn:aws:elasticloadbalancing:us-west-2:111122223333:loadbalancer/app/web/c39f74f9a62dd3c0"
    AllowedPattern: '^arn:(aws|aws-cn|aws-us-gov):elasticloadbalancing:[a-z]{2}-[a-z]{4,9}-[1-9]:\d{12}:loadbalancer\/\S+$'
  ElbFullName:
    Type: String
    Description: The full name of the load balancer
    # Example: "app/web/c39f74f9a62dd3c0"
    AllowedPattern: '^[a-z0-9\/]{15,}$'
  ElbTargetGroup:
    Type: String
    Description: The ARN of the load balancer target group
    # Example: "arn:aws:elasticloadbalancing:us-west-2:111122223333:targetgroup/panther-web/eb0b81e175ef6fe5"
    AllowedPattern: '^arn:(aws|aws-cn|aws-us-gov):elasticloadbalancing:[a-z]{2}-[a-z]{4,9}-[1-9]:\d{12}:targetgroup\/\S+$'
  FirstUserEmail:
    Type: String
    Description: Email of the initial Panther user. If blank, no user is created
    AllowedPattern: '^([A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,})?$'
  FirstUserFamilyName:
    Type: String
    Description: Family (last) name of the initial Panther user
  FirstUserGivenName:
    Type: String
    Description: First (given) name of the initial Panther user
  GraphQLApiEndpoint:
    Type: String
    Description: The URL of the GraphQL API that the web application uses
    # Example: "https://mmo6but73nazdmp454amim3baa.appsync-api.us-west-2.amazonaws.com/graphql"
    AllowedPattern: '^https:\/\/[a-z0-9]{26}\.appsync-api\.[a-z]{2}-[a-z]{4,9}-[1-9]\.amazonaws\.com(\.cn)?\/graphql$'
  InitialAnalysisPackUrls:
    Type: CommaDelimitedList
    Description: Initial Python analysis packs
  PantherCommit:
    Type: String
    Description: The commit of the current deployment (e.g. `5c2a8a76`)
    AllowedPattern: '^[0-9a-f]+$'
  PantherVersion:
    Type: String
    Description: The base semantic version of the current deployment (e.g. `1.3.0`)
    AllowedPattern: '^\d+\.\d+\.\d+(-.+)?$'
  SecurityGroup:
    Type: String
    Description: Web app security group ID
    # Example: "sg-07114d098de449a39"
    AllowedPattern: '^sg-[0-9a-f]{10,}$'
  SubnetOneId:
    Type: String
    Description: The ID of a subnet in the VPC above
    # Example: "subnet-0014ecfa3c45ff9d9"
    AllowedPattern: '^subnet-[0-9a-f]{4,}$'
  SubnetTwoId:
    Type: String
    Description: The ID of another subnet in the VPC above
    AllowedPattern: '^subnet-[0-9a-f]{4,}$'
  UserPoolId:
    Type: String
    Description: The ID of the User Pool that holds all users of the Panther web app
    # Example: "us-west-2_iHzBYf5SA"
    AllowedPattern: '^[a-zA-Z0-9_-]{15,}$'

Mappings:
  ECS:
    Task:
      CPU: 512
      Memory: 1024
      Port: 80

Conditions:
  CreateCertificate: !Equals [!Ref CertificateArn, '']
  CreateFirstUser: !Not [!Equals ['', !Ref FirstUserEmail]]

Resources:
  SelfSignedCertificate:
    Condition: CreateCertificate
    Type: Custom::Certificate
    Properties:
      CustomResourceVersion: !Ref CustomResourceVersion
      ServiceToken: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:panther-cfn-custom-resources

  LoadBalancerAlarms:
    Type: Custom::ElbAlarms
    Properties:
      AlarmTopicArn: !Ref AlarmTopicArn
      CustomResourceVersion: !Ref CustomResourceVersion
      LatencyThresholdSeconds: 0.5
      LoadBalancerFriendlyName: web
      LoadBalancerFullName: !Ref ElbFullName
      ServiceToken: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:panther-cfn-custom-resources

  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn:
            !If [CreateCertificate, !GetAtt SelfSignedCertificate.Arn, !Ref CertificateArn]
      DefaultActions:
        - TargetGroupArn: !Ref ElbTargetGroup
          Type: forward
      LoadBalancerArn: !Ref ElbArn
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-Ext-2018-06

  PublicHttpRedirectListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: '443'
            Host: '#{host}'
            Path: '/#{path}'
            Query: '#{query}'
            StatusCode: HTTP_301
      LoadBalancerArn: !Ref ElbArn
      Port: 80
      Protocol: HTTP

  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ElbTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - '*'
      ListenerArn: !Ref PublicLoadBalancerListener
      Priority: 1

  WebApplicationCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: panther-web-cluster

  # The service that will instantiate a server task and restrict access through our ALB
  WebApplicationServer:
    Type: AWS::ECS::Service
    # The cert in the listener can't be deleted until the service has stopped.
    DependsOn: PublicLoadBalancerListener
    Properties:
      Cluster: !Ref WebApplicationCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      HealthCheckGracePeriodSeconds: 60
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref SecurityGroup
          Subnets:
            - !Ref SubnetOneId
            - !Ref SubnetTwoId
      PlatformVersion: LATEST
      SchedulingStrategy: REPLICA
      ServiceName: panther-web
      TaskDefinition: !Ref WebApplicationServerDefinition
      LoadBalancers:
        - ContainerName: panther-web
          ContainerPort: !FindInMap [ECS, Task, Port]
          TargetGroupArn: !Ref ElbTargetGroup

  # The role that allows the containers in the task to pull images and publish logs to CloudWatch
  WebApplicationServerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # A log group for storing the stdout logs from the server's task definition
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: panther-web-logs
      RetentionInDays: !Ref CloudWatchLogRetentionDays

  # The container definition for the image that runs the NodeJS server which serves our assets
  WebApplicationServerDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: panther-web
          Cpu: !FindInMap [ECS, Task, CPU]
          DisableNetworking: false
          Environment:
            - Name: SERVER_PORT
              Value: !FindInMap [ECS, Task, Port]

            - Name: NODE_ENV
              Value: production # optimizes the configuration of the front-end NodeJS server

            - Name: AWS_REGION
              Value: !Ref AWS::Region

            - Name: AWS_ACCOUNT_ID
              Value: !Ref AWS::AccountId

            - Name: WEB_APPLICATION_GRAPHQL_API_ENDPOINT
              Value: !Ref GraphQLApiEndpoint

            - Name: WEB_APPLICATION_USER_POOL_ID
              Value: !Ref UserPoolId

            - Name: WEB_APPLICATION_USER_POOL_CLIENT_ID
              Value: !Ref AppClientId

            - Name: PANTHER_COMMIT
              Value: !Ref PantherCommit

            - Name: PANTHER_VERSION
              Value: !Ref PantherVersion

          Essential: true
          Image: Dockerfile
          Interactive: false
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: panther-web
          Memory: !FindInMap [ECS, Task, Memory]
          MemoryReservation: !FindInMap [ECS, Task, Memory]
          PortMappings:
            - ContainerPort: !FindInMap [ECS, Task, Port]
          ReadonlyRootFilesystem: false
      Cpu: !FindInMap [ECS, Task, CPU]
      ExecutionRoleArn: !GetAtt WebApplicationServerExecutionRole.Arn
      Family: panther-web
      Memory: !FindInMap [ECS, Task, Memory]
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE

  # The link in the invite email won't work until the ECS service has finished.
  FirstPantherUser:
    Type: Custom::PantherUser
    Condition: CreateFirstUser
    DependsOn: WebApplicationServer
    DeletionPolicy: Retain # users-api refuses to delete the last user, which would then fail teardown
    UpdateReplacePolicy: Retain
    Properties:
      # No CustomResourceVersion here because that would reset the first user on every upgrade.
      # The user might have changed their name or email through the web app, we don't want to revert.
      GivenName: !Ref FirstUserGivenName
      FamilyName: !Ref FirstUserFamilyName
      Email: !Ref FirstUserEmail
      ServiceToken: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:panther-cfn-custom-resources

  # Upload the initial Python analysis rules/policies
  InitialAnalysisSet:
    Type: Custom::AnalysisSet
    Properties:
      PackURLs: !Ref InitialAnalysisPackUrls
      ServiceToken: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:panther-cfn-custom-resources
