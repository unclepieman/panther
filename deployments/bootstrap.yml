# Panther is a Cloud-Native SIEM for the Modern Security Team.
# Copyright (C) 2020 Panther Labs Inc
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

AWSTemplateFormatVersion: 2010-09-09
Description: The very first Panther stack - static resources which don't require S3 for deployment

# This stack has resources which take a long time or have generated IDs that we need.
# The idea is to build such resources as early as possible to maximize parallelism later.
#
# Since this is the very first stack, it must be < 51,200 bytes and not contain any
# code source or nested stacks (which require packaging in S3).
#
# This stack includes:
#   - All S3 buckets
#   - All KMS keys
#   - All web networking
#   - The cognito user pool and appsync API

Parameters:
  # Alphabetize parameters so it's easy to compare side-by-side with other code that passes values
  # and because the CloudFormation console always shows parameters in alphabetical order.
  AccessLogsBucket:
    Type: String
    Description: Optional external bucket name for storing S3 access logs. If blank, the Panther audit bucket is used.
    AllowedPattern: '^([a-z0-9.-]{3,63})?$'
  AlarmTopicArn:
    Type: String
    Description: An existing SNS topic for CloudWatch alarms. If blank, one is created for you.
    # Example: "arn:aws:sns:us-west-2:111122223333:panther-cw-alarms"
    AllowedPattern: '^(arn:(aws|aws-cn|aws-us-gov):sns:[a-z]{2}-[a-z]{4,9}-[1-9]:\d{12}:\S+)?$'
  CloudWatchLogRetentionDays:
    Type: Number
    Description: CloudWatch log retention period
    MinValue: 1
  CustomDomain:
    Type: String
    Description: The FQDN that will be used by the web application (defaults to autogenerated ALB URL)
    # Example: "app.example.com"
    AllowedPattern: '^([a-z0-9.-]+\.[a-z]{2,})?$'
  DataReplicationBucket:
    Type: String
    Description: Optional external bucket arn for replicating processed data in s3 glacier.
    AllowedPattern: '^(arn:(aws|aws-cn|aws-us-gov):s3:::[a-z0-9.-]{3,63})?$'
  Debug:
    Type: String
    Description: Toggle debug logging
    AllowedValues: [true, false]
  DeployFromSource:
    Type: String
    Description: A few extra resources are required when deploying from source
    AllowedValues: [true, false]
  EnableS3AccessLogs:
    Type: String
    Description: Enable S3 access logging for all Panther buckets
    AllowedValues: [true, false]
  LoadBalancerSecurityGroupCidr:
    Type: String
    Description: Allow HTTP(S) ingress access to the web app (ALB) security group from this IP block. Use 0.0.0.0/0 to allow unrestricted access
    # cfn-lint suggested this regex pattern:
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  LogSubscriptionPrincipals:
    Type: CommaDelimitedList
    Description: The list of Principal ARNs to allow read access to the ProcessedDataBucket and subscribe access to ProcessedDataTopicArn
  SecurityGroupID:
    Type: String
    Description: An existing SecurityGroup to deploy Panther into
    AllowedPattern: '^(sg-[0-9a-f]{10,})?$'
  SubnetOneIPRange:
    Type: String
    Description: A valid & available IP range in the existing VPC you plan to deploy Panther into.
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  SubnetTwoIPRange:
    Type: String
    Description: A second valid & available IP range in the existing VPC you plan to deploy Panther into, for multiple AZ redundancy.
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  TracingMode:
    Type: String
    Description: Enable XRay tracing on GraphQL queries & mutations
    AllowedValues: ['', Active, PassThrough]
  VpcID:
    Type: String
    Description: An existing VPC to deploy Panther into
    AllowedPattern: '^(vpc-[0-9a-f]{4,})?$'
  SubnetOneID:
    Type: String
    Description: An existing subnet to deploy Panther into. You must specify 'SubnetTwoID' if you specify this parameter
    AllowedPattern: '^(subnet-[0-9a-f]{4,})?$'
  SubnetTwoID:
    Type: String
    Description: An existing subnet to deploy Panther into. You must specify 'SubnetOneID' if you specify this parameter
    AllowedPattern: '^(subnet-[0-9a-f]{4,})?$'

Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/24
    PublicOne:
      CIDR: 10.0.0.0/26
    PublicTwo:
      CIDR: 10.0.0.64/26

  # OMG, I can't believe they make people do this ...
  ELBAccounts: # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html#access-logging-bucket-permissions
    us-east-1:
      ARN: arn:aws:iam::127311923021:root
    us-east-2:
      ARN: arn:aws:iam::033677994240:root
    us-west-1:
      ARN: arn:aws:iam::027434742980:root
    us-west-2:
      ARN: arn:aws:iam::797873946194:root
    ca-central-1:
      ARN: arn:aws:iam::985666609251:root
    eu-central-1:
      ARN: arn:aws:iam::054676820928:root
    eu-west-1:
      ARN: arn:aws:iam::156460612806:root
    eu-west-2:
      ARN: arn:aws:iam::652711504416:root
    eu-west-3:
      ARN: arn:aws:iam::009996457667:root
    eu-north-1:
      ARN: arn:aws:iam::897822967062:root
    ap-east-1:
      ARN: arn:aws:iam::754344448648:root
    ap-northeast-1:
      ARN: arn:aws:iam::582318560864:root
    ap-northeast-2:
      ARN: arn:aws:iam::600734575887:root
    ap-northeast-3:
      ARN: arn:aws:iam::383597477331:root
    ap-southeast-1:
      ARN: arn:aws:iam::114774131450:root
    ap-southeast-2:
      ARN: arn:aws:iam::783225319266:root
    ap-south-1:
      ARN: arn:aws:iam::718504428378:root
    me-south-1:
      ARN: arn:aws:iam::076674570225:root
    sa-east-1:
      ARN: arn:aws:iam::507241528517:root
    us-gov-west-1:
      ARN: arn:aws-us-gov:iam::048591011584:root
    us-gov-east-1:
      ARN: arn:aws-us-gov:iam::190560391635:root
    cn-north-1:
      ARN: arn:aws-cn:iam::638102146993:root
    cn-northwest-1:
      ARN: arn:aws-cn:iam::037604701340:root

Conditions:
  ConfigureLogSubscriptions: !Not [!Equals [!Select [0, !Ref LogSubscriptionPrincipals], '']]
  EnableAccessLogs: !Equals [!Ref EnableS3AccessLogs, true]
  ExternalAccessLogs: !Not [!Equals [!Ref AccessLogsBucket, '']]
  NotExternalAccessLogs: !Equals [!Ref AccessLogsBucket, '']
  ReplicateData: !Not [!Equals [!Ref DataReplicationBucket, '']]
  TracingEnabled: !Not [!Equals [!Ref TracingMode, '']]
  UseCustomDomain: !Not [!Equals [!Ref CustomDomain, '']]
  EnableDebug: !Equals [!Ref Debug, true]
  CreateAlarmSNSTopic: !Equals [!Ref AlarmTopicArn, '']
  IsDeployFromSource: !Equals [!Ref DeployFromSource, true]
  CreateVpc: !Equals [!Ref VpcID, '']
  CreateSubnets: !Equals [!Ref SubnetOneID, '']

Resources:
  ########## S3 Buckets ##########
  AuditLogs: # Panther self-auditing: S3 access logs (but NOT data processing related!), flow logs, etc
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          # Keep access logs for 1 year, permanently delete 30 days after they expire
          - ExpirationInDays: 365
            NoncurrentVersionExpirationInDays: 30
            Status: Enabled
      LoggingConfiguration: !If
        - EnableAccessLogs
        - DestinationBucketName:
            !If [ExternalAccessLogs, !Ref AccessLogsBucket, !Ref 'AWS::NoValue']
          LogFilePrefix: !If
            - ExternalAccessLogs
            - !Sub panther-source-${AWS::AccountId}-${AWS::Region}/
            - self/
        - !Ref AWS::NoValue
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  AuditLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy

    # This resource needs to be delayed slightly. If the bucket policy is created right after the
    # bucket itself is created, the stack will sometimes fail with:
    #
    #     A conflicting conditional operation is currently in progress against this resource.
    #
    # This seems to be caused by the PublicAccessBlockConfiguration not fully taking effect before
    # trying to set the bucket policy. An easy fix is to just delay this resource until some
    # networking setup has completed, it doesn't particularly matter which resource this depends on,
    # as long as it happens later in the stack creation.
    DependsOn: TargetGroup

    Properties:
      Bucket: !Ref AuditLogs
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: VPCFlowAclCheck
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !GetAtt AuditLogs.Arn
          - Sid: VPCFlowWrite
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub arn:${AWS::Partition}:s3:::${AuditLogs}/AWSLogs/${AWS::AccountId}/*
            Condition:
              StringEquals:
                's3:x-amz-acl': bucket-owner-full-control
          - Sid: CloudTrailAclCheck
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !GetAtt AuditLogs.Arn
          - Sid: CloudTrailWrite
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub arn:${AWS::Partition}:s3:::${AuditLogs}/AWSLogs/${AWS::AccountId}/*
            Condition:
              StringEquals:
                's3:x-amz-acl': bucket-owner-full-control
          - Sid: ALBWrite
            Effect: Allow # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html#access-logging-bucket-permissions
            Principal:
              AWS: !FindInMap [ELBAccounts, !Ref 'AWS::Region', ARN]
            Action: s3:PutObject
            Resource: !Sub arn:${AWS::Partition}:s3:::${AuditLogs}/AWSLogs/${AWS::AccountId}/*
          - Sid: GuardDutyBucketLocation
            Effect: Allow
            Principal:
              Service: guardduty.amazonaws.com
            Action: s3:GetBucketLocation
            Resource: !GetAtt AuditLogs.Arn
          - Sid: GuardDutyWrite
            Effect: Allow
            Principal:
              Service: guardduty.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub arn:${AWS::Partition}:s3:::${AuditLogs}/*
          - Sid: ForceSSL
            Effect: Deny
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub arn:${AWS::Partition}:s3:::${AuditLogs}/*
            Condition:
              Bool:
                aws:SecureTransport: false

  # Here we store s3 access logs from buckets related to data processing. The reason we put the logs here
  # instead of the AuditLogs bucket, is because the AuditLog bucket can be "self" monitored by Panther
  # and if we have data processing related s3 access logs we create a positive feedback loop where we
  # wrote to a bucket involved with data processing, which creates an access log, which triggers Panther
  # log processing, which triggers an s3 access log ...
  UnmonitoredAuditLogs:
    Condition: NotExternalAccessLogs # only needed if Panther is tracking access logs
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          # Keep access logs for 1 year, permanently delete 30 days after they expire
          - ExpirationInDays: 365
            NoncurrentVersionExpirationInDays: 30
            Status: Enabled
      LoggingConfiguration: !If
        - EnableAccessLogs
        - DestinationBucketName: !Ref 'AWS::NoValue'
          LogFilePrefix: self/
        - !Ref AWS::NoValue
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  UnmonitoredAuditLogsBucketPolicy:
    Condition: NotExternalAccessLogs # only needed if Panther is tracking access logs
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref UnmonitoredAuditLogs
      PolicyDocument:
        Statement:
          - Sid: ForceSSL
            Effect: Deny
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub arn:${AWS::Partition}:s3:::${UnmonitoredAuditLogs}/*
            Condition:
              Bool:
                aws:SecureTransport: false

  Source: # Staging bucket for CloudFormation to upload templates, Lambda source, etc
    Condition: IsDeployFromSource
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          # Once a stack is deployed, its resources in S3 can be safely removed.
          - ExpirationInDays: 90
            Status: Enabled
      LoggingConfiguration: !If
        - EnableAccessLogs
        - DestinationBucketName: !If [ExternalAccessLogs, !Ref AccessLogsBucket, !Ref AuditLogs]
          LogFilePrefix: !Sub panther-source-${AWS::AccountId}-${AWS::Region}/
        - !Ref AWS::NoValue
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  SourceBucketPolicy:
    Condition: IsDeployFromSource
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Source
      PolicyDocument:
        Statement:
          - Sid: ForceSSL
            Effect: Deny
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub arn:${AWS::Partition}:s3:::${Source}/*
            Condition:
              Bool:
                aws:SecureTransport: false

  AnalysisVersions: # analysis-api stores old python rule/policy versions here
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - NoncurrentVersionExpirationInDays: 365
            Status: Enabled
      LoggingConfiguration: !If
        - EnableAccessLogs
        - DestinationBucketName: !If [ExternalAccessLogs, !Ref AccessLogsBucket, !Ref AuditLogs]
          LogFilePrefix: !Sub panther-analysis-versions-${AWS::AccountId}-${AWS::Region}/
        - !Ref AWS::NoValue
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  AnalysisVersionsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AnalysisVersions
      PolicyDocument:
        Statement:
          - Sid: ForceSSL
            Effect: Deny
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub arn:${AWS::Partition}:s3:::${AnalysisVersions}/*
            Condition:
              Bool:
                aws:SecureTransport: false

  InputDataBucket: # contains data that are input to Panther log analysis
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LoggingConfiguration: !If
        - EnableAccessLogs
        - DestinationBucketName: !If [ExternalAccessLogs, !Ref AccessLogsBucket, !Ref AuditLogs]
          LogFilePrefix: !Sub panther-input-data-${AWS::AccountId}-${AWS::Region}/
        - !Ref AWS::NoValue
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      # Short expiration because this data is sent to Panther.
      LifecycleConfiguration:
        Rules:
          - Id: WeekExpiration
            Status: Enabled
            ExpirationInDays: 7
            NoncurrentVersionExpirationInDays: 7
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        TopicConfigurations:
          - Topic: !Ref InputNotificationsTopic
            Event: s3:ObjectCreated:*

  InputDataBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref InputDataBucket
      PolicyDocument:
        Statement:
          - Sid: ForceSSL
            Effect: Deny
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub arn:${AWS::Partition}:s3:::${InputDataBucket}/*
            Condition:
              Bool:
                aws:SecureTransport: false

  ProcessedData: # processed security logs (JSON stage data)
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LoggingConfiguration: !If
        - EnableAccessLogs
        - DestinationBucketName:
            !If [ExternalAccessLogs, !Ref AccessLogsBucket, !Ref UnmonitoredAuditLogs]
          LogFilePrefix: !Sub panther-processed-data-${AWS::AccountId}-${AWS::Region}/
        - !Ref AWS::NoValue
      ReplicationConfiguration: !If
        - ReplicateData
        - Role: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/panther-data-replication-role-${AWS::Region}
          Rules:
            - Destination:
                Bucket: !Ref DataReplicationBucket
                StorageClass: GLACIER
              Prefix: ''
              Status: Enabled
        - !Ref AWS::NoValue
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled

  DataReplicationRole:
    Condition: ReplicateData
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub panther-data-replication-role-${AWS::Region}
      Description: Role used by S3 for data replication
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: s3.amazonaws.com
      Policies:
        - PolicyName: ReadData
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetReplicationConfiguration
                  - s3:ListBucket
                Resource: !GetAtt ProcessedData.Arn
              - Effect: Allow
                Action:
                  - s3:GetObjectVersion
                  - s3:GetObjectVersionAcl
                  - s3:GetObjectVersionTagging
                Resource: !Sub arn:${AWS::Partition}:s3:::${ProcessedData}/*
        - PolicyName: ReplicateData
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - s3:ReplicateObject
                - s3:ReplicateDelete
                - s3:ReplicateTags
              Resource: !Sub ${DataReplicationBucket}/*

  ProcessedDataPolicy: # read access on processed data bucket for log subscriptions
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ProcessedData
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ForceSSL
            Effect: Deny
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub arn:${AWS::Partition}:s3:::${ProcessedData}/*
            Condition:
              Bool:
                aws:SecureTransport: false
          - !If
            - ConfigureLogSubscriptions
            - Sid: ReadBucket
              Effect: Allow
              Principal:
                AWS: !Ref LogSubscriptionPrincipals
              Action: s3:ListBucket
              Resource: !GetAtt ProcessedData.Arn
            - !Ref AWS::NoValue
          - !If
            - ConfigureLogSubscriptions
            - Sid: ReadLogAndRuleData
              Effect: Allow
              Principal:
                AWS: !Ref LogSubscriptionPrincipals
              Action:
                - s3:GetObject
                - s3:GetObjectVersion
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${ProcessedData}/*
            - !Ref AWS::NoValue

  AthenaResults: # athena query results
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 30
            Status: Enabled
      LoggingConfiguration: !If
        - EnableAccessLogs
        - DestinationBucketName: !If [ExternalAccessLogs, !Ref AccessLogsBucket, !Ref AuditLogs]
          LogFilePrefix: !Sub panther-athena-results-${AWS::AccountId}-${AWS::Region}/
        - !Ref AWS::NoValue
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled

  AthenaResultsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AthenaResults
      PolicyDocument:
        Statement:
          - Sid: ForceSSL
            Effect: Deny
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub arn:${AWS::Partition}:s3:::${AthenaResults}/*
            Condition:
              Bool:
                aws:SecureTransport: false

  ########## Cognito ##########
  # MFA is configured for the user pool via the Go SDK rather than CloudFormation.
  # Using CFN for MFA forces SMS, but we only want software tokens (SMS is not as secure)
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
        InviteMessageTemplate:
          EmailSubject: Welcome to Panther!
          EmailMessage: !Sub
            - |
              <br />Welcome to Panther! We're very excited to have you on board!
              <br />
              <br />To get started, sign in to your <a href="https://${PantherHost}/sign-in">Panther dashboard</a> with the following temporary credentials:
              <br />
              <br />* Username: {username}
              <br />* Password: {####}
              <br />
              <br />Need help, or have questions? Just email us at support@runpanther.io, we'd love to help.
              <br />
              <br />Yours truly,
              <br />Panther - https://runpanther.io
              <br />
              <br /><small>Copyright © 2020 Panther Labs Inc. All rights reserved.</small>
            - PantherHost:
                !If [UseCustomDomain, !Ref CustomDomain, !GetAtt PublicLoadBalancer.DNSName]
      AutoVerifiedAttributes:
        - email
      LambdaConfig:
        CustomMessage: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:panther-users-api
      Policies:
        PasswordPolicy:
          MinimumLength: 12
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      Schema:
        - AttributeDataType: String
          Mutable: true
          Name: email
          Required: true
        - AttributeDataType: String
          Mutable: true
          Name: given_name
        - AttributeDataType: String
          Mutable: true
          Name: family_name
        # This attribute is only used for enterprise, but we keep it here as well to allow
        # smoother migrations between OSS and enterprise or vice versa.
        # Cognito attributes can never be removed once added to a user pool, so it's better to add
        # them all at once from the beginning to avoid broken rollbacks and other bad states.
        - AttributeDataType: String
          Mutable: true
          Name: role_id
          StringAttributeConstraints:
            MinLength: '36' # uuid length
            MaxLength: '36'
      UsernameAttributes:
        - email
      UserPoolAddOns:
        AdvancedSecurityMode: ENFORCED
      UserPoolName: panther-users

  ########## Dynamo ##########
  # Used only for Dynamo tables that have provisioned capacity / auto-scaling.
  # Today, this is only the kv-store in the core stack if explicitly enabled.
  DynamoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoScaling
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:SetAlarmState
                  - cloudwatch:DeleteAlarms
                Resource: '*'
              - Effect: Allow
                Action:
                  - dynamodb:DescribeTable
                  - dynamodb:UpdateTable
                Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/panther-*

  ########## ECR ##########
  PantherWebImageRepository:
    Condition: IsDeployFromSource
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: panther-web
      LifecyclePolicy:
        RegistryId: !Ref AWS::AccountId
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Makes sure to keep only the last 10 images that have been uploaded",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": { "type": "expire" }
              }
            ]
          }

  ########## Networking ##########
  # A VPC that will be used by our stack's security group, added to our web-service
  VPC:
    Condition: CreateVpc
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap [SubnetConfig, VPC, CIDR]
      Tags:
        - Key: Name
          Value: panther-vpc

  FlowLogs:
    Condition: CreateVpc
    DependsOn: AuditLogsBucketPolicy
    Type: AWS::EC2::FlowLog
    Properties:
      # If prefix is changed, make sure to update the prefix of the source integration in self.registration.go
      LogDestination: !Sub ${AuditLogs.Arn}/${VPC}/
      LogDestinationType: s3
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL
      Tags:
        - Key: Name
          Value: panther-flowlogs

  # We define a public subnet so that we can access our web server from a public IP. The empty
  # string in !GetAZs is equivalent to AWS::Region
  #
  # These subnets are labelled Public for historical reasons, but will not actually be public if a
  # private VPC is specified.
  PublicSubnetOne:
    Condition: CreateSubnets
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      VpcId: !If
        - CreateVpc
        - !Ref VPC
        - !Ref VpcID
      CidrBlock: !If
        - CreateVpc
        - !FindInMap [SubnetConfig, PublicOne, CIDR]
        - !Ref SubnetOneIPRange
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: panther-subnet-one

  PublicSubnetTwo:
    Condition: CreateSubnets
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      VpcId: !If
        - CreateVpc
        - !Ref VPC
        - !Ref VpcID
      CidrBlock: !If
        - CreateVpc
        - !FindInMap [SubnetConfig, PublicTwo, CIDR]
        - !Ref SubnetTwoIPRange
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: panther-subnet-two

  # The lines below setup networking resources for the public subnets. Containers in the public
  # subnets have public IP addresses and the routing table sends network traffic via the IG.
  InternetGateway:
    Condition: CreateVpc
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: panther-internet-gateway

  # Attach the public Internet Gateway to our VPC
  GatewayAttachment:
    Condition: CreateVpc
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Define a route table in order to map & route IP addresses
  PublicRouteTable:
    Condition: CreateVpc
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: panther-public-route-table

  # Because we have a public VPC, we need to map 0.0.0.0/0 through an Internet Gateway in order
  # to be out there in the network
  PublicRoute:
    Condition: CreateVpc
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate the route table that we have created (with the mapping right above) to our public
  # subnets in order to be used by it
  PublicSubnetOneRouteTableAssociation:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !If [CreateSubnets, !Ref PublicSubnetOne, !Ref SubnetOneID]
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetTwoRouteTableAssociation:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !If [CreateSubnets, !Ref PublicSubnetTwo, !Ref SubnetTwoID]
      RouteTableId: !Ref PublicRouteTable

  # Public load balancer, hosted in public subnets that is accessible
  # to the public, and is intended to route traffic to one or more public
  # facing services. This is used for accepting traffic from the public
  # internet and directing it to public facing microservices
  PublicLoadBalancerSecurityGroup:
    Condition: CreateVpc
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: panther-web-lb
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: !Ref LoadBalancerSecurityGroupCidr
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIp: !Ref LoadBalancerSecurityGroupCidr
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
      Tags:
        - Key: Name
          Value: panther-web-lb-sg

  # This load balancer is labelled Public for historical reasons, but is not actually public if a
  # private VPC is specified.
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: AuditLogsBucketPolicy
    Properties:
      # The name should have been "panther-web", but we can't change it now.
      # Doing so would recreate the ALB with a new URL, which breaks deployments with custom domains.
      Name: web
      # <cfndoc>
      # The load balancer associated with the Panther UI.
      #
      # Failure Impact
      # * The Panther user interface will not be available.
      # </cfndoc>
      Scheme: !If [CreateVpc, internet-facing, internal]
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
        - Key: access_logs.s3.enabled
          Value: 'true'
          # Note: If we ever add access_logs.s3.prefix, make sure to update it in the source in self_registration.go
        - Key: access_logs.s3.bucket
          Value: !Ref AuditLogs
      Subnets:
        - !If [CreateSubnets, !Ref PublicSubnetOne, !Ref SubnetOneID]
        - !If [CreateSubnets, !Ref PublicSubnetTwo, !Ref SubnetTwoID]
      SecurityGroups:
        - !If [CreateVpc, !Ref PublicLoadBalancerSecurityGroup, !Ref SecurityGroupID]

  # A target group is connected to a network or application load balancer, so it can automatically
  # distribute traffic across all the targets.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: panther-web
      HealthCheckProtocol: HTTP
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /healthcheck
      HealthCheckTimeoutSeconds: 6
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds # Instantly deregister draining targets since we have 200% max capacity
          Value: '0'
      TargetType: ip
      Port: 80
      Protocol: HTTP
      VpcId: !If
        - CreateVpc
        - !Ref VPC
        - !Ref VpcID

  # Adds the networking stack to a security group and exposes the necessary TCP ports that allow
  # our server to communicate with the outside world.
  WebApplicationServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: panther-web-container
      GroupDescription: Access to the Fargate containers
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !If
            - CreateVpc
            - !Ref PublicLoadBalancerSecurityGroup
            - !Ref SecurityGroupID
      VpcId: !If
        - CreateVpc
        - !Ref VPC
        - !Ref VpcID
      Tags:
        - Key: Name
          Value: panther-web-container-sg

  EcsSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref WebApplicationServerSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId: !If
        - CreateVpc
        - !Ref PublicLoadBalancerSecurityGroup
        - !Ref SecurityGroupID

  ########## Appsync ##########
  AppsyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Appsync service role which invokes API lambdas and gateways and writes CloudWatch logs
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: appsync.amazonaws.com
      Policies:
        - PolicyName: PushToCloudWatchLogs
          # the arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs managed policy
          # is not available in all partitions, so we just embed the same permissions directly here:
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*' # log group name not known until api is created, which requires this role to exist first
        - PolicyName: InvokeLegacyApis
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:panther-*-api
        - PolicyName: InvokeGatewayApis
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: execute-api:Invoke
                Resource: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:*

  GraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: panther-graphql-api
      # <cfndoc>
      # This is the GraphQL endpoint for the Panther UI.
      #
      # Failure Impact
      # * The Panther user interface will show errors.
      # </cfndoc>
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      UserPoolConfig:
        AwsRegion: !Ref AWS::Region
        UserPoolId: !Ref UserPool
        DefaultAction: ALLOW
      LogConfig:
        CloudWatchLogsRoleArn: !GetAtt AppsyncServiceRole.Arn
        FieldLogLevel: ALL
        ExcludeVerboseContent: !If
          - EnableDebug
          - FALSE
          - TRUE
      XrayEnabled: !If [TracingEnabled, True, !Ref 'AWS::NoValue']

  AppsyncLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/appsync/apis/${GraphQLApi.ApiId}
      RetentionInDays: !Ref CloudWatchLogRetentionDays

  ########## KMS ##########
  # KMS keys take ~2 mins to create, we build all of them here at the same time
  QueueEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Encryption key for all panther SQS queues
      EnableKeyRotation: true
      KeyPolicy:
        # Allow account root user to administer key (required)
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: '*'
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action:
              - kms:GenerateDataKey
              - kms:Decrypt
            Resource: '*'
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action:
              - kms:GenerateDataKey
              - kms:Decrypt
            Resource: '*'

  QueueEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/panther-sqs
      TargetKeyId: !Ref QueueEncryptionKey

  OutputsEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/panther-alert-outputs
      TargetKeyId: !Ref OutputsEncryptionKey

  OutputsEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Encrypts Panther's alert output configuration
      EnableKeyRotation: true
      KeyPolicy:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: '*'

  ########## SNS ##########
  ProcessedDataNotifications:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: panther-processed-data-notifications
      # <cfndoc>
      # This topic triggers the log analysis flow
      # </cfndoc>
      KmsMasterKeyId: !Ref QueueEncryptionKey

  ProcessedDataNotificationsTopicPolicy: # allow SNS subscriptions for log subscriptions
    Condition: ConfigureLogSubscriptions
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref ProcessedDataNotifications
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ReadTopic
            Effect: Allow
            Principal:
              AWS: !Ref LogSubscriptionPrincipals
            Action: sns:Subscribe
            Resource: !Ref ProcessedDataNotifications

  InputNotificationsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: panther-boostrap-input-data-notifications
      # <cfndoc>
      # This topic triggers the log analysis flow for data integrations configured internally by Panther e.g. data by Amazon EventBridge.
      # </cfndoc>
      KmsMasterKeyId: !Ref QueueEncryptionKey

  InputNotificationsTopicPolicy: # allow SNS subscriptions for S3 bucket
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref InputNotificationsTopic
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          # Reference: https://amzn.to/2ouFmhK
          - Sid: AllowS3EventNotifications
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: sns:Publish
            Resource: !Ref InputNotificationsTopic
          - Sid: AllowSubscriptionToPantherInput
            Effect: Allow
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action: sns:Subscribe
            Resource: !Ref InputNotificationsTopic

  AlarmNotifications:
    Condition: CreateAlarmSNSTopic
    Type: AWS::SNS::Topic
    Properties:
      TopicName: panther-cw-alarms
      # <cfndoc>
      # CloudWatch alarms are configured to notify this topic
      #
      # Failure Impact
      # * CloudWatch alarm notifications will not be delivered to subscribers
      # </cfndoc>

Outputs:
  # S3
  AnalysisVersionsBucket:
    Description: S3 bucket name for analysis-api versioning
    Value: !Ref AnalysisVersions
  AthenaResultsBucket:
    Description: S3 bucket name for Athena results
    Value: !Ref AthenaResults
  AuditLogsBucket:
    Description: S3 bucket name for Panther audit logs (includes s3 access, alb, vpc)
    Value: !Ref AuditLogs
  ProcessedDataBucket:
    Description: S3 bucket name for processed log data
    Value: !Ref ProcessedData
  SourceBucket:
    Condition: IsDeployFromSource
    Description: S3 bucket name for Panther CloudFormation packaging
    Value: !Ref Source
  InputDataBucket:
    Description: S3 bucket name for bucket that will contain data that are meant to be processed by the log analysis
    Value: !Ref InputDataBucket

  # Networking + elb
  SubnetOneId:
    Description: Public subnet one
    Value: !If [CreateSubnets, !Ref PublicSubnetOne, !Ref SubnetOneID]
  SubnetTwoId:
    Description: Public subnet two
    Value: !If [CreateSubnets, !Ref PublicSubnetTwo, !Ref SubnetTwoID]
  LoadBalancerArn:
    Description: Web load balancer arn
    Value: !Ref PublicLoadBalancer
  LoadBalancerFullName:
    Description: Web load balancer full resource name
    Value: !GetAtt PublicLoadBalancer.LoadBalancerFullName
  LoadBalancerTargetGroup:
    Description: Web load balancer distribution target group ARN
    Value: !Ref TargetGroup
  LoadBalancerUrl:
    Description: Panther URL - application load balancer or custom domain
    Value: !If [UseCustomDomain, !Ref CustomDomain, !GetAtt PublicLoadBalancer.DNSName]
  WebSecurityGroup:
    Description: Public web app security group
    Value: !Ref WebApplicationServerSecurityGroup

  # ECR
  ImageRegistryName:
    Description: Name of the ECR repository hosting web images
    Value: !If [IsDeployFromSource, !Ref PantherWebImageRepository, '']
  ImageRegistryUri:
    Condition: IsDeployFromSource
    Description: Docker image registry which stores web app images
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/${PantherWebImageRepository}'

  # Appsync
  AppsyncServiceRoleArn:
    Description: Appsync IAM role for logs and resolvers
    Value: !GetAtt AppsyncServiceRole.Arn
  GraphQLApiEndpoint:
    Description: The URL to the Appsync GraphQL Endpoint
    Value: !GetAtt GraphQLApi.GraphQLUrl
  GraphQLApiId:
    Description: The id of the Appsync GraphQL Endpoint
    Value: !GetAtt GraphQLApi.ApiId

  # Cognito
  UserPoolId:
    Description: Cognito user pool ID
    Value: !Ref UserPool

  # Dynamo
  DynamoScalingRoleArn:
    Description: IAM role arn for DynamoDB auto-scaling
    Value: !GetAtt DynamoScalingRole.Arn

  # KMS
  OutputsEncryptionKeyId:
    Description: KMS key for encrypting Panther alert outputs
    Value: !Ref OutputsEncryptionKey
  QueueEncryptionKeyId:
    Description: KMS key for encrypting Panther SQS queues
    Value: !Ref QueueEncryptionKey

  # SNS
  ProcessedDataTopicArn:
    Description: SNS topic ARN for processed log data notifications
    Value: !Ref ProcessedDataNotifications
  InputDataTopicArn:
    Description: SNS topic ARN for data that is sent as input to Log Analysis
    Value: !Ref InputNotificationsTopic
  AlarmTopicArn:
    Description: SNS topic ARN for CloudWatch alarms
    Value: !If [CreateAlarmSNSTopic, !Ref AlarmNotifications, !Ref AlarmTopicArn]
