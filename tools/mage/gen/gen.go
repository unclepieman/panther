package gen

/**
 * Panther is a Cloud-Native SIEM for the Modern Security Team.
 * Copyright (C) 2020 Panther Labs Inc
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

import (
	"fmt"
	"path/filepath"
	"strings"

	"github.com/magefile/mage/sh"
	"gopkg.in/yaml.v3"

	"github.com/panther-labs/panther/tools/mage/gen/dashboards"
	"github.com/panther-labs/panther/tools/mage/logger"
	"github.com/panther-labs/panther/tools/mage/util"
)

var log = logger.Build("[gen]")

// Autogenerate parts of the source code: API SDKs, GraphQL types, CW dashboards
func Gen() error {
	results := make(chan util.TaskResult)
	count := 0

	count++
	go func(c chan util.TaskResult) {
		c <- util.TaskResult{Summary: "go generate", Err: goGenerate()}
	}(results)

	count++
	go func(c chan util.TaskResult) {
		c <- util.TaskResult{Summary: "graphQL", Err: graphQLCodegen()}
	}(results)

	count++
	go func(c chan util.TaskResult) {
		c <- util.TaskResult{Summary: "cw dashboards", Err: cwDashboards()}
	}(results)

	return util.WaitForTasks(log, results, 1, count, count)
}

func goGenerate() error {
	const generatePattern = "./..."
	if err := sh.Run("go", "generate", generatePattern); err != nil {
		return fmt.Errorf("go:generate failed: %s", err)
	}
	return nil
}

func graphQLCodegen() error {
	if err := sh.Run("npm", "run", "graphql-codegen"); err != nil {
		return fmt.Errorf("graphql generation failed: %v", err)
	}
	return nil
}

// Generate deployments/dashboards.yml
func cwDashboards() error {
	dashboardResources := dashboards.Dashboards()
	log.Debugf("loaded %d dashboards", len(dashboardResources))

	template := map[string]interface{}{
		"AWSTemplateFormatVersion": "2010-09-09",
		"Description":              "Panther's CloudWatch monitoring dashboards",
	}

	resources := make(map[string]interface{}, len(dashboardResources))
	for _, dashboard := range dashboardResources {
		logicalID := strings.TrimPrefix(dashboard.Properties.DashboardName.Sub, "Panther")
		logicalID = strings.TrimSuffix(logicalID, "-${AWS::Region}")
		resources[logicalID] = dashboard
	}

	template["Resources"] = resources
	body, err := yaml.Marshal(template)
	if err != nil {
		return fmt.Errorf("dashboard yaml marshal failed: %v", err)
	}

	body = append([]byte("# NOTE: template auto-generated by 'mage gen', DO NOT EDIT\n"), body...)

	target := filepath.Join("deployments", "dashboards.yml")
	util.MustWriteFile(target, body)
	return nil
}
