package api

/**
 * Panther is a Cloud-Native SIEM for the Modern Security Team.
 * Copyright (C) 2020 Panther Labs Inc
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

import (
	"math"
	"sort"
	"strconv"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/service/cloudwatch"
	"go.uber.org/zap"

	compliancemodels "github.com/panther-labs/panther/api/lambda/compliance/models"
	"github.com/panther-labs/panther/api/lambda/metrics/models"
	"github.com/panther-labs/panther/pkg/metrics"
)

const (
	alertsMetric = "AlertsCreated"
)

// getAlertsBySeverity returns the count of log analysis alerts generated by severity
//
// This is a time series metric.
func getAlertsBySeverity(input *models.GetMetricsInput, output *models.GetMetricsOutput) error {
	// Build the query based on the applicable metric dimensions
	analysisSeverities := []*string{
		aws.String(string(compliancemodels.SeverityCritical)),
		aws.String(string(compliancemodels.SeverityHigh)),
		aws.String(string(compliancemodels.SeverityMedium)),
		aws.String(string(compliancemodels.SeverityLow)),
		aws.String(string(compliancemodels.SeverityInfo)),
	}

	queries := make([]*cloudwatch.MetricDataQuery, 0, len(analysisSeverities))
	for i, severity := range analysisSeverities {
		queries = append(queries, &cloudwatch.MetricDataQuery{
			Id:    aws.String("query" + strconv.Itoa(i)),
			Label: severity,
			MetricStat: &cloudwatch.MetricStat{
				Metric: &cloudwatch.Metric{
					Dimensions: []*cloudwatch.Dimension{
						{
							Name:  aws.String("AnalysisType"),
							Value: aws.String("Rule"),
						},
						{
							Name:  aws.String("Severity"),
							Value: severity,
						},
					},
					MetricName: aws.String(alertsMetric),
					Namespace:  aws.String(input.Namespace),
				},
				Period: aws.Int64(input.IntervalMinutes * 60), // number of seconds, must be multiple of 60
				Stat:   aws.String("Sum"),
				Unit:   aws.String("Count"),
			},
		})
	}
	zap.L().Debug("prepared metric queries", zap.Any("queries", queries), zap.Any("toDate", input.ToDate), zap.Any("fromDate", input.FromDate))

	metricData, err := getMetricData(input, queries)
	if err != nil {
		return err
	}
	values, timestamps := normalizeTimeStamps(input, metricData)

	output.AlertsBySeverity = &models.MetricResult{
		SeriesData: models.TimeSeriesMetric{
			Timestamps: timestamps,
			Series:     values,
		},
	}
	return nil
}

// getTotalAlertsDelta the total count of alerts in the given time period, and additionally the
// total count of alerts in the previous time period of equal size to the requested time period.
//
// This is a single value metric.
func getTotalAlertsDelta(input *models.GetMetricsInput, output *models.GetMetricsOutput) error {
	// Whatever time frame we're supposed to look at, actually look at double that time frame
	timeFrame := input.FromDate.Sub(input.ToDate)
	dStart := input.FromDate.Add(timeFrame)

	// Construct a new input model here because we want to overwrite the FromDate and IntervalHours
	// fields without potentially affecting any other metrics that need to be generated.
	dInput := &models.GetMetricsInput{
		FromDate:        dStart,
		ToDate:          input.ToDate,
		IntervalMinutes: int64(math.Abs(timeFrame.Minutes())),
	}

	// Build the query based on the applicable metric dimensions
	queries := []*cloudwatch.MetricDataQuery{
		{
			Id:    aws.String("query"),
			Label: aws.String("alerts"),
			MetricStat: &cloudwatch.MetricStat{
				Metric: &cloudwatch.Metric{
					Dimensions: []*cloudwatch.Dimension{
						{
							Name:  aws.String("AnalysisType"),
							Value: aws.String("Rule"),
						},
					},
					MetricName: aws.String(alertsMetric),
					Namespace:  aws.String(input.Namespace),
				},
				Period: aws.Int64(dInput.IntervalMinutes * 60), // number of seconds, must be multiple of 60
				Stat:   aws.String("Sum"),
				Unit:   aws.String("Count"),
			},
		},
	}

	zap.L().Debug("prepared metric queries", zap.Any("queries", queries), zap.Any("toDate", input.ToDate), zap.Any("fromDate", input.FromDate))

	metricData, err := getMetricData(dInput, queries)
	if err != nil {
		return err
	}

	values, _ := normalizeTimeStamps(dInput, metricData)
	output.TotalAlertsDelta = &models.MetricResult{
		SingleValue: []models.SingleMetric{
			{
				Label: aws.String("Current Period"),
				Value: values[0].Values[0],
			},
			{
				Label: aws.String("Previous Period"),
				Value: values[0].Values[1],
			},
		},
	}

	return nil
}

// getAlertsByRuleID returns the total count of alerts in the given time period
//
// This is a single value metric.
func getAlertsByRuleID(input *models.GetMetricsInput, output *models.GetMetricsOutput) error {
	// Determine applicable metric dimensions
	var listMetricsResponse []*cloudwatch.Metric
	err := cloudwatchClient.ListMetricsPages(&cloudwatch.ListMetricsInput{
		MetricName: aws.String(alertsMetric),
		Namespace:  aws.String(input.Namespace),
		Dimensions: []*cloudwatch.DimensionFilter{
			{
				Name:  aws.String("AnalysisType"),
				Value: aws.String("Rule"),
			},
			{
				Name: aws.String("AnalysisID"),
			},
		},
	}, func(page *cloudwatch.ListMetricsOutput, _ bool) bool {
		listMetricsResponse = append(listMetricsResponse, page.Metrics...)
		return true
	})
	if err != nil {
		zap.L().Error("unable to list metrics", zap.String("metric", alertsMetric), zap.Error(err))
		return metricsInternalError
	}
	zap.L().Debug("found applicable metrics", zap.Any("metrics", listMetricsResponse))

	// intervalMinutes does not apply for this metric, overwrite whatever was
	// passed with the interval covering the entire timeframe.
	timeFrame := input.FromDate.Sub(input.ToDate)
	input.IntervalMinutes = int64(math.Abs(timeFrame.Minutes()))

	// Build the query based on the applicable metric dimensions
	var queries []*cloudwatch.MetricDataQuery
	for i, metric := range listMetricsResponse {
		queries = append(queries, &cloudwatch.MetricDataQuery{
			Id:    aws.String("query" + strconv.Itoa(i)),
			Label: aws.String(aws.StringValue(metric.Dimensions[1].Value)), // AnalysisID dimension
			MetricStat: &cloudwatch.MetricStat{
				Metric: metric,
				Period: aws.Int64(input.IntervalMinutes * 60), // number of seconds, must be multiple of 60
				Stat:   aws.String("Sum"),
				Unit:   aws.String(metrics.UnitCount),
			},
		})
	}
	zap.L().Debug("prepared metric queries", zap.Any("queries", queries), zap.Any("toDate", input.ToDate), zap.Any("fromDate", input.FromDate))

	metricData, err := getMetricData(input, queries)
	if err != nil {
		return err
	}

	values, _ := normalizeTimeStamps(input, metricData)

	// Sort the results in order of total number of alerts over the given time period
	sort.Slice(values[:], func(i, j int) bool {
		return totalValue(values[i].Values) > totalValue(values[j].Values)
	})

	// build out the single metric output
	singleMetrics := make([]models.SingleMetric, len(values))
	for i := 0; i < len(values); i++ {
		singleMetrics[i] = models.SingleMetric{
			Label: aws.String(*values[i].Label),
			Value: values[i].Values[0],
		}
	}
	output.AlertsByRuleID = &models.MetricResult{
		SingleValue: singleMetrics,
	}
	return nil
}
