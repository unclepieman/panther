scalar AWSEmail
scalar AWSDateTime
scalar AWSTimestamp
scalar AWSJSON
scalar Long

schema {
  query: Query
  mutation: Mutation
}

type Mutation {
  addCustomLog(input: AddOrUpdateCustomLogInput!): GetCustomLogOutput!
  addDataModel(input: AddOrUpdateDataModelInput!): DataModel!
  addDestination(input: DestinationInput!): Destination
  addComplianceIntegration(input: AddComplianceIntegrationInput!): ComplianceIntegration!
  addS3LogIntegration(input: AddS3LogIntegrationInput!): S3LogIntegration!
  addSqsLogIntegration(input: AddSqsLogIntegrationInput!): SqsLogSourceIntegration!
  addPolicy(input: AddPolicyInput!): Policy!
  addRule(input: AddRuleInput!): Rule!
  addGlobalPythonModule(input: AddGlobalPythonModuleInput!): GlobalPythonModule!
  deleteDataModel(input: DeleteDataModelInput!): Boolean
  deleteDetections(input: DeleteDetectionInput!): Boolean
  deleteDestination(id: ID!): Boolean
  deleteComplianceIntegration(id: ID!): Boolean
  deleteCustomLog(input: DeleteCustomLogInput): DeleteCustomLogOutput!
  deleteLogIntegration(id: ID!): Boolean
  deleteGlobalPythonModule(input: DeleteGlobalPythonModuleInput!): Boolean
  deleteUser(id: ID!): Boolean
  inviteUser(input: InviteUserInput): User!
  remediateResource(input: RemediateResourceInput!): Boolean
  deliverAlert(input: DeliverAlertInput!): AlertSummary!
  resetUserPassword(id: ID!): User!
  suppressPolicies(input: SuppressPoliciesInput!): Boolean
  testPolicy(input: TestPolicyInput!): TestPolicyResponse!
  testRule(input: TestRuleInput!): TestRuleResponse!
  updateAlertStatus(input: UpdateAlertStatusInput!): [AlertSummary!]!
  updateDataModel(input: AddOrUpdateDataModelInput!): DataModel!
  updateCustomLog(input: AddOrUpdateCustomLogInput!): GetCustomLogOutput!
  updateDestination(input: DestinationInput!): Destination
  updateComplianceIntegration(input: UpdateComplianceIntegrationInput!): ComplianceIntegration!
  updateS3LogIntegration(input: UpdateS3LogIntegrationInput!): S3LogIntegration!
  updateSqsLogIntegration(input: UpdateSqsLogIntegrationInput!): SqsLogSourceIntegration!
  updateGeneralSettings(input: UpdateGeneralSettingsInput!): GeneralSettings!
  updatePolicy(input: UpdatePolicyInput!): Policy!
  updateRule(input: UpdateRuleInput!): Rule!
  updateUser(input: UpdateUserInput!): User!
  uploadDetections(input: UploadDetectionsInput!): UploadDetectionsResponse
  updateGlobalPythonlModule(input: ModifyGlobalPythonModuleInput!): GlobalPythonModule!
  updateAnalysisPack(input: UpdateAnalysisPackInput!): AnalysisPack!
}

type Query {
  alert(input: GetAlertInput!): AlertDetails
  alerts(input: ListAlertsInput): ListAlertsResponse
  detections(input: ListDetectionsInput): ListDetectionsResponse!
  sendTestAlert(input: SendTestAlertInput!): [DeliveryResponse]!
  destination(id: ID!): Destination
  destinations: [Destination]
  generalSettings: GeneralSettings!
  getComplianceIntegration(id: ID!): ComplianceIntegration!
  getComplianceIntegrationTemplate(
    input: GetComplianceIntegrationTemplateInput!
  ): IntegrationTemplate!
  getDataModel(id: ID!): DataModel
  getS3LogIntegration(id: ID!): S3LogIntegration!
  getS3LogIntegrationTemplate(input: GetS3LogIntegrationTemplateInput!): IntegrationTemplate!
  getSqsLogIntegration(id: ID!): SqsLogSourceIntegration!
  remediations: AWSJSON
  resource(input: GetResourceInput!): ResourceDetails
  resources(input: ListResourcesInput): ListResourcesResponse
  resourcesForPolicy(input: ResourcesForPolicyInput!): ListComplianceItemsResponse
  getGlobalPythonModule(input: GetGlobalPythonModuleInput!): GlobalPythonModule!
  policy(input: GetPolicyInput!): Policy
  policiesForResource(input: PoliciesForResourceInput): ListComplianceItemsResponse
  listAvailableLogTypes: ListAvailableLogTypesResponse!
  listComplianceIntegrations: [ComplianceIntegration!]!
  listDataModels(input: ListDataModelsInput!): ListDataModelsResponse!
  listLogIntegrations: [LogIntegration!]!
  listAnalysisPacks(input: ListAnalysisPacksInput) : ListAnalysisPacksResponse!
  organizationStats(input: OrganizationStatsInput): OrganizationStatsResponse
  getLogAnalysisMetrics(input: LogAnalysisMetricsInput!): LogAnalysisMetricsResponse!
  rule(input: GetRuleInput!): Rule
  getAnalysisPack(id: ID!): AnalysisPack!
  listGlobalPythonModules(input: ListGlobalPythonModuleInput!): ListGlobalPythonModulesResponse!
  users: [User!]!
  getCustomLog(input: GetCustomLogInput!): GetCustomLogOutput!
  listCustomLogs: [CustomLogRecord!]!
}

input ListAnalysisPacksInput {
  enabled: Boolean
  updateAvailable: Boolean
  nameContains: String
  sortDir: SortDirEnum # defaults to `ascending`
  # Paging
  pageSize: Int # defaults to `25`
  page: Int # defaults to `1`
}

input AnalysisPackVersionInput {
  id: Int!
  semVer: String!
}

input UpdateAnalysisPackInput {
  enabled: Boolean
  id: ID!
  versionId: Int
}

input ListDetectionsInput {
  # Policy Only
  complianceStatus: ComplianceStatusEnum
  hasRemediation: Boolean
  resourceTypes: [String!]

  # Rule Only
  logTypes: [String!]

  # Common
  analysisTypes: [DetectionTypeEnum!]
  nameContains: String
  enabled: Boolean
  severity: [SeverityEnum!]
  createdBy: String
  lastModifiedBy: String
  initialSet: Boolean
  tags: [String!]
  sortBy: ListDetectionsSortFieldsEnum # defaults to `id`
  sortDir: SortDirEnum # defaults to `ascending`
  pageSize: Int # defaults to `25`
  page: Int # defaults to `1`
}

input DeleteEntry {
  id: ID!
}

input DataModelMappingInput {
  name: String!
  path: String
  method: String
}

input AddOrUpdateDataModelInput {
  displayName: String!
  id: ID!
  enabled: Boolean!
  logTypes: [String!]!
  mappings: [DataModelMappingInput!]!
  body: String
}

input ListDataModelsInput {
  enabled: Boolean
  nameContains: String
  logTypes: [String!]
  sortBy: ListDataModelsSortFieldsEnum
  sortDir: SortDirEnum
  page: Int
  pageSize: Int
}

input DeleteDataModelInput {
  dataModels: [DeleteEntry!]!
}

input DeleteCustomLogInput {
  logType: String!
  revision: Int!
}

input AddOrUpdateCustomLogInput {
  revision: Int
  logType: String!
  description: String!
  referenceURL: String!
  logSpec: String!
}

input GetCustomLogInput {
  logType: String!
  revision: Int
}

input GetComplianceIntegrationTemplateInput {
  awsAccountId: String!
  integrationLabel: String!
  remediationEnabled: Boolean
  cweEnabled: Boolean
}

input GetS3LogIntegrationTemplateInput {
  awsAccountId: String!
  integrationLabel: String!
  s3Bucket: String!
  kmsKey: String
  managedBucketNotifications: Boolean!
}

input ListAlertsInput {
  ruleId: ID
  pageSize: Int # defaults to `25`
  exclusiveStartKey: String
  severity: [SeverityEnum]
  logTypes: [String!]
  resourceTypes: [String!]
  types: [AlertTypesEnum!]
  nameContains: String
  createdAtBefore: AWSDateTime
  createdAtAfter: AWSDateTime
  status: [AlertStatusesEnum]
  eventCountMin: Int
  eventCountMax: Int
  sortBy: ListAlertsSortFieldsEnum # defaults to `createdAt`
  sortDir: SortDirEnum # defaults to `descending` (always on `createdAt` field)
}

input GetAlertInput {
  alertId: ID!
  eventsPageSize: Int
  eventsExclusiveStartKey: String
}

type ListDetectionsResponse {
  detections: [Detection!]!
  paging: PagingData!
}
type ListAnalysisPacksResponse {
  packs: [AnalysisPack!]!
  paging: PagingData!
}

type DataModelMapping {
  name: String!
  path: String
  method: String
}

type DataModel {
  displayName: String!
  id: ID!
  enabled: Boolean!
  logTypes: [String!]!
  mappings: [DataModelMapping!]!
  body: String
  createdAt: AWSDateTime!
  lastModified: AWSDateTime!
}

type ListDataModelsResponse {
  models: [DataModel!]!
  paging: PagingData!
}

type CustomLogOutput {
  error: Error
  record: CustomLogRecord
}

type DeleteCustomLogOutput {
  error: Error
}

type ListAvailableLogTypesResponse {
  logTypes: [String!]!
}

type GetCustomLogOutput {
  error: Error
  record: CustomLogRecord
}

type CustomLogRecord {
  logType: String!
  revision: Int!
  updatedAt: String!
  description: String!
  referenceURL: String!
  logSpec: String!
}

type IntegrationTemplate {
  body: String!
  stackName: String!
}

type IntegrationItemHealthStatus {
  healthy: Boolean!
  message: String!
  rawErrorMessage: String
}

type ComplianceIntegrationHealth {
  auditRoleStatus: IntegrationItemHealthStatus!
  cweRoleStatus: IntegrationItemHealthStatus!
  remediationRoleStatus: IntegrationItemHealthStatus!
}

type S3LogIntegrationHealth {
  processingRoleStatus: IntegrationItemHealthStatus!
  s3BucketStatus: IntegrationItemHealthStatus!
  kmsKeyStatus: IntegrationItemHealthStatus!
  getObjectStatus: IntegrationItemHealthStatus # can be null for sources created in Panther<1.16
  bucketNotificationsStatus: IntegrationItemHealthStatus
}

type SqsLogIntegrationHealth {
  sqsStatus: IntegrationItemHealthStatus
}

type AlertSummaryPolicyInfo {
  policyId: ID
  resourceId: String
  policySourceId: String!
  resourceTypes: [String!]!
}

type AlertSummaryRuleInfo {
  ruleId: ID
  logTypes: [String!]!
  eventsMatched: Int!
}

type AlertDetailsRuleInfo {
  ruleId: ID
  logTypes: [String!]!
  eventsMatched: Int!
  dedupString: String!
  events: [AWSJSON!]!
  eventsLastEvaluatedKey: String
}

union AlertSummaryDetectionInfo = AlertSummaryRuleInfo | AlertSummaryPolicyInfo
union AlertDetailsDetectionInfo = AlertDetailsRuleInfo | AlertSummaryPolicyInfo

interface Alert {
  alertId: ID!
  creationTime: AWSDateTime!
  deliveryResponses: [DeliveryResponse]!
  severity: SeverityEnum!
  status: AlertStatusesEnum!
  title: String!
  type: AlertTypesEnum!
  lastUpdatedBy: ID # gets mapped to a User in the frontend
  lastUpdatedByTime: AWSDateTime # stores the timestamp of the last person who modified the Alert
  updateTime: AWSDateTime! # stores the timestamp from an update from a dedup event
}

type AlertDetails implements Alert {
  alertId: ID!
  creationTime: AWSDateTime!
  deliveryResponses: [DeliveryResponse]!
  severity: SeverityEnum!
  status: AlertStatusesEnum!
  title: String!
  type: AlertTypesEnum!
  lastUpdatedBy: ID # gets mapped to a User in the frontend
  lastUpdatedByTime: AWSDateTime # stores the timestamp of the last person who modified the Alert
  updateTime: AWSDateTime! # stores the timestamp from an update from a dedup event
  detection: AlertDetailsDetectionInfo!
  description: String
  reference: String
  runbook: String
}

type AlertSummary implements Alert {
  alertId: ID!
  creationTime: AWSDateTime!
  deliveryResponses: [DeliveryResponse]!
  type: AlertTypesEnum!
  severity: SeverityEnum!
  status: AlertStatusesEnum!
  title: String!
  lastUpdatedBy: ID # gets mapped to a User in the frontend
  lastUpdatedByTime: AWSDateTime # stores the timestamp of the last person who modified the Alert
  updateTime: AWSDateTime! # stores the timestamp from an update from a dedup event
  detection: AlertSummaryDetectionInfo!
}

type DeliveryResponse {
  outputId: ID!
  message: String!
  statusCode: Int!
  success: Boolean!
  dispatchedAt: AWSDateTime!
}

type ListAlertsResponse {
  alertSummaries: [AlertSummary]!
  lastEvaluatedKey: String
}

input DeliverAlertInput {
  alertId: ID!
  outputIds: [ID!]!
}

input UpdateAlertStatusInput {
  alertIds: [ID!]!
  status: AlertStatusesEnum!
}

input SendTestAlertInput {
  outputIds: [ID!]!
}

input AddRuleInput {
  body: String!
  dedupPeriodMinutes: Int!
  threshold: Int!
  description: String
  displayName: String
  enabled: Boolean!
  id: ID!
  logTypes: [String!]
  outputIds: [ID!]
  reference: String
  runbook: String
  severity: SeverityEnum!
  tags: [String!]
  tests: [DetectionTestDefinitionInput!]
}

input UpdateRuleInput {
  body: String
  dedupPeriodMinutes: Int
  threshold: Int
  description: String
  displayName: String
  enabled: Boolean
  id: ID!
  logTypes: [String!]
  outputIds: [ID!]
  reference: String
  runbook: String
  severity: SeverityEnum
  tags: [String!]
  tests: [DetectionTestDefinitionInput!]
}

input GetRuleInput {
  id: ID!
  versionId: ID
}

input DeleteDetectionInput {
  detections: [DeleteEntry!]!
}

interface Detection {
  body: String!
  createdAt: AWSDateTime!
  createdBy: ID
  description: String
  displayName: String
  enabled: Boolean!
  id: ID!
  lastModified: AWSDateTime
  lastModifiedBy: ID
  outputIds: [ID!]!
  reference: String
  runbook: String
  severity: SeverityEnum!
  tags: [String!]!
  tests: [DetectionTestDefinition!]!
  versionId: ID
  analysisType: DetectionTypeEnum!
}

type Rule implements Detection {
  body: String!
  createdAt: AWSDateTime!
  createdBy: ID
  dedupPeriodMinutes: Int!
  threshold: Int!
  description: String
  displayName: String
  enabled: Boolean!
  id: ID!
  lastModified: AWSDateTime
  lastModifiedBy: ID
  logTypes: [String!]
  outputIds: [ID!]!
  reference: String
  runbook: String
  severity: SeverityEnum!
  tags: [String!]!
  tests: [DetectionTestDefinition!]!
  versionId: ID
  analysisType: DetectionTypeEnum!
}

type AnalysisPackVersion {
  id: Int!
  semVer: String!
}

type AnalysisPackDefinition {
  # This is an array Detection['id'] that are related to the pack
  IDs: [ID!]
}

type AnalysisPackTypes {
  GLOBAL: Int
  RULE: Int
  DATAMODEL: Int
  POLICY: Int
}

type AnalysisPack {
  id: ID!
  enabled: Boolean!
  updateAvailable: Boolean!

  description: String!
  displayName: String!
  packVersion: AnalysisPackVersion!
  availableVersions: [AnalysisPackVersion!]!

  createdBy: ID!
  lastModifiedBy: ID!
  createdAt: AWSDateTime!
  lastModified: AWSDateTime!

  packDefinition: AnalysisPackDefinition!
  packTypes: AnalysisPackTypes!

  enumeration: AnalysisPackEnumeration!
}

type AnalysisPackEnumeration {
  paging: PagingData!
  detections: [Detection!]!
  models: [DataModel!]!
  globals: [GlobalPythonModule!]!
}

input SuppressPoliciesInput {
  policyIds: [ID]!
  resourcePatterns: [String]!
}

input PoliciesForResourceInput {
  resourceId: ID
  severity: SeverityEnum
  status: ComplianceStatusEnum
  suppressed: Boolean
  # Paging
  pageSize: Int # defaults to `25`
  page: Int # defaults to `1`
}

input ResourcesForPolicyInput {
  policyId: ID
  status: ComplianceStatusEnum
  suppressed: Boolean
  # Paging
  pageSize: Int # defaults to `25`
  page: Int # defaults to `1`
}

type ListComplianceItemsResponse {
  items: [ComplianceItem]
  paging: PagingData
  status: ComplianceStatusEnum
  totals: ActiveSuppressCount
}

type ComplianceItem {
  errorMessage: String
  lastUpdated: AWSDateTime
  policyId: ID
  policySeverity: SeverityEnum
  resourceId: ID
  resourceType: String
  status: ComplianceStatusEnum
  suppressed: Boolean
  integrationId: ID
}

type ActiveSuppressCount {
  active: ComplianceStatusCounts
  suppressed: ComplianceStatusCounts
}

input OrganizationStatsInput {
  limitTopFailing: Int
}

input LogAnalysisMetricsInput {
  intervalMinutes: Int!
  fromDate: AWSDateTime!
  toDate: AWSDateTime!
  metricNames: [String!]!
}

type ComplianceStatusCounts {
  error: Int
  fail: Int
  pass: Int
}

type OrganizationReportBySeverity {
  info: ComplianceStatusCounts
  low: ComplianceStatusCounts
  medium: ComplianceStatusCounts
  high: ComplianceStatusCounts
  critical: ComplianceStatusCounts
}

type ScannedResourceStats {
  count: ComplianceStatusCounts
  type: String
}

type ScannedResources {
  byType: [ScannedResourceStats]
}

type OrganizationStatsResponse {
  appliedPolicies: OrganizationReportBySeverity
  scannedResources: ScannedResources
  topFailingPolicies: [Policy!]!
  topFailingResources: [ResourceSummary!]!
}

type LongSeries {
  label: String!
  values: [Long!]!
}

type LongSeriesData {
  timestamps: [AWSDateTime!]!
  series: [LongSeries!]!
}

type FloatSeries {
  label: String!
  values: [Float!]!
}

type FloatSeriesData {
  timestamps: [AWSDateTime!]!
  series: [FloatSeries!]!
}

type SingleValue {
  label: String!
  value: Int!
}

type LogAnalysisMetricsResponse {
  eventsProcessed: LongSeriesData!
  alertsBySeverity: LongSeriesData!
  """
  TODO: uncomment when event latency data are fixed (PR #2509, Ticket #2492)
  eventsLatency: FloatSeriesData!
  """
  totalAlertsDelta: [SingleValue!]!
  alertsByRuleID: [SingleValue!]!
  fromDate: AWSDateTime!
  toDate: AWSDateTime!
  intervalMinutes: Int!
}

input UpdateGeneralSettingsInput {
  displayName: String
  email: String
  errorReportingConsent: Boolean
  analyticsConsent: Boolean
}

type GeneralSettings {
  displayName: String
  email: String
  errorReportingConsent: Boolean
  analyticsConsent: Boolean
}

input TestPolicyInput {
  body: String!
  resourceTypes: [String!]!
  tests: [DetectionTestDefinitionInput!]!
}

input TestRuleInput {
  body: String!
  logTypes: [String!]!
  tests: [DetectionTestDefinitionInput!]!
}

type SqsConfig {
  logTypes: [String!]!
  allowedPrincipalArns: [String]
  allowedSourceArns: [String]
  queueUrl: String!
}

type ComplianceIntegration {
  awsAccountId: String!
  createdAtTime: AWSDateTime!
  createdBy: ID!
  integrationId: ID!
  integrationLabel: String!
  cweEnabled: Boolean
  remediationEnabled: Boolean
  regionIgnoreList: [String!]
  resourceTypeIgnoreList: [String!]
  health: ComplianceIntegrationHealth!
  stackName: String!
}

union LogIntegration = S3LogIntegration | SqsLogSourceIntegration

type S3PrefixLogTypes {
  prefix: String!
  logTypes: [String!]!
}
type S3LogIntegration {
  awsAccountId: String!
  createdAtTime: AWSDateTime!
  createdBy: ID!
  integrationId: ID!
  integrationType: String!
  integrationLabel: String!
  lastEventReceived: AWSDateTime
  s3Bucket: String!
  s3Prefix: String
  kmsKey: String
  s3PrefixLogTypes: [S3PrefixLogTypes!]!
  managedBucketNotifications: Boolean!
  notificationsConfigurationSucceeded: Boolean!
  health: S3LogIntegrationHealth!
  stackName: String!
}

type ManagedS3Resources {
  topicARN: String
}

type SqsLogSourceIntegration {
  createdAtTime: AWSDateTime!
  createdBy: ID!
  integrationId: ID!
  integrationLabel: String!
  integrationType: String!
  lastEventReceived: AWSDateTime
  sqsConfig: SqsConfig!
  health: SqsLogIntegrationHealth!
}

input AddComplianceIntegrationInput {
  awsAccountId: String!
  integrationLabel: String!
  remediationEnabled: Boolean
  cweEnabled: Boolean
  regionIgnoreList: [String!]
  resourceTypeIgnoreList: [String!]
}

input S3PrefixLogTypesInput {
  prefix: String!
  logTypes: [String!]!
}

input AddS3LogIntegrationInput {
  awsAccountId: String!
  integrationLabel: String!
  s3Bucket: String!
  kmsKey: String
  s3PrefixLogTypes: [S3PrefixLogTypesInput!]!
  managedBucketNotifications: Boolean!
}

input SqsLogConfigInput {
  logTypes: [String!]!
  allowedPrincipalArns: [String]!
  allowedSourceArns: [String]!
}

input AddSqsLogIntegrationInput {
  integrationLabel: String!
  sqsConfig: SqsLogConfigInput!
}

input UpdateComplianceIntegrationInput {
  integrationId: String!
  integrationLabel: String
  cweEnabled: Boolean
  remediationEnabled: Boolean
  regionIgnoreList: [String!]
  resourceTypeIgnoreList: [String!]
}

input UpdateS3LogIntegrationInput {
  integrationId: String!
  integrationLabel: String
  s3Bucket: String
  kmsKey: String
  s3PrefixLogTypes: [S3PrefixLogTypesInput!]
}

input UpdateSqsLogIntegrationInput {
  integrationId: String!
  integrationLabel: String!
  sqsConfig: SqsLogConfigInput!
}

type ListResourcesResponse {
  paging: PagingData
  resources: [ResourceSummary]
}

type Destination {
  createdBy: String!
  creationTime: AWSDateTime!
  displayName: String!
  lastModifiedBy: String!
  lastModifiedTime: AWSDateTime!
  outputId: ID!
  outputType: DestinationTypeEnum!
  outputConfig: DestinationConfig!
  verificationStatus: String
  defaultForSeverity: [SeverityEnum]!
  alertTypes: [AlertTypesEnum!]!
}

type DestinationConfig {
  slack: SlackConfig
  sns: SnsConfig
  sqs: SqsDestinationConfig
  pagerDuty: PagerDutyConfig
  github: GithubConfig
  jira: JiraConfig
  opsgenie: OpsgenieConfig
  msTeams: MsTeamsConfig
  asana: AsanaConfig
  customWebhook: CustomWebhookConfig
}

type SqsDestinationConfig {
  queueUrl: String!
}

type OpsgenieConfig {
  apiKey: String!
  serviceRegion: OpsgenieServiceRegionEnum!
}

type MsTeamsConfig {
  webhookURL: String!
}

type JiraConfig {
  orgDomain: String!
  projectKey: String!
  userName: String!
  apiKey: String!
  assigneeId: String
  issueType: String!
  labels: [String!]!
}

type AsanaConfig {
  personalAccessToken: String!
  projectGids: [String!]!
}

type CustomWebhookConfig {
  webhookURL: String!
}

type GithubConfig {
  repoName: String!
  token: String!
}

type SlackConfig {
  webhookURL: String!
}

type SnsConfig {
  topicArn: String!
}

type PagerDutyConfig {
  integrationKey: String!
}

input DestinationInput {
  outputId: ID
  displayName: String!
  outputConfig: DestinationConfigInput!
  outputType: String!
  defaultForSeverity: [SeverityEnum]!
  alertTypes: [AlertTypesEnum]!
}

input DestinationConfigInput {
  slack: SlackConfigInput
  sns: SnsConfigInput
  sqs: SqsConfigInput
  pagerDuty: PagerDutyConfigInput
  github: GithubConfigInput
  jira: JiraConfigInput
  opsgenie: OpsgenieConfigInput
  msTeams: MsTeamsConfigInput
  asana: AsanaConfigInput
  customWebhook: CustomWebhookConfigInput
}

input SqsConfigInput {
  queueUrl: String!
}

input OpsgenieConfigInput {
  apiKey: String!
  serviceRegion: OpsgenieServiceRegionEnum!
}

input MsTeamsConfigInput {
  webhookURL: String!
}

input JiraConfigInput {
  orgDomain: String!
  projectKey: String!
  userName: String!
  apiKey: String!
  assigneeId: String
  issueType: String!
  labels: [String!]
}

input AsanaConfigInput {
  personalAccessToken: String!
  projectGids: [String!]!
}

input CustomWebhookConfigInput {
  webhookURL: String!
}

input GithubConfigInput {
  repoName: String!
  token: String!
}

input SlackConfigInput {
  webhookURL: String!
}

input SnsConfigInput {
  topicArn: String!
}

input PagerDutyConfigInput {
  integrationKey: String!
}

type Policy implements Detection {
  autoRemediationId: ID
  autoRemediationParameters: AWSJSON
  body: String!
  complianceStatus: ComplianceStatusEnum
  createdAt: AWSDateTime!
  createdBy: ID
  description: String
  displayName: String
  enabled: Boolean!
  id: ID!
  lastModified: AWSDateTime
  lastModifiedBy: ID
  outputIds: [ID!]!
  reference: String
  resourceTypes: [String!]
  runbook: String
  severity: SeverityEnum!
  suppressions: [String!]
  tags: [String!]!
  tests: [DetectionTestDefinition!]!
  versionId: ID
  analysisType: DetectionTypeEnum!
}

type GlobalPythonModule {
  body: String!
  description: String!
  id: ID!
  createdAt: AWSDateTime!
  lastModified: AWSDateTime!
}

type ListGlobalPythonModulesResponse {
  paging: PagingData
  globals: [GlobalPythonModule]
}

type PagingData {
  thisPage: Int
  totalPages: Int
  totalItems: Int
}

input AddPolicyInput {
  autoRemediationId: ID
  autoRemediationParameters: AWSJSON
  body: String!
  description: String
  displayName: String
  enabled: Boolean!
  id: ID!
  outputIds: [ID!]
  reference: String
  resourceTypes: [String]
  runbook: String
  severity: SeverityEnum!
  suppressions: [String]
  tags: [String]
  tests: [DetectionTestDefinitionInput]
}

input UpdatePolicyInput {
  autoRemediationId: ID
  autoRemediationParameters: AWSJSON
  body: String
  description: String
  displayName: String
  enabled: Boolean
  id: ID!
  outputIds: [ID!]
  reference: String
  resourceTypes: [String]
  runbook: String
  severity: SeverityEnum
  suppressions: [String]
  tags: [String]
  tests: [DetectionTestDefinitionInput]
}

input GetPolicyInput {
  id: ID!
  versionId: ID
}

input ListGlobalPythonModuleInput {
  nameContains: String
  enabled: Boolean
  # Sorting
  #  sortBy: ListRulesSortFieldsEnum # defaults to `id`
  sortDir: SortDirEnum # defaults to `ascending`
  # Paging
  pageSize: Int # defaults to `25`
  page: Int # defaults to `1`
}

input GetGlobalPythonModuleInput {
  id: ID!
  versionId: ID
}

input ModifyGlobalPythonModuleInput {
  description: String!
  id: ID!
  body: String!
}

input AddGlobalPythonModuleInput {
  id: ID!
  description: String!
  body: String!
}

input DeleteGlobalPythonModuleInput {
  globals: [DeleteEntry!]!
}

input UploadDetectionsInput {
  data: String! # Base64-encoded zipfile with a policy bundle
}

input GetResourceInput {
  resourceId: ID!
}

input ListResourcesInput {
  complianceStatus: ComplianceStatusEnum
  deleted: Boolean
  idContains: String
  integrationId: ID
  types: [String!]
  # Sorting
  sortBy: ListResourcesSortFieldsEnum # defaults to `id`
  sortDir: SortDirEnum # defaults to `ascending`
  # Paging
  pageSize: Int # defaults to `25`
  page: Int # defaults to `1`
}

input RemediateResourceInput {
  policyId: ID!
  resourceId: ID!
}

type DetectionTestDefinition {
  expectedResult: Boolean
  name: String
  resource: String # The `attributes` field of the Resource in stringified JSON format
}

input DetectionTestDefinitionInput {
  expectedResult: Boolean
  name: String
  resource: String # The `attributes` field of the Resource in stringified JSON format
}

input UpdateUserInput {
  id: ID!
  givenName: String
  familyName: String
  email: AWSEmail
}

type UploadDetectionsResponse {
  totalPolicies: Int!
  newPolicies: Int!
  modifiedPolicies: Int!

  totalRules: Int!
  newRules: Int!
  modifiedRules: Int!

  totalGlobals: Int!
  newGlobals: Int!
  modifiedGlobals: Int!

  totalDataModels: Int!
  newDataModels: Int!
  modifiedDataModels: Int!
}

type Error {
  code: String
  message: String!
}

type TestDetectionSubRecord {
  output: String
  error: Error
}

interface TestRecord {
  id: String!
  name: String!
  passed: Boolean!
  error: Error
}

type TestPolicyRecordFunctions {
  policyFunction: TestDetectionSubRecord!
}

type TestPolicyRecord implements TestRecord {
  id: String!
  name: String!
  passed: Boolean!
  functions: TestPolicyRecordFunctions!
  error: Error
}

type TestPolicyResponse {
  results: [TestPolicyRecord!]!
}

type TestRuleRecordFunctions {
  ruleFunction: TestDetectionSubRecord!
  titleFunction: TestDetectionSubRecord
  dedupFunction: TestDetectionSubRecord
  alertContextFunction: TestDetectionSubRecord
  descriptionFunction: TestDetectionSubRecord
  destinationsFunction: TestDetectionSubRecord
  referenceFunction: TestDetectionSubRecord
  runbookFunction: TestDetectionSubRecord
  severityFunction: TestDetectionSubRecord
}

type TestRuleRecord implements TestRecord {
  id: String!
  name: String!
  passed: Boolean!
  functions: TestRuleRecordFunctions!
  error: Error
}

type TestRuleResponse {
  results: [TestRuleRecord!]!
}

type ResourceSummary {
  id: ID
  integrationId: ID
  complianceStatus: ComplianceStatusEnum
  deleted: Boolean
  lastModified: AWSDateTime
  type: String
}

type ResourceDetails {
  attributes: AWSJSON
  deleted: Boolean
  expiresAt: Int
  id: ID
  integrationId: ID
  complianceStatus: ComplianceStatusEnum
  lastModified: AWSDateTime
  type: String
}

type User {
  givenName: String
  familyName: String
  id: ID!
  email: AWSEmail!
  createdAt: AWSTimestamp!
  status: String!
}

input InviteUserInput {
  givenName: String
  familyName: String
  email: AWSEmail
  messageAction: MessageActionEnum
}

enum ComplianceStatusEnum {
  ERROR
  FAIL
  PASS
}

enum ListResourcesSortFieldsEnum {
  complianceStatus
  id
  lastModified
  type
}

enum ListPoliciesSortFieldsEnum {
  complianceStatus
  enabled
  id
  lastModified
  severity
  resourceTypes
}

enum ListRulesSortFieldsEnum {
  displayName
  id
  lastModified
  logTypes
  severity
}

enum ListDetectionsSortFieldsEnum {
  displayName
  id
  lastModified
  enabled
  severity
}

enum ListDataModelsSortFieldsEnum {
  enabled
  id
  lastModified
  logTypes
}

enum ListAlertsSortFieldsEnum {
  createdAt
}

enum AlertStatusesEnum {
  OPEN
  TRIAGED
  CLOSED
  RESOLVED
}

enum AlertTypesEnum {
  RULE
  RULE_ERROR
  POLICY
}

enum SortDirEnum {
  ascending
  descending
}

enum SeverityEnum {
  INFO
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AccountTypeEnum {
  aws
}

enum DestinationTypeEnum {
  slack
  pagerduty
  github
  jira
  opsgenie
  msteams
  sns
  sqs
  asana
  customwebhook
}

enum OpsgenieServiceRegionEnum {
  EU
  US
}

enum ErrorCodeEnum {
  NotFound
}

enum MessageActionEnum {
  RESEND
  SUPPRESS
}

enum DetectionTypeEnum {
  RULE
  POLICY
}
