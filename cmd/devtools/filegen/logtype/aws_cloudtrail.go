package logtype

/**
 * Panther is a Cloud-Native SIEM for the Modern Security Team.
 * Copyright (C) 2020 Panther Labs Inc
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

import (
	"io"
	"strings"
	"time"

	"github.com/google/uuid"
	jsoniter "github.com/json-iterator/go"

	"github.com/panther-labs/panther/cmd/devtools/filegen"
	"github.com/panther-labs/panther/internal/log_analysis/log_processor/parsers/awslogs"
)

const (
	AWSCloudTrailName = awslogs.TypeCloudTrail

	// https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-log-file-examples.html
	cloudTrailFilePrefix          = "111122223333_CloudTrail_us-east-2_"
	cloudTrailFileTimestampFormat = "20060102T1504Z" // e.g., 20150801T0210Z
)

type AWSCloudTrail struct {
	filegen.JSON
}

func NewAWSCloudTrail() *AWSCloudTrail {
	return &AWSCloudTrail{
		JSON: *filegen.NewJSON(),
	}
}

func (ct *AWSCloudTrail) LogType() string {
	return AWSCloudTrailName
}

func (ct *AWSCloudTrail) Filename(hour time.Time) string {
	// https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-log-file-examples.html
	fileName := strings.Replace(uuid.New().String(), "-", "", -1) + ".json" // UniqueString cannot have '-'
	return cloudTrailFilePrefix + hour.Format(cloudTrailFileTimestampFormat) + "_" + fileName
}

func (ct *AWSCloudTrail) NewFile(hour time.Time) *filegen.File {
	f := filegen.NewFile(ct, hour)
	defer f.Close()
	_, err := io.WriteString(f, `{"Records": [`)
	if err != nil {
		panic(err)
	}
	var event awslogs.CloudTrail
	nrows := ct.Rows()
	lastRowIndex := nrows - 1
	for i := 0; i < nrows; i++ {
		ct.fillEvent(&event, hour)
		jsonl, err := jsoniter.Marshal(&event)
		if err != nil {
			panic(err)
		}
		_, err = f.Write(jsonl)
		if err != nil {
			panic(err)
		}
		if i < lastRowIndex {
			_, err = io.WriteString(f, ",")
			if err != nil {
				panic(err)
			}
		}
	}
	_, err = io.WriteString(f, "]}")
	if err != nil {
		panic(err)
	}
	return f
}

func (ct *AWSCloudTrail) fillEvent(event *awslogs.CloudTrail, hour time.Time) {
	event.AdditionalEventData = filegen.RawMessage(0, 5)
	event.APIVersion = filegen.ToPantherString(filegen.String(8))
	event.AWSRegion = filegen.ToPantherString(filegen.String(10))
	// event.ErrorCode           pantherlog.String       `json:"errorCode" description:"The AWS service error."`
	// event.ErrorMessage        pantherlog.String       `json:"errorMessage" description:"the description of the error..."`
	event.EventID = filegen.ToPantherString(filegen.String(16))
	event.EventName = filegen.ToPantherString(filegen.String(8))
	event.EventSource = filegen.ToPantherString(filegen.String(8) + ".amazonaws.com")
	event.EventTime = hour
	event.EventType = filegen.ToPantherString(filegen.StringChoice(cloudTrailEventTypes))
	event.EventVersion = filegen.ToPantherString(filegen.String(8))
	// event.ManagementEvent     pantherlog.Bool  `json:"managementEvent" description:"whether the event is a management event"`
	event.ReadOnly = filegen.ToPantherBool(filegen.Bool())
	event.RecipientAccountID = filegen.ToPantherString(filegen.AWSAccountID())
	event.RequestID = filegen.ToPantherString(filegen.String(16))
	event.RequestParameters = filegen.RawMessage(0, 10)
	event.Resources = []awslogs.CloudTrailResources{
		{
			ARN:       filegen.ToPantherString(filegen.ARN()),
			AccountID: filegen.ToPantherString(filegen.AWSAccountID()),
			Type:      filegen.ToPantherString(filegen.String(8)),
		},
		{
			ARN:       filegen.ToPantherString(filegen.ARN()),
			AccountID: filegen.ToPantherString(filegen.AWSAccountID()),
			Type:      filegen.ToPantherString(filegen.String(8)),
		},
	}
	event.ResponseElements = filegen.RawMessage(0, 15)
	event.ServiceEventDetails = filegen.RawMessage(0, 5)
	// event.SharedEventID       pantherlog.String `json:"sharedEventID" description:"GUID generated by CloudTrail..."`
	event.SourceIPAddress = filegen.ToPantherString(filegen.IP())
	event.UserAgent = filegen.ToPantherString(filegen.String(16))
	event.UserIdentity = &awslogs.CloudTrailUserIdentity{
		Type:        filegen.ToPantherString(filegen.StringChoice(cloudTrailUserIdentityTypes)),
		PrincipalID: filegen.ToPantherString(filegen.String(8)),
		ARN:         filegen.ToPantherString(filegen.ARN()),
		AccountID:   filegen.ToPantherString(filegen.AWSAccountID()),
		// AccessKeyID:      pantherlog.String{},
		Username: filegen.ToPantherString(filegen.String(8)),
		// SessionContext:   nil,
		// InvokedBy:        pantherlog.String{},
		// IdentityProvider: pantherlog.String{},
	}
	event.VPCEndpointID = filegen.ToPantherString(filegen.String(8))
}

var (
	cloudTrailEventTypes        = []string{"AwsApiCall", "AwsServiceEvent", "AwsConsoleSignIn"}
	cloudTrailUserIdentityTypes = []string{"AWSService", "AssumedRole"}
)
