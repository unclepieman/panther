{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"b9036fa3-bd5c-4f1b-905f-563eaf4213a1","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.00038,"duration_s":0.0454,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"8e7a9fb6-e568-4454-8d01-d80a9f9f47d8","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.00036,"duration_s":0.04321,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"7c6709ae-8776-4b05-9128-8f8029dbada1","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.00038,"duration_s":0.04367,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"876558d0-914c-4be0-8123-32df52d31bb9","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.00039,"duration_s":0.04388,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"0f31e0ad-c408-45a1-8636-e26b2fd34fba","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.00036,"duration_s":0.0444,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/rocket-man","format":"html","controller":"ProjectsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"id","value":"rocket-man"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002371,"correlation_id":"4Nq7SIFLzla","meta.user":"test_namespace","meta.caller_id":"ProjectsController#show","gitaly_calls":5,"gitaly_duration_s":0.003876,"redis_calls":53,"redis_duration_s":0.004197,"cpu_s":0.16,"db_duration_s":0.01255,"view_duration_s":0.11291,"duration_s":0.15569,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"operationName","value":"pathLastCommit"},{"key":"variables","value":"[FILTERED]"},{"key":"query","value":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"},{"key":"graphql","value":{"operationName":"pathLastCommit","variables":"[FILTERED]","query":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.08767,"correlation_id":"pP5TE16wMD5","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.004411,"redis_calls":6,"redis_duration_s":0.00185,"cpu_s":0.14,"db_duration_s":0.01417,"view_duration_s":0.00032,"duration_s":0.06586,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002949,"correlation_id":"SBKhcuOI2H4","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000686,"redis_calls":2,"redis_duration_s":0.000201,"cpu_s":0.05,"db_duration_s":0.00436,"view_duration_s":0.00052,"duration_s":0.05076,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/uploads/-/system/user/avatar/2/avatar.png","format":"html","controller":"UploadsController","action":"show","status":200,"params":[{"key":"width","value":"40"},{"key":"model","value":"user"},{"key":"mounted_as","value":"avatar"},{"key":"id","value":"2"},{"key":"filename","value":"avatar.png"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003325,"correlation_id":"KvEZsIrQs31","meta.user":"test_namespace","meta.caller_id":"UploadsController#show","redis_calls":1,"redis_duration_s":8.4e-05,"cpu_s":0.02,"db_duration_s":0.00207,"view_duration_s":0.0,"duration_s":0.01189,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/rocket-man/-/blob/master/README.md","format":"json","controller":"Projects::BlobController","action":"show","status":200,"params":[{"key":"viewer","value":"rich"},{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"project_id","value":"rocket-man"},{"key":"id","value":"master/README.md"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003008,"correlation_id":"kv2u6MVFpg2","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/rocket-man","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"Projects::BlobController#show","gitaly_calls":6,"gitaly_duration_s":0.00968,"redis_calls":9,"redis_duration_s":0.002047,"cpu_s":0.05,"db_duration_s":0.0031,"view_duration_s":0.00039,"duration_s":0.05536,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/rocket-man/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"project_id","value":"rocket-man"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003498,"correlation_id":"ZOQnTdRjRQ5","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/rocket-man","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.011121,"redis_calls":9,"redis_duration_s":0.001396,"cpu_s":0.04,"db_duration_s":0.01108,"view_duration_s":0.0003,"duration_s":0.0508,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/testprojectid","format":"html","controller":"ProjectsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"id","value":"testprojectid"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002295,"correlation_id":"i7B9CH5WHGa","meta.user":"test_namespace","meta.caller_id":"ProjectsController#show","gitaly_calls":5,"gitaly_duration_s":0.008437,"redis_calls":35,"redis_duration_s":0.003067,"cpu_s":0.17,"db_duration_s":0.0294,"view_duration_s":0.12745,"duration_s":0.19995,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"operationName","value":"pathLastCommit"},{"key":"variables","value":"[FILTERED]"},{"key":"query","value":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"},{"key":"graphql","value":{"operationName":"pathLastCommit","variables":"[FILTERED]","query":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002622,"correlation_id":"lTOO4FL0VN7","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.002928,"redis_calls":3,"redis_duration_s":0.000288,"cpu_s":0.04,"db_duration_s":0.00528,"view_duration_s":0.0003,"duration_s":0.04805,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project","format":"html","controller":"ProjectsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002185,"correlation_id":"ywMCt1Tikz2","meta.user":"test_namespace","meta.caller_id":"ProjectsController#show","gitaly_calls":3,"gitaly_duration_s":0.00323,"redis_calls":51,"redis_duration_s":0.003538,"cpu_s":0.17,"db_duration_s":0.01787,"view_duration_s":0.12168,"duration_s":0.17976,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00275,"correlation_id":"YJuZ5ap9Yt3","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000465,"redis_calls":2,"redis_duration_s":0.0002,"cpu_s":0.04,"db_duration_s":0.00341,"view_duration_s":0.00046,"duration_s":0.04117,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"operationName","value":"pathLastCommit"},{"key":"variables","value":"[FILTERED]"},{"key":"query","value":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"},{"key":"graphql","value":{"operationName":"pathLastCommit","variables":"[FILTERED]","query":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002848,"correlation_id":"lqZ27mZbVsa","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.006424,"redis_calls":4,"redis_duration_s":0.000369,"cpu_s":0.05,"db_duration_s":0.00538,"view_duration_s":0.00029,"duration_s":0.0626,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/testprojectid/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"testprojectid"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002355,"correlation_id":"YVwuytrURb7","meta.user":"test_namespace","meta.project":"test_namespace/testprojectid","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002997,"redis_calls":7,"redis_duration_s":0.000492,"cpu_s":0.03,"db_duration_s":0.00238,"view_duration_s":0.00068,"duration_s":0.02515,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/testprojectid/-/blob/master/README.md","format":"json","controller":"Projects::BlobController","action":"show","status":200,"params":[{"key":"viewer","value":"rich"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"testprojectid"},{"key":"id","value":"master/README.md"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002493,"correlation_id":"bk2rvRuX6h5","meta.user":"test_namespace","meta.project":"test_namespace/testprojectid","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::BlobController#show","gitaly_calls":6,"gitaly_duration_s":0.012265,"redis_calls":7,"redis_duration_s":0.00051,"cpu_s":0.04,"db_duration_s":0.00268,"view_duration_s":0.00027,"duration_s":0.04958,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/panther","format":"html","controller":"ProjectsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"id","value":"panther"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002286,"correlation_id":"Q6BunSjFgm2","meta.user":"test_namespace","meta.caller_id":"ProjectsController#show","gitaly_calls":5,"gitaly_duration_s":0.003595,"redis_calls":36,"redis_duration_s":0.002347,"cpu_s":0.14,"db_duration_s":0.01275,"view_duration_s":0.10795,"duration_s":0.14693,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"operationName","value":"pathLastCommit"},{"key":"variables","value":"[FILTERED]"},{"key":"query","value":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"},{"key":"graphql","value":{"operationName":"pathLastCommit","variables":"[FILTERED]","query":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002698,"correlation_id":"2x8nted2w3","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.004321,"redis_calls":3,"redis_duration_s":0.00029,"cpu_s":0.04,"db_duration_s":0.00482,"view_duration_s":0.00035,"duration_s":0.04354,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002897,"correlation_id":"FVyqFuMRe78","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000522,"redis_calls":2,"redis_duration_s":0.000192,"cpu_s":0.06,"db_duration_s":0.00354,"view_duration_s":0.00166,"duration_s":0.06195,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002729,"correlation_id":"FG6F4aVpD6","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000645,"redis_calls":2,"redis_duration_s":0.000221,"cpu_s":0.1,"db_duration_s":0.00418,"view_duration_s":0.00513,"duration_s":0.10946,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/space-marines","format":"html","controller":"ProjectsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"id","value":"space-marines"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002072,"correlation_id":"3wwdXS5AlP6","meta.user":"test_namespace","meta.caller_id":"ProjectsController#show","gitaly_calls":5,"gitaly_duration_s":0.004121,"redis_calls":34,"redis_duration_s":0.003825,"cpu_s":0.14,"db_duration_s":0.01386,"view_duration_s":0.10579,"duration_s":0.14715,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/panther/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"panther"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003716,"correlation_id":"3nRMwZfA469","meta.user":"test_namespace","meta.project":"test_namespace/panther","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":1,"gitaly_duration_s":0.003166,"redis_calls":8,"redis_duration_s":0.000649,"cpu_s":0.03,"db_duration_s":0.00234,"view_duration_s":0.00215,"duration_s":0.02511,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/panther/-/blob/master/README.md","format":"json","controller":"Projects::BlobController","action":"show","status":200,"params":[{"key":"viewer","value":"rich"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"panther"},{"key":"id","value":"master/README.md"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003983,"correlation_id":"FtZJI5JL1o5","meta.user":"test_namespace","meta.project":"test_namespace/panther","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::BlobController#show","gitaly_calls":6,"gitaly_duration_s":0.00703,"redis_calls":10,"redis_duration_s":0.000907,"cpu_s":0.25,"db_duration_s":0.00252,"view_duration_s":0.00361,"duration_s":0.25075,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002595,"correlation_id":"v9ynwPjGBR","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.00874,"redis_calls":7,"redis_duration_s":0.000535,"cpu_s":0.03,"db_duration_s":0.00258,"view_duration_s":0.00185,"duration_s":0.03592,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/panther/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"25"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"panther"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.011133,"correlation_id":"Xi0rgAUW9M8","meta.user":"test_namespace","meta.project":"test_namespace/panther","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":1,"gitaly_duration_s":0.005949,"redis_calls":10,"redis_duration_s":0.001164,"cpu_s":0.04,"db_duration_s":0.00228,"view_duration_s":0.00068,"duration_s":0.02495,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"25"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002658,"correlation_id":"2vvGwn2Swr4","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002987,"redis_calls":7,"redis_duration_s":0.000443,"cpu_s":0.03,"db_duration_s":0.00206,"view_duration_s":0.00168,"duration_s":0.02434,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"50"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00325,"correlation_id":"tkUpPL9NzK7","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003323,"redis_calls":7,"redis_duration_s":0.000553,"cpu_s":0.04,"db_duration_s":0.0021,"view_duration_s":0.00178,"duration_s":0.03112,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/super-porg-soldiers","format":"html","controller":"ProjectsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"id","value":"super-porg-soldiers"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002298,"correlation_id":"Z7BhfDcSUX8","meta.user":"test_namespace","meta.caller_id":"ProjectsController#show","gitaly_calls":5,"gitaly_duration_s":0.00641,"redis_calls":51,"redis_duration_s":0.004063,"cpu_s":0.16,"db_duration_s":0.01179,"view_duration_s":0.10212,"duration_s":0.15231,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"75"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002435,"correlation_id":"0XQ7e1YFJf9","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003055,"redis_calls":7,"redis_duration_s":0.000442,"cpu_s":0.03,"db_duration_s":0.00239,"view_duration_s":0.00328,"duration_s":0.02706,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002615,"correlation_id":"QFYlOq0Zes1","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000444,"redis_calls":2,"redis_duration_s":0.000185,"cpu_s":0.09,"db_duration_s":0.00291,"view_duration_s":0.0044,"duration_s":0.09753,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"100"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002665,"correlation_id":"3BLkD1tvEea","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002691,"redis_calls":7,"redis_duration_s":0.00047,"cpu_s":0.03,"db_duration_s":0.00196,"view_duration_s":0.0017,"duration_s":0.02378,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"125"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002514,"correlation_id":"tKh3sS4MZw4","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002807,"redis_calls":7,"redis_duration_s":0.000578,"cpu_s":0.03,"db_duration_s":0.00228,"view_duration_s":0.00168,"duration_s":0.02574,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/gitlab","format":"html","controller":"ProjectsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"id","value":"gitlab"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00228,"correlation_id":"EWdm7gfYnf5","meta.user":"test_namespace","meta.caller_id":"ProjectsController#show","gitaly_calls":5,"gitaly_duration_s":0.003812,"redis_calls":36,"redis_duration_s":0.002435,"cpu_s":0.14,"db_duration_s":0.01096,"view_duration_s":0.11125,"duration_s":0.15498,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"150"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002639,"correlation_id":"x8W6TcQjKh8","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003009,"redis_calls":7,"redis_duration_s":0.000428,"cpu_s":0.03,"db_duration_s":0.00208,"view_duration_s":0.00175,"duration_s":0.0242,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003011,"correlation_id":"gJBOjWjM1h1","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000454,"redis_calls":2,"redis_duration_s":0.000174,"cpu_s":0.09,"db_duration_s":0.00287,"view_duration_s":0.00463,"duration_s":0.08934,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"175"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002601,"correlation_id":"fUkCJFsXW46","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002703,"redis_calls":7,"redis_duration_s":0.000472,"cpu_s":0.03,"db_duration_s":0.00189,"view_duration_s":0.00171,"duration_s":0.02341,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"operationName","value":"pathLastCommit"},{"key":"variables","value":"[FILTERED]"},{"key":"query","value":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"},{"key":"graphql","value":{"operationName":"pathLastCommit","variables":"[FILTERED]","query":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003344,"correlation_id":"2dGJq3VKtv7","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.003711,"redis_calls":3,"redis_duration_s":0.000341,"cpu_s":0.05,"db_duration_s":0.00642,"view_duration_s":0.00042,"duration_s":0.05499,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"200"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003383,"correlation_id":"vpgGP7kjQRa","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003327,"redis_calls":7,"redis_duration_s":0.000518,"cpu_s":0.03,"db_duration_s":0.0025,"view_duration_s":0.00176,"duration_s":0.02542,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project","format":"html","controller":"ProjectsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"id","value":"another-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00226,"correlation_id":"7M7bgC8CA18","meta.user":"test_namespace","meta.caller_id":"ProjectsController#show","gitaly_calls":3,"gitaly_duration_s":0.00347,"redis_calls":35,"redis_duration_s":0.005074,"cpu_s":0.24,"db_duration_s":0.01334,"view_duration_s":0.18178,"duration_s":0.23951,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002912,"correlation_id":"J5fzQnO7245","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000637,"redis_calls":2,"redis_duration_s":0.000222,"cpu_s":0.04,"db_duration_s":0.00431,"view_duration_s":0.00057,"duration_s":0.04672,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"761602d5-fde2-47cc-a38d-f43398832122","cpu_s":0.06,"db_duration_s":0.0,"view_duration_s":0.00044,"duration_s":0.05308,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"225"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002813,"correlation_id":"gA2kLRzmpq2","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003157,"redis_calls":7,"redis_duration_s":0.000456,"cpu_s":0.03,"db_duration_s":0.00229,"view_duration_s":0.00179,"duration_s":0.02482,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/mars-colony","format":"html","controller":"ProjectsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"id","value":"mars-colony"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002147,"correlation_id":"lDPw1vnZhS5","meta.user":"test_namespace","meta.caller_id":"ProjectsController#show","gitaly_calls":5,"gitaly_duration_s":0.004038,"redis_calls":50,"redis_duration_s":0.003922,"cpu_s":0.16,"db_duration_s":0.01337,"view_duration_s":0.10581,"duration_s":0.15452,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"operationName","value":"pathLastCommit"},{"key":"variables","value":"[FILTERED]"},{"key":"query","value":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"},{"key":"graphql","value":{"operationName":"pathLastCommit","variables":"[FILTERED]","query":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002573,"correlation_id":"ggQHLz8wDy1","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.003567,"redis_calls":3,"redis_duration_s":0.000289,"cpu_s":0.04,"db_duration_s":0.00606,"view_duration_s":0.00048,"duration_s":0.04769,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"operationName","value":"pathLastCommit"},{"key":"variables","value":"[FILTERED]"},{"key":"query","value":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"},{"key":"graphql","value":{"operationName":"pathLastCommit","variables":"[FILTERED]","query":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00254,"correlation_id":"ihp30PPOLNa","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.003275,"redis_calls":3,"redis_duration_s":0.000277,"cpu_s":0.03,"db_duration_s":0.00594,"view_duration_s":0.00036,"duration_s":0.04779,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002581,"correlation_id":"VKLz91fuj94","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000425,"redis_calls":2,"redis_duration_s":0.000184,"cpu_s":0.09,"db_duration_s":0.00334,"view_duration_s":0.00435,"duration_s":0.103,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"250"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003096,"correlation_id":"qSyoWeepkA7","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002874,"redis_calls":7,"redis_duration_s":0.000425,"cpu_s":0.03,"db_duration_s":0.00206,"view_duration_s":0.00175,"duration_s":0.02401,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"275"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002612,"correlation_id":"NaxugJKS1b1","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002871,"redis_calls":7,"redis_duration_s":0.000515,"cpu_s":0.03,"db_duration_s":0.00222,"view_duration_s":0.00169,"duration_s":0.02829,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002632,"correlation_id":"bt81ScYTy75","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.001212,"redis_calls":2,"redis_duration_s":0.000316,"cpu_s":0.05,"db_duration_s":0.00517,"view_duration_s":0.00086,"duration_s":0.05289,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/space-marines/-/blob/master/README.md","format":"json","controller":"Projects::BlobController","action":"show","status":200,"params":[{"key":"viewer","value":"rich"},{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"project_id","value":"space-marines"},{"key":"id","value":"master/README.md"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.004776,"correlation_id":"FdoIHTlAFT8","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/space-marines","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"Projects::BlobController#show","gitaly_calls":6,"gitaly_duration_s":0.013546,"redis_calls":7,"redis_duration_s":0.000516,"cpu_s":0.07,"db_duration_s":0.00282,"view_duration_s":0.00046,"duration_s":0.07318,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003182,"correlation_id":"ISkgObMoW04","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000675,"redis_calls":2,"redis_duration_s":0.000199,"cpu_s":0.12,"db_duration_s":0.00408,"view_duration_s":0.00614,"duration_s":0.13934,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/space-marines/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"project_id","value":"space-marines"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002815,"correlation_id":"70U4FaDFqE1","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/space-marines","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.008337,"redis_calls":7,"redis_duration_s":0.001619,"cpu_s":0.04,"db_duration_s":0.01609,"view_duration_s":0.00021,"duration_s":0.05158,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"300"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.007203,"correlation_id":"JizFEhN6IP3","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003228,"redis_calls":7,"redis_duration_s":0.000506,"cpu_s":0.04,"db_duration_s":0.00418,"view_duration_s":0.00166,"duration_s":0.03078,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/my-awesome-project","format":"html","controller":"ProjectsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"id","value":"my-awesome-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00242,"correlation_id":"eSzJOKCflm8","meta.user":"test_namespace","meta.caller_id":"ProjectsController#show","gitaly_calls":5,"gitaly_duration_s":0.0057540000000000004,"redis_calls":35,"redis_duration_s":0.002829,"cpu_s":0.26,"db_duration_s":0.01765,"view_duration_s":0.20617,"duration_s":0.26399,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/uploads/-/system/project/avatar/6/spacemarines.png","format":"html","controller":"UploadsController","action":"show","status":200,"params":[{"key":"model","value":"project"},{"key":"mounted_as","value":"avatar"},{"key":"id","value":"6"},{"key":"filename","value":"spacemarines.png"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002939,"correlation_id":"FyIBfuYAH43","meta.user":"test_namespace","meta.caller_id":"UploadsController#show","redis_calls":1,"redis_duration_s":0.000105,"cpu_s":0.02,"db_duration_s":0.00253,"view_duration_s":0.0,"duration_s":0.01657,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/uploads/-/system/project/avatar/7/porg-1.png","format":"html","controller":"UploadsController","action":"show","status":200,"params":[{"key":"model","value":"project"},{"key":"mounted_as","value":"avatar"},{"key":"id","value":"7"},{"key":"filename","value":"porg-1.png"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003647,"correlation_id":"jprRnCSPKj6","meta.user":"test_namespace","meta.caller_id":"UploadsController#show","redis_calls":1,"redis_duration_s":0.00014,"cpu_s":0.02,"db_duration_s":0.00276,"view_duration_s":0.0,"duration_s":0.01785,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/uploads/-/system/project/avatar/4/saturnv.jpg","format":"html","controller":"UploadsController","action":"show","status":200,"params":[{"key":"model","value":"project"},{"key":"mounted_as","value":"avatar"},{"key":"id","value":"4"},{"key":"filename","value":"saturnv.jpg"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.004584,"correlation_id":"hlcEU3odXh8","meta.user":"test_namespace","meta.caller_id":"UploadsController#show","redis_calls":1,"redis_duration_s":8.6e-05,"cpu_s":0.02,"db_duration_s":0.00426,"view_duration_s":0.0,"duration_s":0.01859,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"325"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002333,"correlation_id":"H7eSlZbq687","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002817,"redis_calls":7,"redis_duration_s":0.000417,"cpu_s":0.03,"db_duration_s":0.00195,"view_duration_s":0.00172,"duration_s":0.02383,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"350"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.004025,"correlation_id":"XI5c2NiTl13","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003434,"redis_calls":7,"redis_duration_s":0.000578,"cpu_s":0.05,"db_duration_s":0.00214,"view_duration_s":0.0033,"duration_s":0.03513,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002641,"correlation_id":"rlUr5A18Qn4","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000437,"redis_calls":2,"redis_duration_s":0.00018,"cpu_s":0.17,"db_duration_s":0.08038,"view_duration_s":0.00464,"duration_s":0.17329,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/dashboard/projects/starred","format":"html","controller":"Dashboard::ProjectsController","action":"starred","status":200,"params":[],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002341,"correlation_id":"euIuEvCW554","meta.user":"test_namespace","meta.caller_id":"Dashboard::ProjectsController#starred","gitaly_calls":5,"gitaly_duration_s":0.011198,"redis_calls":41,"redis_duration_s":0.003284,"cpu_s":0.18,"db_duration_s":0.01277,"view_duration_s":0.15779,"duration_s":0.19458,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"operationName","value":"pathLastCommit"},{"key":"variables","value":"[FILTERED]"},{"key":"query","value":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"},{"key":"graphql","value":{"operationName":"pathLastCommit","variables":"[FILTERED]","query":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003743,"correlation_id":"LJolbXHJyd1","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.011021,"redis_calls":3,"redis_duration_s":0.000377,"cpu_s":0.07,"db_duration_s":0.00627,"view_duration_s":0.00032,"duration_s":0.08648,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/super-porg-soldiers/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"project_id","value":"super-porg-soldiers"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003346,"correlation_id":"BXeKD8cQJI8","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/super-porg-soldiers","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003929,"redis_calls":7,"redis_duration_s":0.000501,"cpu_s":0.04,"db_duration_s":0.00259,"view_duration_s":0.00043,"duration_s":0.02918,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/super-porg-soldiers/-/blob/master/README.md","format":"json","controller":"Projects::BlobController","action":"show","status":200,"params":[{"key":"viewer","value":"rich"},{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"project_id","value":"super-porg-soldiers"},{"key":"id","value":"master/README.md"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002771,"correlation_id":"MDwqRPhB8a8","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/super-porg-soldiers","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"Projects::BlobController#show","gitaly_calls":6,"gitaly_duration_s":0.008277,"redis_calls":9,"redis_duration_s":0.002436,"cpu_s":0.05,"db_duration_s":0.0029,"view_duration_s":0.00025,"duration_s":0.05352,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/gitlab/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"gitlab"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.004459,"correlation_id":"X6C3B3EkdP5","meta.user":"test_namespace","meta.project":"test_namespace/gitlab","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":1,"gitaly_duration_s":0.003379,"redis_calls":8,"redis_duration_s":0.033128,"cpu_s":0.07,"db_duration_s":0.00216,"view_duration_s":0.00241,"duration_s":0.0651,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"375"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003547,"correlation_id":"HVngbletOb4","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003414,"redis_calls":7,"redis_duration_s":0.000541,"cpu_s":0.04,"db_duration_s":0.00276,"view_duration_s":0.00246,"duration_s":0.03159,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/gitlab/-/blob/master/README.md","format":"json","controller":"Projects::BlobController","action":"show","status":200,"params":[{"key":"viewer","value":"rich"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"gitlab"},{"key":"id","value":"master/README.md"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002803,"correlation_id":"l8wzKCXqMX3","meta.user":"test_namespace","meta.project":"test_namespace/gitlab","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::BlobController#show","gitaly_calls":6,"gitaly_duration_s":0.031195,"redis_calls":10,"redis_duration_s":0.040596,"cpu_s":0.17,"db_duration_s":0.00282,"view_duration_s":0.00089,"duration_s":0.20084,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"operationName","value":"pathLastCommit"},{"key":"variables","value":"[FILTERED]"},{"key":"query","value":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"},{"key":"graphql","value":{"operationName":"pathLastCommit","variables":"[FILTERED]","query":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002795,"correlation_id":"PBrCMnjCgl4","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.003008,"redis_calls":3,"redis_duration_s":0.000294,"cpu_s":0.04,"db_duration_s":0.00548,"view_duration_s":0.00029,"duration_s":0.04545,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/gitlab/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"25"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"gitlab"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002222,"correlation_id":"zmn3uHpyjb7","meta.user":"test_namespace","meta.project":"test_namespace/gitlab","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":1,"gitaly_duration_s":0.003168,"redis_calls":8,"redis_duration_s":0.024062,"cpu_s":0.05,"db_duration_s":0.00173,"view_duration_s":0.00198,"duration_s":0.04953,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"400"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002701,"correlation_id":"73lGrbk4h0a","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.004413,"redis_calls":7,"redis_duration_s":0.000474,"cpu_s":0.03,"db_duration_s":0.00251,"view_duration_s":0.00171,"duration_s":0.02701,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002618,"correlation_id":"WmmLiBFoKta","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000454,"redis_calls":2,"redis_duration_s":0.000194,"cpu_s":0.09,"db_duration_s":0.00309,"view_duration_s":0.00429,"duration_s":0.0972,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002768,"correlation_id":"XDahHzUbP33","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000659,"redis_calls":2,"redis_duration_s":0.000242,"cpu_s":0.11,"db_duration_s":0.00437,"view_duration_s":0.00058,"duration_s":0.11605,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/gitlab/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"50"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"gitlab"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003835,"correlation_id":"xQAb21QEDA3","meta.user":"test_namespace","meta.project":"test_namespace/gitlab","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":1,"gitaly_duration_s":0.003111,"redis_calls":8,"redis_duration_s":0.034665,"cpu_s":0.07,"db_duration_s":0.0032,"view_duration_s":0.00335,"duration_s":0.06575,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/dashboard/groups","format":"html","controller":"Dashboard::GroupsController","action":"index","status":200,"params":[],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002239,"correlation_id":"MCcgL15ifQ7","meta.user":"test_namespace","meta.caller_id":"Dashboard::GroupsController#index","redis_calls":9,"redis_duration_s":0.000656,"cpu_s":0.06,"db_duration_s":0.00778,"view_duration_s":0.03788,"duration_s":0.06144,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/gitlab/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"75"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"gitlab"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002573,"correlation_id":"CX5xZxdR083","meta.user":"test_namespace","meta.project":"test_namespace/gitlab","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":1,"gitaly_duration_s":0.003273,"redis_calls":8,"redis_duration_s":0.029216,"cpu_s":0.06,"db_duration_s":0.00198,"view_duration_s":0.00242,"duration_s":0.05821,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"operationName","value":"pathLastCommit"},{"key":"variables","value":"[FILTERED]"},{"key":"query","value":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"},{"key":"graphql","value":{"operationName":"pathLastCommit","variables":"[FILTERED]","query":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002602,"correlation_id":"MA0TrZfiy","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.003626,"redis_calls":3,"redis_duration_s":0.000329,"cpu_s":0.06,"db_duration_s":0.00645,"view_duration_s":0.00049,"duration_s":0.06212,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002585,"correlation_id":"TzJ3SdSI8f5","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000605,"redis_calls":2,"redis_duration_s":0.000178,"cpu_s":0.1,"db_duration_s":0.00307,"view_duration_s":0.00426,"duration_s":0.10899,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"425"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002485,"correlation_id":"35h3vwrqma6","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003029,"redis_calls":7,"redis_duration_s":0.000408,"cpu_s":0.03,"db_duration_s":0.00196,"view_duration_s":0.00182,"duration_s":0.02396,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002768,"correlation_id":"zQ4BZzIgxf3","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000468,"redis_calls":2,"redis_duration_s":0.000191,"cpu_s":0.04,"db_duration_s":0.00301,"view_duration_s":0.00043,"duration_s":0.03726,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/mars-colony/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"project_id","value":"mars-colony"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002846,"correlation_id":"nCvibukm542","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/mars-colony","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003267,"redis_calls":7,"redis_duration_s":0.000521,"cpu_s":0.04,"db_duration_s":0.00196,"view_duration_s":0.00028,"duration_s":0.02638,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/mars-colony/-/blob/master/README.md","format":"json","controller":"Projects::BlobController","action":"show","status":200,"params":[{"key":"viewer","value":"rich"},{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"project_id","value":"mars-colony"},{"key":"id","value":"master/README.md"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00277,"correlation_id":"N3qw3kHAsx4","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/mars-colony","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"Projects::BlobController#show","gitaly_calls":6,"gitaly_duration_s":0.005961,"redis_calls":7,"redis_duration_s":0.000581,"cpu_s":0.11,"db_duration_s":0.00233,"view_duration_s":0.00026,"duration_s":0.10508,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002486,"correlation_id":"1BiBmbTPpsa","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002684,"redis_calls":7,"redis_duration_s":0.00049,"cpu_s":0.03,"db_duration_s":0.00188,"view_duration_s":0.00172,"duration_s":0.02346,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"450"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00263,"correlation_id":"BF4WSeALiZ1","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002728,"redis_calls":7,"redis_duration_s":0.000422,"cpu_s":0.03,"db_duration_s":0.00186,"view_duration_s":0.00203,"duration_s":0.02449,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/dashboard/activity","format":"html","controller":"DashboardController","action":"activity","status":200,"params":[],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002315,"correlation_id":"yJmn88qp959","meta.user":"test_namespace","meta.caller_id":"DashboardController#activity","redis_calls":12,"redis_duration_s":0.000964,"cpu_s":0.06,"db_duration_s":0.00387,"view_duration_s":0.03902,"duration_s":0.05507,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"25"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002655,"correlation_id":"QlRbOM04gM8","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.006443,"redis_calls":7,"redis_duration_s":0.000605,"cpu_s":0.03,"db_duration_s":0.00238,"view_duration_s":0.00191,"duration_s":0.03058,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002625,"correlation_id":"ycVcKX5eSea","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000485,"redis_calls":2,"redis_duration_s":0.000193,"cpu_s":0.09,"db_duration_s":0.00358,"view_duration_s":0.00457,"duration_s":0.09319,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/my-awesome-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"my-awesome-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002512,"correlation_id":"bNGlCIJA3Y6","meta.user":"test_namespace","meta.project":"test_namespace/my-awesome-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003094,"redis_calls":7,"redis_duration_s":0.000479,"cpu_s":0.03,"db_duration_s":0.00231,"view_duration_s":0.00032,"duration_s":0.0236,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"475"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002359,"correlation_id":"mmgOnXFQAf2","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002674,"redis_calls":7,"redis_duration_s":0.000485,"cpu_s":0.03,"db_duration_s":0.00218,"view_duration_s":0.00172,"duration_s":0.0236,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/my-awesome-project/-/blob/master/README.md","format":"json","controller":"Projects::BlobController","action":"show","status":200,"params":[{"key":"viewer","value":"rich"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"my-awesome-project"},{"key":"id","value":"master/README.md"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002511,"correlation_id":"psKRiy68VC6","meta.user":"test_namespace","meta.project":"test_namespace/my-awesome-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::BlobController#show","gitaly_calls":6,"gitaly_duration_s":0.006755,"redis_calls":7,"redis_duration_s":0.000472,"cpu_s":0.12,"db_duration_s":0.00261,"view_duration_s":0.00046,"duration_s":0.12384,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002838,"correlation_id":"99mkbSmqpK1","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000494,"redis_calls":2,"redis_duration_s":0.000255,"cpu_s":0.09,"db_duration_s":0.0031,"view_duration_s":0.00459,"duration_s":0.09503,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/dashboard/groups.json","format":"json","controller":"Dashboard::GroupsController","action":"index","status":200,"params":[],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002177,"correlation_id":"wvfpwWloRY9","meta.user":"test_namespace","meta.caller_id":"Dashboard::GroupsController#index","redis_calls":2,"redis_duration_s":0.000185,"cpu_s":0.04,"db_duration_s":0.01502,"view_duration_s":0.0003,"duration_s":0.04795,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"50"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002948,"correlation_id":"zjesrUUFKD5","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002673,"redis_calls":7,"redis_duration_s":0.000425,"cpu_s":0.03,"db_duration_s":0.00177,"view_duration_s":0.00173,"duration_s":0.02402,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/uploads/-/system/group/avatar/3/spaceforce.jpg","format":"html","controller":"UploadsController","action":"show","status":200,"params":[{"key":"model","value":"group"},{"key":"mounted_as","value":"avatar"},{"key":"id","value":"3"},{"key":"filename","value":"spaceforce.jpg"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002261,"correlation_id":"nAJMAdEfLO4","meta.user":"test_namespace","meta.caller_id":"UploadsController#show","redis_calls":1,"redis_duration_s":0.000106,"cpu_s":0.02,"db_duration_s":0.00179,"view_duration_s":0.0,"duration_s":0.01107,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/uploads/-/system/user/avatar/2/avatar.png","format":"html","controller":"UploadsController","action":"show","status":200,"params":[{"key":"width","value":"23"},{"key":"model","value":"user"},{"key":"mounted_as","value":"avatar"},{"key":"id","value":"2"},{"key":"filename","value":"avatar.png"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00327,"correlation_id":"6tlHDafcVP9","meta.user":"test_namespace","meta.caller_id":"UploadsController#show","redis_calls":1,"redis_duration_s":0.000115,"cpu_s":0.02,"db_duration_s":0.0019,"view_duration_s":0.0,"duration_s":0.01145,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/uploads/-/system/group/avatar/3/spaceforce.jpg","format":"html","controller":"UploadsController","action":"show","status":200,"params":[{"key":"width","value":"15"},{"key":"model","value":"group"},{"key":"mounted_as","value":"avatar"},{"key":"id","value":"3"},{"key":"filename","value":"spaceforce.jpg"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002767,"correlation_id":"h6SH1WVpZV","meta.user":"test_namespace","meta.caller_id":"UploadsController#show","redis_calls":1,"redis_duration_s":8.8e-05,"cpu_s":0.02,"db_duration_s":0.00268,"view_duration_s":0.0,"duration_s":0.0154,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/uploads/-/system/project/avatar/4/saturnv.jpg","format":"html","controller":"UploadsController","action":"show","status":200,"params":[{"key":"width","value":"40"},{"key":"model","value":"project"},{"key":"mounted_as","value":"avatar"},{"key":"id","value":"4"},{"key":"filename","value":"saturnv.jpg"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003775,"correlation_id":"1KOlKDNLjZ","meta.user":"test_namespace","meta.caller_id":"UploadsController#show","redis_calls":1,"redis_duration_s":0.00013,"cpu_s":0.02,"db_duration_s":0.00284,"view_duration_s":0.0,"duration_s":0.01882,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/uploads/-/system/project/avatar/4/saturnv.jpg","format":"html","controller":"UploadsController","action":"show","status":200,"params":[{"key":"width","value":"15"},{"key":"model","value":"project"},{"key":"mounted_as","value":"avatar"},{"key":"id","value":"4"},{"key":"filename","value":"saturnv.jpg"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003334,"correlation_id":"PqneUYVMzc3","meta.user":"test_namespace","meta.caller_id":"UploadsController#show","redis_calls":1,"redis_duration_s":0.000119,"cpu_s":0.02,"db_duration_s":0.00278,"view_duration_s":0.0,"duration_s":0.02136,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/uploads/-/system/project/avatar/4/saturnv.jpg","format":"html","controller":"UploadsController","action":"show","status":200,"params":[{"key":"width","value":"64"},{"key":"model","value":"project"},{"key":"mounted_as","value":"avatar"},{"key":"id","value":"4"},{"key":"filename","value":"saturnv.jpg"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.005077,"correlation_id":"B0Oabc9Lxka","meta.user":"test_namespace","meta.caller_id":"UploadsController#show","redis_calls":1,"redis_duration_s":7.4e-05,"cpu_s":0.02,"db_duration_s":0.00209,"view_duration_s":0.0,"duration_s":0.01198,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"500"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002349,"correlation_id":"JDcseVBW3Y5","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002827,"redis_calls":7,"redis_duration_s":0.000454,"cpu_s":0.03,"db_duration_s":0.00187,"view_duration_s":0.00176,"duration_s":0.02322,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"75"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002986,"correlation_id":"nRvu2aye0Q5","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002835,"redis_calls":7,"redis_duration_s":0.000536,"cpu_s":0.03,"db_duration_s":0.00239,"view_duration_s":0.00183,"duration_s":0.02539,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00266,"correlation_id":"gxKyZiYGH14","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000469,"redis_calls":2,"redis_duration_s":0.000208,"cpu_s":0.09,"db_duration_s":0.00333,"view_duration_s":0.00434,"duration_s":0.09094,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"100"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003743,"correlation_id":"ATecVnZm1Xa","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003307,"redis_calls":7,"redis_duration_s":0.00049,"cpu_s":0.04,"db_duration_s":0.00215,"view_duration_s":0.00317,"duration_s":0.0283,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"525"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002614,"correlation_id":"lYOJuyRxaJ8","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.010611,"redis_calls":7,"redis_duration_s":0.000574,"cpu_s":0.04,"db_duration_s":0.00252,"view_duration_s":0.00186,"duration_s":0.03781,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"125"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002548,"correlation_id":"Iz3J1NN4E58","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002889,"redis_calls":7,"redis_duration_s":0.000496,"cpu_s":0.03,"db_duration_s":0.00254,"view_duration_s":0.00171,"duration_s":0.02513,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002609,"correlation_id":"dnX7Vy3RZe2","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000461,"redis_calls":2,"redis_duration_s":0.000178,"cpu_s":0.09,"db_duration_s":0.00318,"view_duration_s":0.00803,"duration_s":0.09165,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"150"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002566,"correlation_id":"LPGYax1Eo85","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.00297,"redis_calls":7,"redis_duration_s":0.000584,"cpu_s":0.04,"db_duration_s":0.00225,"view_duration_s":0.00181,"duration_s":0.03034,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/dashboard/activity","format":"json","controller":"DashboardController","action":"activity","status":200,"params":[{"key":"limit","value":"20"},{"key":"offset","value":"0"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002626,"correlation_id":"h03IgyQ3P52","meta.user":"test_namespace","meta.caller_id":"DashboardController#activity","redis_calls":42,"redis_duration_s":0.002433,"cpu_s":0.19,"db_duration_s":0.00674,"view_duration_s":0.00186,"duration_s":0.19023,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"550"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002603,"correlation_id":"t1boJC4zQy","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002742,"redis_calls":7,"redis_duration_s":0.000452,"cpu_s":0.03,"db_duration_s":0.00219,"view_duration_s":0.00175,"duration_s":0.02447,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"175"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002549,"correlation_id":"k15pE51P0Oa","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002667,"redis_calls":7,"redis_duration_s":0.000463,"cpu_s":0.03,"db_duration_s":0.00229,"view_duration_s":0.00168,"duration_s":0.02432,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"200"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.0029,"correlation_id":"cnO7Dbzvxa4","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003179,"redis_calls":7,"redis_duration_s":0.000526,"cpu_s":0.03,"db_duration_s":0.00263,"view_duration_s":0.00337,"duration_s":0.02999,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002698,"correlation_id":"WgicZY5Lj05","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000474,"redis_calls":2,"redis_duration_s":0.000205,"cpu_s":0.09,"db_duration_s":0.00348,"view_duration_s":0.0043,"duration_s":0.09509,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"575"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003195,"correlation_id":"bdi9JLil4Q5","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002724,"redis_calls":7,"redis_duration_s":0.000477,"cpu_s":0.03,"db_duration_s":0.00226,"view_duration_s":0.00171,"duration_s":0.02448,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"225"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002575,"correlation_id":"N5R4SvNlmh","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002672,"redis_calls":7,"redis_duration_s":0.000428,"cpu_s":0.03,"db_duration_s":0.00189,"view_duration_s":0.00168,"duration_s":0.02334,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"250"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002536,"correlation_id":"hyueMvhWzr8","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002602,"redis_calls":7,"redis_duration_s":0.000484,"cpu_s":0.03,"db_duration_s":0.00208,"view_duration_s":0.00173,"duration_s":0.02402,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"600"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002577,"correlation_id":"owPCRCdgyn7","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002682,"redis_calls":7,"redis_duration_s":0.000399,"cpu_s":0.03,"db_duration_s":0.00184,"view_duration_s":0.0017,"duration_s":0.02284,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"d3104a8e-f1da-4805-937a-3e2129f2adbb","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.00044,"duration_s":0.04436,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"275"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002513,"correlation_id":"BlMZPmmxLi4","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002636,"redis_calls":7,"redis_duration_s":0.000434,"cpu_s":0.03,"db_duration_s":0.00208,"view_duration_s":0.00171,"duration_s":0.02361,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"300"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002597,"correlation_id":"1zqG6uk6Iw7","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002683,"redis_calls":7,"redis_duration_s":0.000514,"cpu_s":0.03,"db_duration_s":0.00218,"view_duration_s":0.00177,"duration_s":0.02511,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003725,"correlation_id":"Q7ECY2vPtS9","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000534,"redis_calls":2,"redis_duration_s":0.000228,"cpu_s":0.09,"db_duration_s":0.00347,"view_duration_s":0.00452,"duration_s":0.09518,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"625"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002596,"correlation_id":"BznnSTF6FM9","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002679,"redis_calls":7,"redis_duration_s":0.000491,"cpu_s":0.03,"db_duration_s":0.00226,"view_duration_s":0.0018,"duration_s":0.0243,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"325"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002605,"correlation_id":"04dBlZt7CG8","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.00259,"redis_calls":7,"redis_duration_s":0.000426,"cpu_s":0.03,"db_duration_s":0.00187,"view_duration_s":0.00173,"duration_s":0.02316,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"350"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00258,"correlation_id":"fULgXop5NE7","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002686,"redis_calls":7,"redis_duration_s":0.000473,"cpu_s":0.03,"db_duration_s":0.00191,"view_duration_s":0.00188,"duration_s":0.02409,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"650"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002621,"correlation_id":"o9OGxH7vJn8","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002742,"redis_calls":7,"redis_duration_s":0.000461,"cpu_s":0.03,"db_duration_s":0.00227,"view_duration_s":0.00169,"duration_s":0.02438,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"375"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002595,"correlation_id":"H9acuPhPYz2","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002584,"redis_calls":7,"redis_duration_s":0.000496,"cpu_s":0.03,"db_duration_s":0.00192,"view_duration_s":0.00182,"duration_s":0.02385,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"400"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002622,"correlation_id":"nEBS3prN5C8","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002524,"redis_calls":7,"redis_duration_s":0.000548,"cpu_s":0.03,"db_duration_s":0.00184,"view_duration_s":0.00181,"duration_s":0.02322,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"675"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002592,"correlation_id":"xhkjpwzvLU1","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002637,"redis_calls":7,"redis_duration_s":0.000423,"cpu_s":0.03,"db_duration_s":0.00186,"view_duration_s":0.00174,"duration_s":0.02337,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"425"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002623,"correlation_id":"mMAUf4r7S7","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002594,"redis_calls":7,"redis_duration_s":0.000675,"cpu_s":0.03,"db_duration_s":0.00219,"view_duration_s":0.00167,"duration_s":0.02453,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.0027,"correlation_id":"3WxsHRkIrr3","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000491,"redis_calls":2,"redis_duration_s":0.000202,"cpu_s":0.09,"db_duration_s":0.0029,"view_duration_s":0.00578,"duration_s":0.08804,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"450"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002634,"correlation_id":"lKocspuuuu8","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002786,"redis_calls":7,"redis_duration_s":0.00055,"cpu_s":0.03,"db_duration_s":0.00236,"view_duration_s":0.00173,"duration_s":0.02493,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"475"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002539,"correlation_id":"9zKhF7pnj55","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002556,"redis_calls":7,"redis_duration_s":0.000432,"cpu_s":0.03,"db_duration_s":0.00184,"view_duration_s":0.00174,"duration_s":0.023,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"500"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002627,"correlation_id":"cC5RnSUM1t","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002574,"redis_calls":7,"redis_duration_s":0.000427,"cpu_s":0.03,"db_duration_s":0.00227,"view_duration_s":0.00171,"duration_s":0.02433,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"525"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002541,"correlation_id":"xssMbzNbdM4","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002613,"redis_calls":7,"redis_duration_s":0.000447,"cpu_s":0.03,"db_duration_s":0.00208,"view_duration_s":0.00169,"duration_s":0.02345,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"550"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00254,"correlation_id":"yNLBIduU3w5","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002732,"redis_calls":7,"redis_duration_s":0.000495,"cpu_s":0.03,"db_duration_s":0.00257,"view_duration_s":0.00168,"duration_s":0.02442,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002613,"correlation_id":"Ui7hU1wKX24","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000452,"redis_calls":2,"redis_duration_s":0.000198,"cpu_s":0.09,"db_duration_s":0.00281,"view_duration_s":0.00463,"duration_s":0.08652,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"575"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002537,"correlation_id":"xbihsBWgRH","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.009002,"redis_calls":7,"redis_duration_s":0.000468,"cpu_s":0.03,"db_duration_s":0.00248,"view_duration_s":0.00189,"duration_s":0.03114,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"600"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002576,"correlation_id":"WVpVpp9ok37","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002718,"redis_calls":7,"redis_duration_s":0.000479,"cpu_s":0.03,"db_duration_s":0.00188,"view_duration_s":0.00176,"duration_s":0.02359,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/uploads/-/system/project/avatar/7/porg-1.png","format":"html","controller":"UploadsController","action":"show","status":200,"params":[{"key":"width","value":"40"},{"key":"model","value":"project"},{"key":"mounted_as","value":"avatar"},{"key":"id","value":"7"},{"key":"filename","value":"porg-1.png"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003132,"correlation_id":"eHZYd3qnb49","meta.user":"test_namespace","meta.caller_id":"UploadsController#show","redis_calls":1,"redis_duration_s":0.00014,"cpu_s":0.02,"db_duration_s":0.00244,"view_duration_s":0.0,"duration_s":0.01609,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/uploads/-/system/project/avatar/7/porg-1.png","format":"html","controller":"UploadsController","action":"show","status":200,"params":[{"key":"width","value":"64"},{"key":"model","value":"project"},{"key":"mounted_as","value":"avatar"},{"key":"id","value":"7"},{"key":"filename","value":"porg-1.png"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002623,"correlation_id":"qszu1OWbO74","meta.user":"test_namespace","meta.caller_id":"UploadsController#show","redis_calls":1,"redis_duration_s":0.000123,"cpu_s":0.02,"db_duration_s":0.00267,"view_duration_s":0.0,"duration_s":0.01693,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/uploads/-/system/project/avatar/7/porg-1.png","format":"html","controller":"UploadsController","action":"show","status":200,"params":[{"key":"width","value":"15"},{"key":"model","value":"project"},{"key":"mounted_as","value":"avatar"},{"key":"id","value":"7"},{"key":"filename","value":"porg-1.png"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.009245,"correlation_id":"XToUtaSe27a","meta.user":"test_namespace","meta.caller_id":"UploadsController#show","redis_calls":1,"redis_duration_s":0.000105,"cpu_s":0.02,"db_duration_s":0.00258,"view_duration_s":0.0,"duration_s":0.01564,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"625"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002362,"correlation_id":"AJn5VXRadfa","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002627,"redis_calls":7,"redis_duration_s":0.000409,"cpu_s":0.03,"db_duration_s":0.00191,"view_duration_s":0.00173,"duration_s":0.02333,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"650"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002615,"correlation_id":"vKB2daitVa5","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.00253,"redis_calls":7,"redis_duration_s":0.000435,"cpu_s":0.03,"db_duration_s":0.00192,"view_duration_s":0.00172,"duration_s":0.02338,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"675"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.004928,"correlation_id":"rr2FJS6HLv5","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002582,"redis_calls":7,"redis_duration_s":0.000462,"cpu_s":0.03,"db_duration_s":0.00192,"view_duration_s":0.00173,"duration_s":0.02348,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002628,"correlation_id":"Ehk90re5RR5","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000478,"redis_calls":2,"redis_duration_s":0.000187,"cpu_s":0.04,"db_duration_s":0.00332,"view_duration_s":0.00059,"duration_s":0.04414,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"700"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002568,"correlation_id":"nzSe1Wro7d","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002575,"redis_calls":7,"redis_duration_s":0.000462,"cpu_s":0.03,"db_duration_s":0.00184,"view_duration_s":0.00066,"duration_s":0.02197,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.004378,"correlation_id":"OSFmo3SaqI5","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002542,"redis_calls":7,"redis_duration_s":0.000409,"cpu_s":0.03,"db_duration_s":0.00183,"view_duration_s":0.00173,"duration_s":0.02303,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"25"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00255,"correlation_id":"gji34TrAmj7","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002589,"redis_calls":7,"redis_duration_s":0.000425,"cpu_s":0.03,"db_duration_s":0.0021,"view_duration_s":0.00171,"duration_s":0.02357,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"50"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002661,"correlation_id":"Fuxfzrd36s4","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.0028770000000000002,"redis_calls":7,"redis_duration_s":0.000503,"cpu_s":0.03,"db_duration_s":0.0022,"view_duration_s":0.00176,"duration_s":0.02481,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"95015ea7-29c8-4523-8353-a533cc6bd480","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.00048,"duration_s":0.04588,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"75"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002548,"correlation_id":"uWewgNmR54a","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002544,"redis_calls":7,"redis_duration_s":0.000557,"cpu_s":0.03,"db_duration_s":0.00223,"view_duration_s":0.00167,"duration_s":0.02411,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"100"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002493,"correlation_id":"T1cn7LRPFC3","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002827,"redis_calls":7,"redis_duration_s":0.000423,"cpu_s":0.03,"db_duration_s":0.00197,"view_duration_s":0.0017,"duration_s":0.0234,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"125"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002593,"correlation_id":"pRB8vvzh2g5","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.00257,"redis_calls":7,"redis_duration_s":0.000423,"cpu_s":0.03,"db_duration_s":0.00215,"view_duration_s":0.00205,"duration_s":0.02408,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"150"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.006795,"correlation_id":"yzY85SgGm2","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002592,"redis_calls":7,"redis_duration_s":0.000433,"cpu_s":0.03,"db_duration_s":0.00179,"view_duration_s":0.00176,"duration_s":0.02288,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"175"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002643,"correlation_id":"klgnArGfr09","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002682,"redis_calls":7,"redis_duration_s":0.000489,"cpu_s":0.03,"db_duration_s":0.00212,"view_duration_s":0.0017,"duration_s":0.02407,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"200"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002551,"correlation_id":"0JZV1eXJjba","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002591,"redis_calls":7,"redis_duration_s":0.000446,"cpu_s":0.03,"db_duration_s":0.002,"view_duration_s":0.00171,"duration_s":0.02373,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"225"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00262,"correlation_id":"XBMRBhgYO27","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002563,"redis_calls":7,"redis_duration_s":0.000412,"cpu_s":0.03,"db_duration_s":0.00187,"view_duration_s":0.00168,"duration_s":0.0227,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"250"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002578,"correlation_id":"rMZtOUomMX6","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002595,"redis_calls":7,"redis_duration_s":0.00042,"cpu_s":0.03,"db_duration_s":0.00196,"view_duration_s":0.00169,"duration_s":0.02313,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"275"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002485,"correlation_id":"N6ey8CLd6D7","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002528,"redis_calls":7,"redis_duration_s":0.000408,"cpu_s":0.03,"db_duration_s":0.00194,"view_duration_s":0.00172,"duration_s":0.02295,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"300"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00257,"correlation_id":"vNXkyDvpkx1","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002902,"redis_calls":7,"redis_duration_s":0.000464,"cpu_s":0.03,"db_duration_s":0.00212,"view_duration_s":0.00167,"duration_s":0.02501,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"325"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002389,"correlation_id":"26wPFJGVc82","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002519,"redis_calls":7,"redis_duration_s":0.000425,"cpu_s":0.03,"db_duration_s":0.00183,"view_duration_s":0.00171,"duration_s":0.02275,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"350"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002485,"correlation_id":"eiyPnM93QX6","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002658,"redis_calls":7,"redis_duration_s":0.000406,"cpu_s":0.03,"db_duration_s":0.00184,"view_duration_s":0.00174,"duration_s":0.02305,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"375"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002588,"correlation_id":"jjAMWbNAv9a","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003105,"redis_calls":7,"redis_duration_s":0.000443,"cpu_s":0.03,"db_duration_s":0.00185,"view_duration_s":0.00173,"duration_s":0.02436,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"400"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002569,"correlation_id":"DcJdQBeR1F3","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002576,"redis_calls":7,"redis_duration_s":0.000425,"cpu_s":0.03,"db_duration_s":0.00227,"view_duration_s":0.00172,"duration_s":0.02369,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"425"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002545,"correlation_id":"8EEZmipmNI8","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002865,"redis_calls":7,"redis_duration_s":0.000485,"cpu_s":0.03,"db_duration_s":0.00228,"view_duration_s":0.0018,"duration_s":0.02482,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"450"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00255,"correlation_id":"QFNW6P04xc4","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002695,"redis_calls":7,"redis_duration_s":0.000672,"cpu_s":0.03,"db_duration_s":0.00198,"view_duration_s":0.00171,"duration_s":0.02456,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"475"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002517,"correlation_id":"xuNA3yokpJ2","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002687,"redis_calls":7,"redis_duration_s":0.000413,"cpu_s":0.03,"db_duration_s":0.00184,"view_duration_s":0.00168,"duration_s":0.02301,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"500"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002475,"correlation_id":"lRKhst3bLV6","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002539,"redis_calls":7,"redis_duration_s":0.000475,"cpu_s":0.03,"db_duration_s":0.00183,"view_duration_s":0.00175,"duration_s":0.02301,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"525"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002634,"correlation_id":"wMj9yas6UP7","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002555,"redis_calls":7,"redis_duration_s":0.000446,"cpu_s":0.03,"db_duration_s":0.00201,"view_duration_s":0.00177,"duration_s":0.02372,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/uploads/-/system/project/avatar/5/mars1.jpg","format":"html","controller":"UploadsController","action":"show","status":200,"params":[{"key":"width","value":"40"},{"key":"model","value":"project"},{"key":"mounted_as","value":"avatar"},{"key":"id","value":"5"},{"key":"filename","value":"mars1.jpg"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002469,"correlation_id":"PMW8qgaEh62","meta.user":"test_namespace","meta.caller_id":"UploadsController#show","redis_calls":1,"redis_duration_s":0.000141,"cpu_s":0.02,"db_duration_s":0.00251,"view_duration_s":0.0,"duration_s":0.01583,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/uploads/-/system/project/avatar/5/mars1.jpg","format":"html","controller":"UploadsController","action":"show","status":200,"params":[{"key":"width","value":"64"},{"key":"model","value":"project"},{"key":"mounted_as","value":"avatar"},{"key":"id","value":"5"},{"key":"filename","value":"mars1.jpg"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003011,"correlation_id":"kzHqMKz74c4","meta.user":"test_namespace","meta.caller_id":"UploadsController#show","redis_calls":1,"redis_duration_s":0.000104,"cpu_s":0.02,"db_duration_s":0.00227,"view_duration_s":0.0,"duration_s":0.01401,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/uploads/-/system/project/avatar/5/mars1.jpg","format":"html","controller":"UploadsController","action":"show","status":200,"params":[{"key":"width","value":"15"},{"key":"model","value":"project"},{"key":"mounted_as","value":"avatar"},{"key":"id","value":"5"},{"key":"filename","value":"mars1.jpg"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.07602,"correlation_id":"GWFwu2wDxG9","meta.user":"test_namespace","meta.caller_id":"UploadsController#show","redis_calls":1,"redis_duration_s":0.000111,"cpu_s":0.09,"db_duration_s":0.00185,"view_duration_s":0.0,"duration_s":0.0123,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/uploads/-/system/project/avatar/4/saturnv.jpg","format":"html","controller":"UploadsController","action":"show","status":200,"params":[{"key":"width","value":"48"},{"key":"model","value":"project"},{"key":"mounted_as","value":"avatar"},{"key":"id","value":"4"},{"key":"filename","value":"saturnv.jpg"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003848,"correlation_id":"Bg0xUjfCd29","meta.user":"test_namespace","meta.caller_id":"UploadsController#show","redis_calls":1,"redis_duration_s":0.000121,"cpu_s":0.02,"db_duration_s":0.0029,"view_duration_s":0.0,"duration_s":0.01859,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/uploads/-/system/project/avatar/5/mars1.jpg","format":"html","controller":"UploadsController","action":"show","status":200,"params":[{"key":"width","value":"48"},{"key":"model","value":"project"},{"key":"mounted_as","value":"avatar"},{"key":"id","value":"5"},{"key":"filename","value":"mars1.jpg"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003854,"correlation_id":"GekxvxxOTV8","meta.user":"test_namespace","meta.caller_id":"UploadsController#show","redis_calls":1,"redis_duration_s":0.00012,"cpu_s":0.02,"db_duration_s":0.00328,"view_duration_s":0.0,"duration_s":0.01888,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/uploads/-/system/project/avatar/6/spacemarines.png","format":"html","controller":"UploadsController","action":"show","status":200,"params":[{"key":"width","value":"48"},{"key":"model","value":"project"},{"key":"mounted_as","value":"avatar"},{"key":"id","value":"6"},{"key":"filename","value":"spacemarines.png"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00501,"correlation_id":"mjWi2Yo57K8","meta.user":"test_namespace","meta.caller_id":"UploadsController#show","redis_calls":1,"redis_duration_s":0.000149,"cpu_s":0.02,"db_duration_s":0.00284,"view_duration_s":0.0,"duration_s":0.01817,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/uploads/-/system/project/avatar/7/porg-1.png","format":"html","controller":"UploadsController","action":"show","status":200,"params":[{"key":"width","value":"48"},{"key":"model","value":"project"},{"key":"mounted_as","value":"avatar"},{"key":"id","value":"7"},{"key":"filename","value":"porg-1.png"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.012257,"correlation_id":"9WeODQz3Pc9","meta.user":"test_namespace","meta.caller_id":"UploadsController#show","redis_calls":1,"redis_duration_s":9.5e-05,"cpu_s":0.02,"db_duration_s":0.00284,"view_duration_s":0.0,"duration_s":0.01711,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/space-marines/-/tree/master","format":"html","controller":"Projects::TreeController","action":"show","status":200,"params":[{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"project_id","value":"space-marines"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002288,"correlation_id":"8OkWA3XVL03","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/space-marines","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"Projects::TreeController#show","gitaly_calls":4,"gitaly_duration_s":0.005207,"redis_calls":20,"redis_duration_s":0.001409,"cpu_s":0.17,"db_duration_s":0.0064,"view_duration_s":0.13262,"duration_s":0.16685,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"operationName","value":"pathLastCommit"},{"key":"variables","value":"[FILTERED]"},{"key":"query","value":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"},{"key":"graphql","value":{"operationName":"pathLastCommit","variables":"[FILTERED]","query":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002753,"correlation_id":"5EKrq7DLL83","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.003029,"redis_calls":3,"redis_duration_s":0.000352,"cpu_s":0.04,"db_duration_s":0.00523,"view_duration_s":0.00031,"duration_s":0.04663,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002691,"correlation_id":"tJV1Kg73uw5","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.000779,"redis_calls":2,"redis_duration_s":0.000252,"cpu_s":0.04,"db_duration_s":0.00402,"view_duration_s":0.00036,"duration_s":0.04056,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/space-marines/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"project_id","value":"space-marines"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003517,"correlation_id":"WsTHnPUSUb4","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/space-marines","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.013695,"redis_calls":7,"redis_duration_s":0.000499,"cpu_s":0.04,"db_duration_s":0.00319,"view_duration_s":0.00029,"duration_s":0.0423,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/uploads/-/system/project/avatar/6/spacemarines.png","format":"html","controller":"UploadsController","action":"show","status":200,"params":[{"key":"width","value":"40"},{"key":"model","value":"project"},{"key":"mounted_as","value":"avatar"},{"key":"id","value":"6"},{"key":"filename","value":"spacemarines.png"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.004654,"correlation_id":"9KnPXahmih","meta.user":"test_namespace","meta.caller_id":"UploadsController#show","redis_calls":1,"redis_duration_s":0.000103,"cpu_s":0.02,"db_duration_s":0.00257,"view_duration_s":0.0,"duration_s":0.0195,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/uploads/-/system/project/avatar/6/spacemarines.png","format":"html","controller":"UploadsController","action":"show","status":200,"params":[{"key":"width","value":"15"},{"key":"model","value":"project"},{"key":"mounted_as","value":"avatar"},{"key":"id","value":"6"},{"key":"filename","value":"spacemarines.png"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003472,"correlation_id":"O84E8piNtW2","meta.user":"test_namespace","meta.caller_id":"UploadsController#show","redis_calls":1,"redis_duration_s":9.6e-05,"cpu_s":0.02,"db_duration_s":0.00309,"view_duration_s":0.0,"duration_s":0.02176,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/space-marines/-/blob/master/README.md","format":"json","controller":"Projects::BlobController","action":"show","status":200,"params":[{"key":"viewer","value":"rich"},{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"project_id","value":"space-marines"},{"key":"id","value":"master/README.md"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003288,"correlation_id":"6itrbQQPqz8","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/space-marines","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"Projects::BlobController#show","gitaly_calls":6,"gitaly_duration_s":0.02476,"redis_calls":7,"redis_duration_s":0.000948,"cpu_s":0.07,"db_duration_s":0.00442,"view_duration_s":0.00048,"duration_s":0.09005,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/space-marines/-/branches","format":"html","controller":"Projects::BranchesController","action":"index","status":200,"params":[{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"project_id","value":"space-marines"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002307,"correlation_id":"hz120xWOMR8","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/space-marines","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"Projects::BranchesController#index","gitaly_calls":7,"gitaly_duration_s":0.009128,"redis_calls":17,"redis_duration_s":0.001183,"cpu_s":0.09,"db_duration_s":0.00607,"view_duration_s":0.05951,"duration_s":0.09881,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/space-marines/-/branches/diverging_commit_counts","format":"json","controller":"Projects::BranchesController","action":"diverging_commit_counts","status":200,"params":[{"key":"names","value":["master"]},{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"project_id","value":"space-marines"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002582,"correlation_id":"MAVS9Yn1lF4","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/space-marines","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"Projects::BranchesController#diverging_commit_counts","gitaly_calls":3,"gitaly_duration_s":0.003409,"redis_calls":7,"redis_duration_s":0.000481,"cpu_s":0.03,"db_duration_s":0.00163,"view_duration_s":0.00014,"duration_s":0.02179,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/space-marines/-/tags","format":"html","controller":"Projects::TagsController","action":"index","status":200,"params":[{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"project_id","value":"space-marines"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002258,"correlation_id":"s8UgxC8KSe7","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/space-marines","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"Projects::TagsController#index","gitaly_calls":1,"gitaly_duration_s":0.000532,"redis_calls":14,"redis_duration_s":0.001878,"cpu_s":0.09,"db_duration_s":0.00492,"view_duration_s":0.05496,"duration_s":0.08303,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/space-marines/-/graphs/master","format":"html","controller":"Projects::GraphsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"project_id","value":"space-marines"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002288,"correlation_id":"ylYHoZxLpH6","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/space-marines","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"Projects::GraphsController#show","gitaly_calls":2,"gitaly_duration_s":0.00257,"redis_calls":17,"redis_duration_s":0.001234,"cpu_s":0.08,"db_duration_s":0.00424,"view_duration_s":0.04419,"duration_s":0.07216,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/space-marines/-/graphs/master","format":"json","controller":"Projects::GraphsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"project_id","value":"space-marines"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002514,"correlation_id":"LVRY0kiEBQ","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/space-marines","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"Projects::GraphsController#show","gitaly_calls":3,"gitaly_duration_s":0.005435,"redis_calls":6,"redis_duration_s":0.000448,"cpu_s":0.03,"db_duration_s":0.00222,"view_duration_s":0.0001,"duration_s":0.02458,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/space-marines/-/network/master","format":"html","controller":"Projects::NetworkController","action":"show","status":200,"params":[{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"project_id","value":"space-marines"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002373,"correlation_id":"75stFXnNHg3","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/space-marines","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"Projects::NetworkController#show","gitaly_calls":2,"gitaly_duration_s":0.002707,"redis_calls":17,"redis_duration_s":0.001148,"cpu_s":0.09,"db_duration_s":0.00468,"view_duration_s":0.052,"duration_s":0.08229,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/space-marines/-/network/master","format":"json","controller":"Projects::NetworkController","action":"show","status":200,"params":[{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"project_id","value":"space-marines"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002591,"correlation_id":"B9DByX3DTp9","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/space-marines","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"Projects::NetworkController#show","gitaly_calls":6,"gitaly_duration_s":0.010422,"redis_calls":6,"redis_duration_s":0.000392,"cpu_s":0.04,"db_duration_s":0.00424,"view_duration_s":0.00753,"duration_s":0.04364,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/uploads/-/system/user/avatar/2/avatar.png","format":"html","controller":"UploadsController","action":"show","status":200,"params":[{"key":"width","value":"20"},{"key":"model","value":"user"},{"key":"mounted_as","value":"avatar"},{"key":"id","value":"2"},{"key":"filename","value":"avatar.png"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002387,"correlation_id":"p2elFPfZ1Ha","meta.user":"test_namespace","meta.caller_id":"UploadsController#show","redis_calls":1,"redis_duration_s":0.000103,"cpu_s":0.01,"db_duration_s":0.00152,"view_duration_s":0.0,"duration_s":0.00886,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/space-marines/-/compare","format":"html","controller":"Projects::CompareController","action":"index","status":200,"params":[{"key":"from","value":"master"},{"key":"to","value":"master"},{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"project_id","value":"space-marines"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002364,"correlation_id":"Q5RXcCwff56","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/space-marines","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"Projects::CompareController#index","redis_calls":14,"redis_duration_s":0.001023,"cpu_s":0.08,"db_duration_s":0.0064,"view_duration_s":0.04793,"duration_s":0.07489,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/space-marines/-/issues","format":"html","controller":"Projects::IssuesController","action":"index","status":200,"params":[{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"project_id","value":"space-marines"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002613,"correlation_id":"RG441CAEs16","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/space-marines","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"Projects::IssuesController#index","redis_calls":15,"redis_duration_s":0.001035,"cpu_s":0.18,"db_duration_s":0.00824,"view_duration_s":0.07698,"duration_s":0.17476,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/space-marines/-/merge_requests","format":"html","controller":"Projects::MergeRequestsController","action":"index","status":200,"params":[{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"project_id","value":"space-marines"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00238,"correlation_id":"efdGJ7gMe22","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/space-marines","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"Projects::MergeRequestsController#index","redis_calls":15,"redis_duration_s":0.001132,"cpu_s":0.09,"db_duration_s":0.00688,"view_duration_s":0.05746,"duration_s":0.08674,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/space-marines/pipelines","format":"html","controller":"Projects::PipelinesController","action":"index","status":200,"params":[{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"project_id","value":"space-marines"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002309,"correlation_id":"uLPNrXBkpG1","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/space-marines","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"Projects::PipelinesController#index","redis_calls":17,"redis_duration_s":0.001178,"cpu_s":0.1,"db_duration_s":0.00831,"view_duration_s":0.06124,"duration_s":0.09295,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/space-marines/pipelines.json","format":"json","controller":"Projects::PipelinesController","action":"index","status":200,"params":[{"key":"scope","value":"all"},{"key":"page","value":"1"},{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"project_id","value":"space-marines"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002967,"correlation_id":"GPAcUWmrue7","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/space-marines","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"Projects::PipelinesController#index","redis_calls":3,"redis_duration_s":0.000267,"cpu_s":0.05,"db_duration_s":0.00398,"view_duration_s":0.0002,"duration_s":0.02827,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/space-marines/-/environments/metrics","format":"html","controller":"Projects::EnvironmentsController","action":"metrics_redirect","status":200,"params":[{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"project_id","value":"space-marines"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00232,"correlation_id":"XsjeMNIcVx8","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/space-marines","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"Projects::EnvironmentsController#metrics_redirect","redis_calls":14,"redis_duration_s":0.001663,"cpu_s":0.08,"db_duration_s":0.0049,"view_duration_s":0.04854,"duration_s":0.07277,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"6fa75564-147b-424d-986c-d82d561e5c66","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.0004,"duration_s":0.04625,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/space-marines/-/value_stream_analytics","format":"html","controller":"Projects::CycleAnalyticsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"project_id","value":"space-marines"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002272,"correlation_id":"EFj3PAJyDI1","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/space-marines","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"Projects::CycleAnalyticsController#show","redis_calls":15,"redis_duration_s":0.001005,"cpu_s":0.08,"db_duration_s":0.01794,"view_duration_s":0.04631,"duration_s":0.08531,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/space-marines/-/value_stream_analytics","format":"json","controller":"Projects::CycleAnalyticsController","action":"show","status":200,"params":[{"key":"cycle_analytics","value":{"start_date":"30"}},{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"project_id","value":"space-marines"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002462,"correlation_id":"oHM1zJYqqd5","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/space-marines","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"Projects::CycleAnalyticsController#show","gitaly_calls":1,"gitaly_duration_s":0.002754,"redis_calls":2,"redis_duration_s":0.000202,"cpu_s":0.04,"db_duration_s":0.01567,"view_duration_s":0.00043,"duration_s":0.04166,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/space-marines/-/value_stream_analytics/events/issue.json","format":"json","controller":"Projects::CycleAnalytics::EventsController","action":"issue","status":200,"params":[{"key":"cycle_analytics","value":{"start_date":"30"}},{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"project_id","value":"space-marines"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.007527,"correlation_id":"AWdeca0yRr4","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/space-marines","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"Projects::CycleAnalytics::EventsController#issue","redis_calls":1,"redis_duration_s":9.2e-05,"cpu_s":0.03,"db_duration_s":0.00224,"view_duration_s":0.00012,"duration_s":0.01419,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/space-marines/-/wikis/home","format":"html","controller":"Projects::WikisController","action":"show","status":200,"params":[{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"project_id","value":"space-marines"},{"key":"id","value":"home"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002318,"correlation_id":"6fqx8KaqCO","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/space-marines","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"Projects::WikisController#show","gitaly_calls":5,"gitaly_duration_s":0.003124,"redis_calls":15,"redis_duration_s":0.000991,"cpu_s":0.08,"db_duration_s":0.00443,"view_duration_s":0.0429,"duration_s":0.074,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/space-marines/snippets","format":"html","controller":"Projects::SnippetsController","action":"index","status":200,"params":[{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"project_id","value":"space-marines"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002298,"correlation_id":"WzJNBSsOYu4","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/space-marines","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"Projects::SnippetsController#index","redis_calls":14,"redis_duration_s":0.000983,"cpu_s":0.09,"db_duration_s":0.00532,"view_duration_s":0.05321,"duration_s":0.07932,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/space-marines/refs","format":"json","controller":"ProjectsController","action":"refs","status":200,"params":[{"key":"sort","value":"updated_desc"},{"key":"ref","value":"master"},{"key":"search","value":""},{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"id","value":"space-marines"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.004323,"correlation_id":"17ZjfdyZuS3","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/space-marines","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"ProjectsController#refs","gitaly_calls":1,"gitaly_duration_s":0.00048,"redis_calls":3,"redis_duration_s":0.000262,"cpu_s":0.03,"db_duration_s":0.00146,"view_duration_s":0.00013,"duration_s":0.01893,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/space-marines/pipelines.json","format":"json","controller":null,"action":null,"status":304,"params":[{"key":"scope","value":"all"},{"key":"page","value":"1"}],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"redis_calls":1,"redis_duration_s":0.000105,"etag_route":"project_pipelines","correlation_id":null,"cpu_s":0.0,"db_duration_s":0.0,"view_duration_s":0.0,"duration_s":9.0e-05,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"a69a4dd2-7689-436a-aa53-9a65a9ef7378","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.00038,"duration_s":0.04425,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/testprojectid","format":"html","controller":"ProjectsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"id","value":"testprojectid"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.008057,"correlation_id":"cXY8gPuqGB6","meta.user":"test_namespace","meta.caller_id":"ProjectsController#show","gitaly_calls":5,"gitaly_duration_s":0.004093,"redis_calls":54,"redis_duration_s":0.003881,"cpu_s":0.15,"db_duration_s":0.0136,"view_duration_s":0.10587,"duration_s":0.15162,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"operationName","value":"pathLastCommit"},{"key":"variables","value":"[FILTERED]"},{"key":"query","value":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"},{"key":"graphql","value":{"operationName":"pathLastCommit","variables":"[FILTERED]","query":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002649,"correlation_id":"t06mvJ2YpX9","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.003399,"redis_calls":6,"redis_duration_s":0.000572,"cpu_s":0.04,"db_duration_s":0.00578,"view_duration_s":0.0003,"duration_s":0.0519,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project","format":"html","controller":"ProjectsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002284,"correlation_id":"ELri0b3Ntx6","meta.user":"test_namespace","meta.caller_id":"ProjectsController#show","gitaly_calls":3,"gitaly_duration_s":0.003231,"redis_calls":35,"redis_duration_s":0.002323,"cpu_s":0.16,"db_duration_s":0.0118,"view_duration_s":0.1169,"duration_s":0.17122,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"operationName","value":"pathLastCommit"},{"key":"variables","value":"[FILTERED]"},{"key":"query","value":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"},{"key":"graphql","value":{"operationName":"pathLastCommit","variables":"[FILTERED]","query":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003319,"correlation_id":"jea8dCRY3W1","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.004503,"redis_calls":6,"redis_duration_s":0.00059,"cpu_s":0.06,"db_duration_s":0.006,"view_duration_s":0.0003,"duration_s":0.06571,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002747,"correlation_id":"ZInFBKDfjS2","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000485,"redis_calls":2,"redis_duration_s":0.000194,"cpu_s":0.12,"db_duration_s":0.00317,"view_duration_s":0.00053,"duration_s":0.1205,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/testprojectid/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"testprojectid"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002625,"correlation_id":"T3ustunymh9","meta.user":"test_namespace","meta.project":"test_namespace/testprojectid","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003251,"redis_calls":7,"redis_duration_s":0.000494,"cpu_s":0.03,"db_duration_s":0.0024,"view_duration_s":0.00043,"duration_s":0.02463,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/testprojectid/-/blob/master/README.md","format":"json","controller":"Projects::BlobController","action":"show","status":200,"params":[{"key":"viewer","value":"rich"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"testprojectid"},{"key":"id","value":"master/README.md"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002676,"correlation_id":"4ojJ8S5VOa9","meta.user":"test_namespace","meta.project":"test_namespace/testprojectid","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::BlobController#show","gitaly_calls":6,"gitaly_duration_s":0.015047,"redis_calls":7,"redis_duration_s":0.0005,"cpu_s":0.04,"db_duration_s":0.00249,"view_duration_s":0.00026,"duration_s":0.05656,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/panther","format":"html","controller":"ProjectsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"id","value":"panther"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002235,"correlation_id":"69B4rVAtSr5","meta.user":"test_namespace","meta.caller_id":"ProjectsController#show","gitaly_calls":5,"gitaly_duration_s":0.004392,"redis_calls":55,"redis_duration_s":0.004244,"cpu_s":0.23,"db_duration_s":0.01131,"view_duration_s":0.18565,"duration_s":0.22775,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"operationName","value":"pathLastCommit"},{"key":"variables","value":"[FILTERED]"},{"key":"query","value":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"},{"key":"graphql","value":{"operationName":"pathLastCommit","variables":"[FILTERED]","query":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002676,"correlation_id":"MdGhQWnhVE1","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.003025,"redis_calls":3,"redis_duration_s":0.000304,"cpu_s":0.04,"db_duration_s":0.00457,"view_duration_s":0.00034,"duration_s":0.04311,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003278,"correlation_id":"p6bmgtY6P52","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000476,"redis_calls":2,"redis_duration_s":0.000202,"cpu_s":0.06,"db_duration_s":0.00603,"view_duration_s":0.00229,"duration_s":0.06569,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002661,"correlation_id":"muOwoCZMPd8","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000632,"redis_calls":2,"redis_duration_s":0.000199,"cpu_s":0.13,"db_duration_s":0.00429,"view_duration_s":0.00799,"duration_s":0.14176,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/space-marines","format":"html","controller":"ProjectsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"id","value":"space-marines"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002163,"correlation_id":"BTcLBgLlCO1","meta.user":"test_namespace","meta.caller_id":"ProjectsController#show","gitaly_calls":5,"gitaly_duration_s":0.006075,"redis_calls":34,"redis_duration_s":0.003342,"cpu_s":0.17,"db_duration_s":0.01536,"view_duration_s":0.11728,"duration_s":0.17445,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/panther/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"panther"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002439,"correlation_id":"4dSIxzkYfMa","meta.user":"test_namespace","meta.project":"test_namespace/panther","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":1,"gitaly_duration_s":0.002993,"redis_calls":8,"redis_duration_s":0.000615,"cpu_s":0.03,"db_duration_s":0.00235,"view_duration_s":0.00199,"duration_s":0.02315,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/panther/-/blob/master/README.md","format":"json","controller":"Projects::BlobController","action":"show","status":200,"params":[{"key":"viewer","value":"rich"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"panther"},{"key":"id","value":"master/README.md"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00236,"correlation_id":"G3malsEHHV","meta.user":"test_namespace","meta.project":"test_namespace/panther","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::BlobController#show","gitaly_calls":6,"gitaly_duration_s":0.007412,"redis_calls":8,"redis_duration_s":0.000771,"cpu_s":0.18,"db_duration_s":0.00246,"view_duration_s":0.00221,"duration_s":0.18273,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002544,"correlation_id":"eVIltlPeKC2","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.004645,"redis_calls":7,"redis_duration_s":0.000512,"cpu_s":0.03,"db_duration_s":0.00254,"view_duration_s":0.00174,"duration_s":0.03284,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/panther/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"25"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"panther"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002488,"correlation_id":"24H3CgCHxj7","meta.user":"test_namespace","meta.project":"test_namespace/panther","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":1,"gitaly_duration_s":0.002446,"redis_calls":8,"redis_duration_s":0.000736,"cpu_s":0.03,"db_duration_s":0.00222,"view_duration_s":0.00061,"duration_s":0.02254,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"25"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002418,"correlation_id":"4RTH9YU3598","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002643,"redis_calls":7,"redis_duration_s":0.000431,"cpu_s":0.03,"db_duration_s":0.00185,"view_duration_s":0.00167,"duration_s":0.02288,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"50"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002567,"correlation_id":"Rbzmidx4PN5","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002758,"redis_calls":7,"redis_duration_s":0.000454,"cpu_s":0.03,"db_duration_s":0.00187,"view_duration_s":0.00175,"duration_s":0.02358,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"75"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002522,"correlation_id":"qFp2CFikwC5","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002692,"redis_calls":7,"redis_duration_s":0.00051,"cpu_s":0.03,"db_duration_s":0.00223,"view_duration_s":0.00169,"duration_s":0.02466,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002606,"correlation_id":"HigW9VEcaX3","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000473,"redis_calls":2,"redis_duration_s":0.000184,"cpu_s":0.16,"db_duration_s":0.00313,"view_duration_s":0.00456,"duration_s":0.16264,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"100"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002674,"correlation_id":"HhPp0bGP6a5","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002993,"redis_calls":7,"redis_duration_s":0.000447,"cpu_s":0.03,"db_duration_s":0.00185,"view_duration_s":0.00176,"duration_s":0.024,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"operationName","value":"pathLastCommit"},{"key":"variables","value":"[FILTERED]"},{"key":"query","value":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"},{"key":"graphql","value":{"operationName":"pathLastCommit","variables":"[FILTERED]","query":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00262,"correlation_id":"qAfHiu8Lh13","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.002939,"redis_calls":3,"redis_duration_s":0.000299,"cpu_s":0.04,"db_duration_s":0.00497,"view_duration_s":0.00033,"duration_s":0.0445,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"125"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002624,"correlation_id":"vXFQsW763C7","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002722,"redis_calls":7,"redis_duration_s":0.00045,"cpu_s":0.03,"db_duration_s":0.00199,"view_duration_s":0.00173,"duration_s":0.02352,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/super-porg-soldiers","format":"html","controller":"ProjectsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"id","value":"super-porg-soldiers"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.001938,"correlation_id":"qx31o8z2wIa","meta.user":"test_namespace","meta.caller_id":"ProjectsController#show","gitaly_calls":5,"gitaly_duration_s":0.003459,"redis_calls":50,"redis_duration_s":0.003816,"cpu_s":0.14,"db_duration_s":0.01129,"view_duration_s":0.09988,"duration_s":0.13797,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002372,"correlation_id":"kSoVDQbR6k4","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000544,"redis_calls":2,"redis_duration_s":0.000172,"cpu_s":0.04,"db_duration_s":0.00442,"view_duration_s":0.00035,"duration_s":0.04937,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"150"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003369,"correlation_id":"agHPCdwhOD5","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.00264,"redis_calls":7,"redis_duration_s":0.000448,"cpu_s":0.03,"db_duration_s":0.00198,"view_duration_s":0.00209,"duration_s":0.02517,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"175"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002514,"correlation_id":"fs4usGHE0M7","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003615,"redis_calls":7,"redis_duration_s":0.000536,"cpu_s":0.03,"db_duration_s":0.00396,"view_duration_s":0.00169,"duration_s":0.03293,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002588,"correlation_id":"0cvaDmGi7L1","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000467,"redis_calls":2,"redis_duration_s":0.000211,"cpu_s":0.09,"db_duration_s":0.00321,"view_duration_s":0.00421,"duration_s":0.09663,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/space-marines/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"project_id","value":"space-marines"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002547,"correlation_id":"aT0tBXcRZr","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/space-marines","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.007123,"redis_calls":7,"redis_duration_s":0.000636,"cpu_s":0.03,"db_duration_s":0.00478,"view_duration_s":0.00032,"duration_s":0.03332,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"200"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002491,"correlation_id":"cDCiYur2UUa","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.004831,"redis_calls":7,"redis_duration_s":0.000813,"cpu_s":0.03,"db_duration_s":0.00302,"view_duration_s":0.00197,"duration_s":0.03147,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/space-marines/-/blob/master/README.md","format":"json","controller":"Projects::BlobController","action":"show","status":200,"params":[{"key":"viewer","value":"rich"},{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"project_id","value":"space-marines"},{"key":"id","value":"master/README.md"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002466,"correlation_id":"lQyEXUnACQ5","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/space-marines","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"Projects::BlobController#show","gitaly_calls":6,"gitaly_duration_s":0.009444,"redis_calls":9,"redis_duration_s":0.000803,"cpu_s":0.05,"db_duration_s":0.00281,"view_duration_s":0.0003,"duration_s":0.05887,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"225"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003319,"correlation_id":"6sc5JiPt1o4","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002819,"redis_calls":7,"redis_duration_s":0.00104,"cpu_s":0.04,"db_duration_s":0.00267,"view_duration_s":0.00176,"duration_s":0.02749,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/gitlab","format":"html","controller":"ProjectsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"id","value":"gitlab"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002439,"correlation_id":"r094CBrINM3","meta.user":"test_namespace","meta.caller_id":"ProjectsController#show","gitaly_calls":5,"gitaly_duration_s":0.004056,"redis_calls":36,"redis_duration_s":0.002356,"cpu_s":0.15,"db_duration_s":0.01175,"view_duration_s":0.10809,"duration_s":0.15664,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"250"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.0026,"correlation_id":"sWbobR5vv1a","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002768,"redis_calls":7,"redis_duration_s":0.000481,"cpu_s":0.03,"db_duration_s":0.00188,"view_duration_s":0.00174,"duration_s":0.02416,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"operationName","value":"pathLastCommit"},{"key":"variables","value":"[FILTERED]"},{"key":"query","value":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"},{"key":"graphql","value":{"operationName":"pathLastCommit","variables":"[FILTERED]","query":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003218,"correlation_id":"cePEuf2VXm2","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.003738,"redis_calls":3,"redis_duration_s":0.000328,"cpu_s":0.06,"db_duration_s":0.00742,"view_duration_s":0.00048,"duration_s":0.06785,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"275"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.005155,"correlation_id":"tq6DH7klsN7","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.00418,"redis_calls":7,"redis_duration_s":0.000559,"cpu_s":0.04,"db_duration_s":0.00482,"view_duration_s":0.00253,"duration_s":0.03681,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project","format":"html","controller":"ProjectsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"id","value":"another-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002233,"correlation_id":"HObWvIZRM26","meta.user":"test_namespace","meta.caller_id":"ProjectsController#show","gitaly_calls":3,"gitaly_duration_s":0.00895,"redis_calls":35,"redis_duration_s":0.002505,"cpu_s":0.25,"db_duration_s":0.0175,"view_duration_s":0.18913,"duration_s":0.25836,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003251,"correlation_id":"cMee2BR0Oo6","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000479,"redis_calls":2,"redis_duration_s":0.000194,"cpu_s":0.04,"db_duration_s":0.00517,"view_duration_s":0.0005,"duration_s":0.04943,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"300"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003254,"correlation_id":"O5J9K9julA1","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.00322,"redis_calls":7,"redis_duration_s":0.000522,"cpu_s":0.04,"db_duration_s":0.00265,"view_duration_s":0.00175,"duration_s":0.02864,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002615,"correlation_id":"iYoz0Dqrb8a","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000457,"redis_calls":2,"redis_duration_s":0.000177,"cpu_s":0.1,"db_duration_s":0.00298,"view_duration_s":0.00511,"duration_s":0.10215,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"325"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002691,"correlation_id":"9a8hKhmeqp","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003053,"redis_calls":7,"redis_duration_s":0.000525,"cpu_s":0.03,"db_duration_s":0.00195,"view_duration_s":0.00179,"duration_s":0.02507,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/mars-colony","format":"html","controller":"ProjectsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"id","value":"mars-colony"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002087,"correlation_id":"ADPKRCTHHd8","meta.user":"test_namespace","meta.caller_id":"ProjectsController#show","gitaly_calls":5,"gitaly_duration_s":0.003661,"redis_calls":34,"redis_duration_s":0.002638,"cpu_s":0.13,"db_duration_s":0.01109,"view_duration_s":0.09344,"duration_s":0.12969,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/super-porg-soldiers/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"project_id","value":"super-porg-soldiers"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002371,"correlation_id":"XRcINXEZvg3","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/super-porg-soldiers","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002668,"redis_calls":7,"redis_duration_s":0.000903,"cpu_s":0.03,"db_duration_s":0.00253,"view_duration_s":0.0003,"duration_s":0.02542,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/super-porg-soldiers/-/blob/master/README.md","format":"json","controller":"Projects::BlobController","action":"show","status":200,"params":[{"key":"viewer","value":"rich"},{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"project_id","value":"super-porg-soldiers"},{"key":"id","value":"master/README.md"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002196,"correlation_id":"gBdbVncbNW9","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/super-porg-soldiers","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"Projects::BlobController#show","gitaly_calls":6,"gitaly_duration_s":0.00705,"redis_calls":9,"redis_duration_s":0.000807,"cpu_s":0.04,"db_duration_s":0.00312,"view_duration_s":0.00025,"duration_s":0.04741,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"350"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00272,"correlation_id":"zv0Gy3Owd46","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002852,"redis_calls":7,"redis_duration_s":0.000575,"cpu_s":0.03,"db_duration_s":0.00195,"view_duration_s":0.00169,"duration_s":0.02449,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"operationName","value":"pathLastCommit"},{"key":"variables","value":"[FILTERED]"},{"key":"query","value":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"},{"key":"graphql","value":{"operationName":"pathLastCommit","variables":"[FILTERED]","query":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002552,"correlation_id":"qNJBW51lUf9","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.007421,"redis_calls":3,"redis_duration_s":0.000333,"cpu_s":0.04,"db_duration_s":0.00629,"view_duration_s":0.00044,"duration_s":0.0575,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/my-awesome-project","format":"html","controller":"ProjectsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"id","value":"my-awesome-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002281,"correlation_id":"E0Rw7VaLcaa","meta.user":"test_namespace","meta.caller_id":"ProjectsController#show","gitaly_calls":5,"gitaly_duration_s":0.004017,"redis_calls":35,"redis_duration_s":0.002442,"cpu_s":0.15,"db_duration_s":0.01403,"view_duration_s":0.10754,"duration_s":0.15014,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002778,"correlation_id":"fm9EK6TvCw3","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000595,"redis_calls":2,"redis_duration_s":0.001149,"cpu_s":0.09,"db_duration_s":0.00344,"view_duration_s":0.00481,"duration_s":0.10377,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"operationName","value":"pathLastCommit"},{"key":"variables","value":"[FILTERED]"},{"key":"query","value":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"},{"key":"graphql","value":{"operationName":"pathLastCommit","variables":"[FILTERED]","query":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002609,"correlation_id":"6KLwcFm1xM","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.003041,"redis_calls":3,"redis_duration_s":0.000279,"cpu_s":0.05,"db_duration_s":0.00502,"view_duration_s":0.00032,"duration_s":0.0525,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"375"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002232,"correlation_id":"GkVT7sddru8","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002611,"redis_calls":7,"redis_duration_s":0.000409,"cpu_s":0.03,"db_duration_s":0.00184,"view_duration_s":0.00175,"duration_s":0.02361,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002835,"correlation_id":"gM3qIQMoVu8","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000472,"redis_calls":2,"redis_duration_s":0.000211,"cpu_s":0.08,"db_duration_s":0.00359,"view_duration_s":0.0041,"duration_s":0.08739,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002693,"correlation_id":"QVFwZn6AOb2","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.00043,"redis_calls":2,"redis_duration_s":0.000215,"cpu_s":0.09,"db_duration_s":0.00348,"view_duration_s":0.0049,"duration_s":0.0923,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"400"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002614,"correlation_id":"5w8VOUbOJC","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002875,"redis_calls":7,"redis_duration_s":0.000465,"cpu_s":0.03,"db_duration_s":0.00202,"view_duration_s":0.00172,"duration_s":0.02409,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"operationName","value":"pathLastCommit"},{"key":"variables","value":"[FILTERED]"},{"key":"query","value":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"},{"key":"graphql","value":{"operationName":"pathLastCommit","variables":"[FILTERED]","query":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003483,"correlation_id":"tHbzzVr8Axa","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.008053,"redis_calls":3,"redis_duration_s":0.001836,"cpu_s":0.06,"db_duration_s":0.00903,"view_duration_s":0.00028,"duration_s":0.07562,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/","format":"html","controller":"RootController","action":"index","status":200,"params":[{"key":"personal","value":"true"},{"key":"sort","value":"latest_activity_desc"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002583,"correlation_id":"AsnZeA4Kg85","meta.user":"test_namespace","meta.caller_id":"RootController#index","gitaly_calls":6,"gitaly_duration_s":0.027919,"redis_calls":42,"redis_duration_s":0.004497,"cpu_s":0.09,"db_duration_s":0.01167,"view_duration_s":0.08687,"duration_s":0.12343,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"425"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003424,"correlation_id":"O0YNK7lVXta","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.005383,"redis_calls":7,"redis_duration_s":0.000532,"cpu_s":0.04,"db_duration_s":0.00228,"view_duration_s":0.00174,"duration_s":0.03235,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003525,"correlation_id":"vwDSZmnVIy","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000651,"redis_calls":2,"redis_duration_s":0.000222,"cpu_s":0.05,"db_duration_s":0.00388,"view_duration_s":0.00035,"duration_s":0.05236,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002652,"correlation_id":"AO8F5wsO8ra","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000462,"redis_calls":2,"redis_duration_s":0.000208,"cpu_s":0.11,"db_duration_s":0.00324,"view_duration_s":0.0044,"duration_s":0.11378,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"450"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003622,"correlation_id":"MyI8wlzG3z6","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003065,"redis_calls":7,"redis_duration_s":0.000447,"cpu_s":0.03,"db_duration_s":0.00225,"view_duration_s":0.00174,"duration_s":0.02555,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/gitlab/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"gitlab"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002644,"correlation_id":"gz5HaDeT4Fa","meta.user":"test_namespace","meta.project":"test_namespace/gitlab","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":1,"gitaly_duration_s":0.005569,"redis_calls":8,"redis_duration_s":0.024894,"cpu_s":0.06,"db_duration_s":0.00232,"view_duration_s":0.00325,"duration_s":0.05726,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002522,"correlation_id":"XWcc6at2RR7","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002822,"redis_calls":7,"redis_duration_s":0.000494,"cpu_s":0.03,"db_duration_s":0.00238,"view_duration_s":0.00167,"duration_s":0.02437,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/gitlab/-/blob/master/README.md","format":"json","controller":"Projects::BlobController","action":"show","status":200,"params":[{"key":"viewer","value":"rich"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"gitlab"},{"key":"id","value":"master/README.md"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002642,"correlation_id":"tnMkDS6rvk","meta.user":"test_namespace","meta.project":"test_namespace/gitlab","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::BlobController#show","gitaly_calls":6,"gitaly_duration_s":0.031828,"redis_calls":8,"redis_duration_s":0.025139,"cpu_s":0.21,"db_duration_s":0.00238,"view_duration_s":0.00088,"duration_s":0.24126,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"475"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002354,"correlation_id":"Qex1MrZKxya","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002737,"redis_calls":7,"redis_duration_s":0.00046,"cpu_s":0.03,"db_duration_s":0.00186,"view_duration_s":0.00168,"duration_s":0.02292,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"operationName","value":"pathLastCommit"},{"key":"variables","value":"[FILTERED]"},{"key":"query","value":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"},{"key":"graphql","value":{"operationName":"pathLastCommit","variables":"[FILTERED]","query":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002615,"correlation_id":"wuqcEm0Uv9a","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.003016,"redis_calls":3,"redis_duration_s":0.000309,"cpu_s":0.04,"db_duration_s":0.00518,"view_duration_s":0.00032,"duration_s":0.04537,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"25"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003216,"correlation_id":"ktZAbB043s","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003412,"redis_calls":7,"redis_duration_s":0.000619,"cpu_s":0.04,"db_duration_s":0.00226,"view_duration_s":0.00174,"duration_s":0.03071,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002671,"correlation_id":"KTliBDJbcF2","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000604,"redis_calls":2,"redis_duration_s":0.000284,"cpu_s":0.1,"db_duration_s":0.00325,"view_duration_s":0.00434,"duration_s":0.10024,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"500"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002647,"correlation_id":"tEcw2jbuCA1","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002864,"redis_calls":7,"redis_duration_s":0.000544,"cpu_s":0.03,"db_duration_s":0.00221,"view_duration_s":0.00181,"duration_s":0.02561,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00269,"correlation_id":"98oNDJRY7R","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000455,"redis_calls":2,"redis_duration_s":0.000197,"cpu_s":0.04,"db_duration_s":0.00304,"view_duration_s":0.00043,"duration_s":0.03588,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/gitlab/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"25"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"gitlab"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00255,"correlation_id":"igCFi5clzP2","meta.user":"test_namespace","meta.project":"test_namespace/gitlab","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":1,"gitaly_duration_s":0.002928,"redis_calls":8,"redis_duration_s":0.026346,"cpu_s":0.06,"db_duration_s":0.00214,"view_duration_s":0.00199,"duration_s":0.05295,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/mars-colony/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"project_id","value":"mars-colony"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002813,"correlation_id":"lpKZRbzkMH1","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/mars-colony","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003011,"redis_calls":7,"redis_duration_s":0.000602,"cpu_s":0.04,"db_duration_s":0.00221,"view_duration_s":0.00027,"duration_s":0.02601,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/super-secret-confidential-space-plans/mars-colony/-/blob/master/README.md","format":"json","controller":"Projects::BlobController","action":"show","status":200,"params":[{"key":"viewer","value":"rich"},{"key":"namespace_id","value":"super-secret-confidential-space-plans"},{"key":"project_id","value":"mars-colony"},{"key":"id","value":"master/README.md"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002585,"correlation_id":"okXGRA4a341","meta.user":"test_namespace","meta.project":"super-secret-confidential-space-plans/mars-colony","meta.root_namespace":"super-secret-confidential-space-plans","meta.caller_id":"Projects::BlobController#show","gitaly_calls":6,"gitaly_duration_s":0.007074,"redis_calls":9,"redis_duration_s":0.000686,"cpu_s":0.05,"db_duration_s":0.00231,"view_duration_s":0.00024,"duration_s":0.04734,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"50"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002489,"correlation_id":"9wAiRUV0rJ4","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002779,"redis_calls":7,"redis_duration_s":0.000511,"cpu_s":0.03,"db_duration_s":0.00224,"view_duration_s":0.00176,"duration_s":0.02497,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"75"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00256,"correlation_id":"B6quLAJQ7Wa","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002661,"redis_calls":7,"redis_duration_s":0.000447,"cpu_s":0.03,"db_duration_s":0.00215,"view_duration_s":0.00174,"duration_s":0.0239,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"525"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002641,"correlation_id":"6tong6iajF2","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002863,"redis_calls":7,"redis_duration_s":0.000512,"cpu_s":0.03,"db_duration_s":0.00263,"view_duration_s":0.00169,"duration_s":0.02468,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002692,"correlation_id":"HH7ypJjg672","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000464,"redis_calls":2,"redis_duration_s":0.000176,"cpu_s":0.16,"db_duration_s":0.00295,"view_duration_s":0.00488,"duration_s":0.16879,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/gitlab/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"50"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"gitlab"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002641,"correlation_id":"5wx10f0pWM8","meta.user":"test_namespace","meta.project":"test_namespace/gitlab","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":1,"gitaly_duration_s":0.00316,"redis_calls":8,"redis_duration_s":0.022892,"cpu_s":0.05,"db_duration_s":0.00174,"view_duration_s":0.00203,"duration_s":0.04856,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"100"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002588,"correlation_id":"jt4BtUUHg17","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002684,"redis_calls":7,"redis_duration_s":0.000438,"cpu_s":0.03,"db_duration_s":0.00186,"view_duration_s":0.00169,"duration_s":0.02339,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"c98f2635-f077-4aff-a656-8fb375e1b645","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.00044,"duration_s":0.0443,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"125"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002494,"correlation_id":"vXasAixfCx9","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002684,"redis_calls":7,"redis_duration_s":0.000451,"cpu_s":0.03,"db_duration_s":0.00187,"view_duration_s":0.00174,"duration_s":0.02333,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/my-awesome-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"my-awesome-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002532,"correlation_id":"bvXNJvJzgV7","meta.user":"test_namespace","meta.project":"test_namespace/my-awesome-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003134,"redis_calls":7,"redis_duration_s":0.000591,"cpu_s":0.03,"db_duration_s":0.00237,"view_duration_s":0.00056,"duration_s":0.03046,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00263,"correlation_id":"aXe4TAQKR57","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.00046,"redis_calls":2,"redis_duration_s":0.000243,"cpu_s":0.1,"db_duration_s":0.00304,"view_duration_s":0.00479,"duration_s":0.1022,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"550"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002539,"correlation_id":"SBYH2NHA5T5","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003291,"redis_calls":7,"redis_duration_s":0.000532,"cpu_s":0.04,"db_duration_s":0.00232,"view_duration_s":0.00281,"duration_s":0.03158,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/my-awesome-project/-/blob/master/README.md","format":"json","controller":"Projects::BlobController","action":"show","status":200,"params":[{"key":"viewer","value":"rich"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"my-awesome-project"},{"key":"id","value":"master/README.md"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003476,"correlation_id":"kNuzdYx00e6","meta.user":"test_namespace","meta.project":"test_namespace/my-awesome-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::BlobController#show","gitaly_calls":6,"gitaly_duration_s":0.011132,"redis_calls":7,"redis_duration_s":0.000546,"cpu_s":0.14,"db_duration_s":0.0042,"view_duration_s":0.00046,"duration_s":0.13743,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"operationName","value":"pathLastCommit"},{"key":"variables","value":"[FILTERED]"},{"key":"query","value":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"},{"key":"graphql","value":{"operationName":"pathLastCommit","variables":"[FILTERED]","query":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002794,"correlation_id":"T7BfXaKYV44","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.006172,"redis_calls":3,"redis_duration_s":0.000337,"cpu_s":0.05,"db_duration_s":0.00636,"view_duration_s":0.00031,"duration_s":0.06257,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/gitlab/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"75"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"gitlab"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002456,"correlation_id":"qRX6tUxXOf5","meta.user":"test_namespace","meta.project":"test_namespace/gitlab","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":1,"gitaly_duration_s":0.002962,"redis_calls":8,"redis_duration_s":0.10973,"cpu_s":0.14,"db_duration_s":0.00215,"view_duration_s":0.00142,"duration_s":0.13616,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"150"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002775,"correlation_id":"At3Wx4ZbCZ","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002679,"redis_calls":7,"redis_duration_s":0.000513,"cpu_s":0.03,"db_duration_s":0.00188,"view_duration_s":0.00177,"duration_s":0.02412,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002906,"correlation_id":"yLfqWb6WHM6","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000458,"redis_calls":2,"redis_duration_s":0.000189,"cpu_s":0.09,"db_duration_s":0.00341,"view_duration_s":0.00483,"duration_s":0.09302,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"175"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002672,"correlation_id":"zpVTWIE8dy","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002757,"redis_calls":7,"redis_duration_s":0.000491,"cpu_s":0.03,"db_duration_s":0.0021,"view_duration_s":0.00178,"duration_s":0.02492,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"575"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002571,"correlation_id":"cr6shi6N052","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002823,"redis_calls":7,"redis_duration_s":0.000474,"cpu_s":0.03,"db_duration_s":0.00195,"view_duration_s":0.00171,"duration_s":0.02442,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"200"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002584,"correlation_id":"A7m1GN6tpp1","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002626,"redis_calls":7,"redis_duration_s":0.000467,"cpu_s":0.03,"db_duration_s":0.00219,"view_duration_s":0.00169,"duration_s":0.024,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"225"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00323,"correlation_id":"XzKUSSCSjn7","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003299,"redis_calls":7,"redis_duration_s":0.000578,"cpu_s":0.04,"db_duration_s":0.00222,"view_duration_s":0.00178,"duration_s":0.03001,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002635,"correlation_id":"8kPyaIBZ4N2","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000644,"redis_calls":2,"redis_duration_s":0.000225,"cpu_s":0.09,"db_duration_s":0.00333,"view_duration_s":0.00381,"duration_s":0.0991,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"600"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002641,"correlation_id":"Y8rCJh1duD1","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002739,"redis_calls":7,"redis_duration_s":0.000444,"cpu_s":0.03,"db_duration_s":0.00185,"view_duration_s":0.00174,"duration_s":0.02337,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/testprojectid/-/refs/master/logs_tree/secrets","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"testprojectid"},{"key":"id","value":"master"},{"key":"path","value":"secrets"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002536,"correlation_id":"vzNbSZDtH1","meta.user":"test_namespace","meta.project":"test_namespace/testprojectid","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002723,"redis_calls":7,"redis_duration_s":0.000439,"cpu_s":0.03,"db_duration_s":0.00186,"view_duration_s":0.00192,"duration_s":0.0238,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"250"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002804,"correlation_id":"OsOHJnX2ws1","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002722,"redis_calls":7,"redis_duration_s":0.000421,"cpu_s":0.03,"db_duration_s":0.00226,"view_duration_s":0.00171,"duration_s":0.02342,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002597,"correlation_id":"5TUMOzdHtk2","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000448,"redis_calls":2,"redis_duration_s":0.000178,"cpu_s":0.1,"db_duration_s":0.00297,"view_duration_s":0.00492,"duration_s":0.09927,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/testprojectid/-/refs/master/logs_tree/secrets","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"25"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"testprojectid"},{"key":"id","value":"master"},{"key":"path","value":"secrets"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003675,"correlation_id":"Cj5PcKk9fM3","meta.user":"test_namespace","meta.project":"test_namespace/testprojectid","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.007525,"redis_calls":7,"redis_duration_s":0.000518,"cpu_s":0.04,"db_duration_s":0.0025,"view_duration_s":0.00259,"duration_s":0.03785,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"275"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002734,"correlation_id":"x7DMAz19Ec8","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.0026,"redis_calls":7,"redis_duration_s":0.000411,"cpu_s":0.03,"db_duration_s":0.00184,"view_duration_s":0.00173,"duration_s":0.02311,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002683,"correlation_id":"htXaicSprI7","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000472,"redis_calls":2,"redis_duration_s":0.000195,"cpu_s":0.09,"db_duration_s":0.00297,"view_duration_s":0.00572,"duration_s":0.08943,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"625"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002517,"correlation_id":"30X71s42363","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002749,"redis_calls":7,"redis_duration_s":0.000484,"cpu_s":0.03,"db_duration_s":0.00251,"view_duration_s":0.00167,"duration_s":0.02378,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/testprojectid/-/refs/master/logs_tree/secrets","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"50"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"testprojectid"},{"key":"id","value":"master"},{"key":"path","value":"secrets"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002582,"correlation_id":"U4SqsxZ9hF6","meta.user":"test_namespace","meta.project":"test_namespace/testprojectid","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002696,"redis_calls":7,"redis_duration_s":0.000465,"cpu_s":0.03,"db_duration_s":0.00183,"view_duration_s":0.0017,"duration_s":0.02312,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/testprojectid/-/refs/master/logs_tree/secrets","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"75"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"testprojectid"},{"key":"id","value":"master"},{"key":"path","value":"secrets"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003095,"correlation_id":"ruob64ZDNk9","meta.user":"test_namespace","meta.project":"test_namespace/testprojectid","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002958,"redis_calls":7,"redis_duration_s":0.000488,"cpu_s":0.03,"db_duration_s":0.00223,"view_duration_s":0.00171,"duration_s":0.0245,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"300"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002613,"correlation_id":"eJBVd2ea7X7","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002626,"redis_calls":7,"redis_duration_s":0.000453,"cpu_s":0.03,"db_duration_s":0.00224,"view_duration_s":0.00175,"duration_s":0.02477,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"650"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002583,"correlation_id":"FKphUvla0Ha","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002834,"redis_calls":7,"redis_duration_s":0.000437,"cpu_s":0.03,"db_duration_s":0.00214,"view_duration_s":0.00176,"duration_s":0.02439,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/testprojectid/-/refs/master/logs_tree/secrets","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"100"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"testprojectid"},{"key":"id","value":"master"},{"key":"path","value":"secrets"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002543,"correlation_id":"uOE0tzmtM79","meta.user":"test_namespace","meta.project":"test_namespace/testprojectid","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002635,"redis_calls":7,"redis_duration_s":0.000422,"cpu_s":0.03,"db_duration_s":0.00209,"view_duration_s":0.00169,"duration_s":0.02349,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/testprojectid/-/refs/master/logs_tree/secrets","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"125"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"testprojectid"},{"key":"id","value":"master"},{"key":"path","value":"secrets"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002581,"correlation_id":"tnNbWPAwvQ3","meta.user":"test_namespace","meta.project":"test_namespace/testprojectid","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.00263,"redis_calls":7,"redis_duration_s":0.000418,"cpu_s":0.03,"db_duration_s":0.00185,"view_duration_s":0.00174,"duration_s":0.02302,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"325"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002587,"correlation_id":"WyHrhlBXPha","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002608,"redis_calls":7,"redis_duration_s":0.00042,"cpu_s":0.03,"db_duration_s":0.00222,"view_duration_s":0.0017,"duration_s":0.02381,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002655,"correlation_id":"SIAdFXmEJA8","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.00045,"redis_calls":2,"redis_duration_s":0.000191,"cpu_s":0.09,"db_duration_s":0.00329,"view_duration_s":0.00441,"duration_s":0.08883,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"675"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003261,"correlation_id":"cXHVDH6kcH7","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002824,"redis_calls":7,"redis_duration_s":0.000499,"cpu_s":0.03,"db_duration_s":0.00218,"view_duration_s":0.00173,"duration_s":0.02688,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/testprojectid/-/refs/master/logs_tree/secrets","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"150"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"testprojectid"},{"key":"id","value":"master"},{"key":"path","value":"secrets"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002575,"correlation_id":"EGYeDe7gyR8","meta.user":"test_namespace","meta.project":"test_namespace/testprojectid","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002609,"redis_calls":7,"redis_duration_s":0.000441,"cpu_s":0.03,"db_duration_s":0.00186,"view_duration_s":0.00182,"duration_s":0.02343,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002685,"correlation_id":"KlsaAVbuoN8","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000462,"redis_calls":2,"redis_duration_s":0.000179,"cpu_s":0.09,"db_duration_s":0.00329,"view_duration_s":0.00479,"duration_s":0.08806,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/testprojectid/-/refs/master/logs_tree/secrets","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"175"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"testprojectid"},{"key":"id","value":"master"},{"key":"path","value":"secrets"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.0026,"correlation_id":"HTfK1zn4u17","meta.user":"test_namespace","meta.project":"test_namespace/testprojectid","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002647,"redis_calls":7,"redis_duration_s":0.00082,"cpu_s":0.03,"db_duration_s":0.00234,"view_duration_s":0.00172,"duration_s":0.0243,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"350"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002666,"correlation_id":"Fev2Fk8TyR1","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002552,"redis_calls":7,"redis_duration_s":0.000497,"cpu_s":0.03,"db_duration_s":0.00221,"view_duration_s":0.00173,"duration_s":0.02411,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"700"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002596,"correlation_id":"saksTHbKrE7","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.008081,"redis_calls":7,"redis_duration_s":0.000446,"cpu_s":0.03,"db_duration_s":0.00215,"view_duration_s":0.00174,"duration_s":0.0295,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/testprojectid/-/refs/master/logs_tree/secrets","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"200"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"testprojectid"},{"key":"id","value":"master"},{"key":"path","value":"secrets"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002579,"correlation_id":"g6u5EThH7Ha","meta.user":"test_namespace","meta.project":"test_namespace/testprojectid","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002676,"redis_calls":7,"redis_duration_s":0.00046,"cpu_s":0.03,"db_duration_s":0.00221,"view_duration_s":0.00171,"duration_s":0.02412,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/testprojectid/-/refs/master/logs_tree/secrets","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"225"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"testprojectid"},{"key":"id","value":"master"},{"key":"path","value":"secrets"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002575,"correlation_id":"2kAsS5GSgZ","meta.user":"test_namespace","meta.project":"test_namespace/testprojectid","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.004903,"redis_calls":7,"redis_duration_s":0.000505,"cpu_s":0.03,"db_duration_s":0.00215,"view_duration_s":0.00173,"duration_s":0.02629,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"375"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002571,"correlation_id":"GboHno66vU7","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002658,"redis_calls":7,"redis_duration_s":0.000442,"cpu_s":0.03,"db_duration_s":0.00195,"view_duration_s":0.00174,"duration_s":0.02375,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"725"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002667,"correlation_id":"kAQ5dUpPPo5","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003081,"redis_calls":7,"redis_duration_s":0.000439,"cpu_s":0.03,"db_duration_s":0.00204,"view_duration_s":0.00172,"duration_s":0.02455,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/testprojectid/-/refs/master/logs_tree/secrets","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"250"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"testprojectid"},{"key":"id","value":"master"},{"key":"path","value":"secrets"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002502,"correlation_id":"EsIutyDWNT1","meta.user":"test_namespace","meta.project":"test_namespace/testprojectid","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002968,"redis_calls":7,"redis_duration_s":0.000481,"cpu_s":0.03,"db_duration_s":0.00222,"view_duration_s":0.00175,"duration_s":0.02542,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.004047,"correlation_id":"llP4TbHcnE1","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.0006,"redis_calls":2,"redis_duration_s":0.000197,"cpu_s":0.09,"db_duration_s":0.00379,"view_duration_s":0.00463,"duration_s":0.08939,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"400"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002647,"correlation_id":"cMRGI2e7wc1","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002629,"redis_calls":7,"redis_duration_s":0.000462,"cpu_s":0.03,"db_duration_s":0.00194,"view_duration_s":0.00169,"duration_s":0.02461,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"b72dc14c-8ad3-470a-8589-d7e098a1b3ac","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.0006,"duration_s":0.04572,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"750"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002876,"correlation_id":"7BcyYT4GFJ6","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002666,"redis_calls":7,"redis_duration_s":0.000459,"cpu_s":0.03,"db_duration_s":0.00225,"view_duration_s":0.00188,"duration_s":0.02462,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"425"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003836,"correlation_id":"6xDSQkjhbt3","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002588,"redis_calls":7,"redis_duration_s":0.000462,"cpu_s":0.03,"db_duration_s":0.0019,"view_duration_s":0.00168,"duration_s":0.0232,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"450"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002592,"correlation_id":"DRyRtDE3wg6","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002585,"redis_calls":7,"redis_duration_s":0.000425,"cpu_s":0.03,"db_duration_s":0.00199,"view_duration_s":0.00208,"duration_s":0.02373,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"775"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002609,"correlation_id":"hk1OwDnumh9","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002666,"redis_calls":7,"redis_duration_s":0.000443,"cpu_s":0.03,"db_duration_s":0.00223,"view_duration_s":0.00128,"duration_s":0.02356,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002634,"correlation_id":"2cl5bzCPdE4","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000463,"redis_calls":2,"redis_duration_s":0.000183,"cpu_s":0.09,"db_duration_s":0.0032,"view_duration_s":0.00522,"duration_s":0.08773,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"475"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.006559,"correlation_id":"9SwluDmsli1","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002786,"redis_calls":7,"redis_duration_s":0.000522,"cpu_s":0.03,"db_duration_s":0.00217,"view_duration_s":0.00173,"duration_s":0.02454,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"500"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002576,"correlation_id":"re6JHiCfPg3","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.004211,"redis_calls":7,"redis_duration_s":0.000477,"cpu_s":0.03,"db_duration_s":0.00183,"view_duration_s":0.00175,"duration_s":0.0249,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/panther/-/raw/master/docs/img/panther-logo-github-highres.png","format":"html","controller":"Projects::RawController","action":"show","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"panther"},{"key":"id","value":"master/docs/img/panther-logo-github-highres.png"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002276,"correlation_id":"U8Mr1rMFfF5","meta.user":"test_namespace","meta.project":"test_namespace/panther","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RawController#show","gitaly_calls":4,"gitaly_duration_s":0.003759,"redis_calls":15,"redis_duration_s":0.000941,"cpu_s":0.04,"db_duration_s":0.00273,"view_duration_s":0.00086,"duration_s":0.03637,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"525"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002608,"correlation_id":"lpXY8YMUsu6","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.00253,"redis_calls":7,"redis_duration_s":0.000447,"cpu_s":0.03,"db_duration_s":0.00187,"view_duration_s":0.00167,"duration_s":0.02306,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"550"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002533,"correlation_id":"aYVMxAkTZ93","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002602,"redis_calls":7,"redis_duration_s":0.000439,"cpu_s":0.03,"db_duration_s":0.00187,"view_duration_s":0.00165,"duration_s":0.02319,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002783,"correlation_id":"F729AY8APh9","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000469,"redis_calls":2,"redis_duration_s":0.000188,"cpu_s":0.04,"db_duration_s":0.00286,"view_duration_s":0.00059,"duration_s":0.0437,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"575"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002287,"correlation_id":"AOZubEGsHJ6","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002888,"redis_calls":7,"redis_duration_s":0.000428,"cpu_s":0.03,"db_duration_s":0.00182,"view_duration_s":0.00176,"duration_s":0.02352,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"600"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002622,"correlation_id":"jjC3CofS8p6","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002624,"redis_calls":7,"redis_duration_s":0.000467,"cpu_s":0.03,"db_duration_s":0.00218,"view_duration_s":0.00169,"duration_s":0.02413,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"625"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002606,"correlation_id":"Yl35LQN0cF1","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002566,"redis_calls":7,"redis_duration_s":0.001048,"cpu_s":0.03,"db_duration_s":0.00192,"view_duration_s":0.00179,"duration_s":0.02429,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"650"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002727,"correlation_id":"CB9qKitoJ8a","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002663,"redis_calls":7,"redis_duration_s":0.000486,"cpu_s":0.03,"db_duration_s":0.00188,"view_duration_s":0.00173,"duration_s":0.02372,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"675"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002642,"correlation_id":"MBHwLCQCof6","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002943,"redis_calls":7,"redis_duration_s":0.000559,"cpu_s":0.03,"db_duration_s":0.00244,"view_duration_s":0.00173,"duration_s":0.02649,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"700"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002571,"correlation_id":"xR8sZWgNwVa","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002861,"redis_calls":7,"redis_duration_s":0.000495,"cpu_s":0.03,"db_duration_s":0.00211,"view_duration_s":0.00065,"duration_s":0.02294,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"be4bb9d9-87e7-44b5-98da-88eca0aaa66f","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.00037,"duration_s":0.04389,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/panther","format":"html","controller":"ProjectsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"id","value":"panther"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002911,"correlation_id":"hn7C71V26n1","meta.user":"test_namespace","meta.caller_id":"ProjectsController#show","gitaly_calls":5,"gitaly_duration_s":0.003525,"redis_calls":36,"redis_duration_s":0.003243,"cpu_s":0.21,"db_duration_s":0.01191,"view_duration_s":0.17703,"duration_s":0.21558,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"operationName","value":"pathLastCommit"},{"key":"variables","value":"[FILTERED]"},{"key":"query","value":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"},{"key":"graphql","value":{"operationName":"pathLastCommit","variables":"[FILTERED]","query":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002856,"correlation_id":"WtE7MyDL2s9","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.003261,"redis_calls":3,"redis_duration_s":0.000314,"cpu_s":0.04,"db_duration_s":0.00485,"view_duration_s":0.00036,"duration_s":0.04597,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/gitlab","format":"html","controller":"ProjectsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"id","value":"gitlab"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002164,"correlation_id":"P0JX2XpdTA7","meta.user":"test_namespace","meta.caller_id":"ProjectsController#show","gitaly_calls":5,"gitaly_duration_s":0.003608,"redis_calls":36,"redis_duration_s":0.002575,"cpu_s":0.14,"db_duration_s":0.0103,"view_duration_s":0.1058,"duration_s":0.1464,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"operationName","value":"pathLastCommit"},{"key":"variables","value":"[FILTERED]"},{"key":"query","value":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"},{"key":"graphql","value":{"operationName":"pathLastCommit","variables":"[FILTERED]","query":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.007098,"correlation_id":"lBHfH3cHuF5","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.003217,"redis_calls":3,"redis_duration_s":0.000298,"cpu_s":0.04,"db_duration_s":0.00474,"view_duration_s":0.00031,"duration_s":0.0481,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002923,"correlation_id":"9BK5YYafzM","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000478,"redis_calls":2,"redis_duration_s":0.000242,"cpu_s":0.05,"db_duration_s":0.00427,"view_duration_s":0.00172,"duration_s":0.05546,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.073567,"correlation_id":"nwnai8AkL73","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000465,"redis_calls":2,"redis_duration_s":0.000176,"cpu_s":0.15,"db_duration_s":0.00304,"view_duration_s":0.00429,"duration_s":0.08618,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/panther/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"panther"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002472,"correlation_id":"qB24xaGeBn5","meta.user":"test_namespace","meta.project":"test_namespace/panther","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":1,"gitaly_duration_s":0.003291,"redis_calls":8,"redis_duration_s":0.000841,"cpu_s":0.04,"db_duration_s":0.00229,"view_duration_s":0.00345,"duration_s":0.0289,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project","format":"html","controller":"ProjectsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"id","value":"another-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002736,"correlation_id":"sosLWrDECZ9","meta.user":"test_namespace","meta.caller_id":"ProjectsController#show","gitaly_calls":3,"gitaly_duration_s":0.003458,"redis_calls":46,"redis_duration_s":0.003251,"cpu_s":0.17,"db_duration_s":0.01476,"view_duration_s":0.11751,"duration_s":0.17269,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/panther/-/blob/master/README.md","format":"json","controller":"Projects::BlobController","action":"show","status":200,"params":[{"key":"viewer","value":"rich"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"panther"},{"key":"id","value":"master/README.md"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002561,"correlation_id":"Zzu52sT5wg5","meta.user":"test_namespace","meta.project":"test_namespace/panther","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::BlobController#show","gitaly_calls":6,"gitaly_duration_s":0.009418,"redis_calls":8,"redis_duration_s":0.000797,"cpu_s":0.19,"db_duration_s":0.00261,"view_duration_s":0.00223,"duration_s":0.19942,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/panther/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"25"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"panther"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003534,"correlation_id":"O07CUbFsFV3","meta.user":"test_namespace","meta.project":"test_namespace/panther","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":1,"gitaly_duration_s":0.003612,"redis_calls":8,"redis_duration_s":0.000802,"cpu_s":0.04,"db_duration_s":0.00247,"view_duration_s":0.001,"duration_s":0.02685,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/gitlab/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"gitlab"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002969,"correlation_id":"l5nRPRoCMCa","meta.user":"test_namespace","meta.project":"test_namespace/gitlab","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":1,"gitaly_duration_s":0.006846,"redis_calls":8,"redis_duration_s":0.092865,"cpu_s":0.14,"db_duration_s":0.00206,"view_duration_s":0.00358,"duration_s":0.13125,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/gitlab/-/blob/master/README.md","format":"json","controller":"Projects::BlobController","action":"show","status":200,"params":[{"key":"viewer","value":"rich"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"gitlab"},{"key":"id","value":"master/README.md"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002466,"correlation_id":"cdhtwX8wlU9","meta.user":"test_namespace","meta.project":"test_namespace/gitlab","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::BlobController#show","gitaly_calls":6,"gitaly_duration_s":0.033428,"redis_calls":8,"redis_duration_s":0.037866,"cpu_s":0.25,"db_duration_s":0.00258,"view_duration_s":0.00094,"duration_s":0.28041,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/gitlab/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"25"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"gitlab"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003702,"correlation_id":"X7yCrqM9mK1","meta.user":"test_namespace","meta.project":"test_namespace/gitlab","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":1,"gitaly_duration_s":0.00269,"redis_calls":8,"redis_duration_s":0.026034,"cpu_s":0.07,"db_duration_s":0.00232,"view_duration_s":0.00204,"duration_s":0.05498,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/gitlab/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"50"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"gitlab"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002787,"correlation_id":"bbRteMgvBS6","meta.user":"test_namespace","meta.project":"test_namespace/gitlab","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":1,"gitaly_duration_s":0.002799,"redis_calls":8,"redis_duration_s":0.026291,"cpu_s":0.06,"db_duration_s":0.00218,"view_duration_s":0.00197,"duration_s":0.05353,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/gitlab/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"75"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"gitlab"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002641,"correlation_id":"mrQVqsqTJM","meta.user":"test_namespace","meta.project":"test_namespace/gitlab","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":1,"gitaly_duration_s":0.002885,"redis_calls":8,"redis_duration_s":0.091218,"cpu_s":0.12,"db_duration_s":0.00219,"view_duration_s":0.00162,"duration_s":0.11817,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"operationName","value":"pathLastCommit"},{"key":"variables","value":"[FILTERED]"},{"key":"query","value":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"},{"key":"graphql","value":{"operationName":"pathLastCommit","variables":"[FILTERED]","query":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002638,"correlation_id":"gUmsDAMd8m3","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.00369,"redis_calls":3,"redis_duration_s":0.000316,"cpu_s":0.06,"db_duration_s":0.00672,"view_duration_s":0.00032,"duration_s":0.06317,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/dashboard/projects/starred","format":"html","controller":"Dashboard::ProjectsController","action":"starred","status":200,"params":[],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002088,"correlation_id":"NaZVbxI2KD5","meta.user":"test_namespace","meta.caller_id":"Dashboard::ProjectsController#starred","gitaly_calls":5,"gitaly_duration_s":0.012458,"redis_calls":37,"redis_duration_s":0.003156,"cpu_s":0.1,"db_duration_s":0.01033,"view_duration_s":0.0788,"duration_s":0.11273,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002726,"correlation_id":"0EO9L5EKmU7","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000493,"redis_calls":2,"redis_duration_s":0.000326,"cpu_s":0.09,"db_duration_s":0.00346,"view_duration_s":0.00434,"duration_s":0.0892,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002695,"correlation_id":"fdOBwNancba","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002619,"redis_calls":7,"redis_duration_s":0.000502,"cpu_s":0.03,"db_duration_s":0.00186,"view_duration_s":0.00207,"duration_s":0.02414,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"25"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002567,"correlation_id":"CTXm9vpmpAa","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.008296,"redis_calls":7,"redis_duration_s":0.001017,"cpu_s":0.03,"db_duration_s":0.0024,"view_duration_s":0.00172,"duration_s":0.03451,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"50"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003468,"correlation_id":"WPMKuBQx3v1","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003043,"redis_calls":7,"redis_duration_s":0.000499,"cpu_s":0.04,"db_duration_s":0.00237,"view_duration_s":0.00317,"duration_s":0.0279,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"75"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002657,"correlation_id":"Fc7sKiBto61","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002771,"redis_calls":7,"redis_duration_s":0.000599,"cpu_s":0.03,"db_duration_s":0.00219,"view_duration_s":0.00173,"duration_s":0.02676,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"100"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003415,"correlation_id":"99PIWf9COz5","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003045,"redis_calls":7,"redis_duration_s":0.00053,"cpu_s":0.04,"db_duration_s":0.00249,"view_duration_s":0.00175,"duration_s":0.02764,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002642,"correlation_id":"Q8Ou30WJZQ2","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000473,"redis_calls":2,"redis_duration_s":0.000223,"cpu_s":0.11,"db_duration_s":0.00331,"view_duration_s":0.00452,"duration_s":0.11171,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"125"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002568,"correlation_id":"E3MLlZJK6i7","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002582,"redis_calls":7,"redis_duration_s":0.00112,"cpu_s":0.03,"db_duration_s":0.00205,"view_duration_s":0.00175,"duration_s":0.02527,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"150"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002639,"correlation_id":"cYuDZxor8Ya","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002644,"redis_calls":7,"redis_duration_s":0.00045,"cpu_s":0.03,"db_duration_s":0.00204,"view_duration_s":0.00177,"duration_s":0.02357,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"175"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00254,"correlation_id":"wQE6eUYfzu8","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003038,"redis_calls":7,"redis_duration_s":0.000552,"cpu_s":0.04,"db_duration_s":0.00227,"view_duration_s":0.00345,"duration_s":0.03178,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002634,"correlation_id":"f3tZ1xolxC2","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000452,"redis_calls":2,"redis_duration_s":0.000199,"cpu_s":0.09,"db_duration_s":0.00313,"view_duration_s":0.00475,"duration_s":0.0957,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"200"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002601,"correlation_id":"OvzEHBHDlva","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002609,"redis_calls":7,"redis_duration_s":0.000872,"cpu_s":0.03,"db_duration_s":0.00188,"view_duration_s":0.00198,"duration_s":0.02418,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"225"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002557,"correlation_id":"qjwcw6HTlX","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002576,"redis_calls":7,"redis_duration_s":0.000449,"cpu_s":0.03,"db_duration_s":0.00225,"view_duration_s":0.00168,"duration_s":0.02379,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"250"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002645,"correlation_id":"GRJM6Sh63P5","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002667,"redis_calls":7,"redis_duration_s":0.000477,"cpu_s":0.03,"db_duration_s":0.00205,"view_duration_s":0.0017,"duration_s":0.02395,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"275"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00266,"correlation_id":"xIk9J1ltyo5","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003229,"redis_calls":7,"redis_duration_s":0.000584,"cpu_s":0.04,"db_duration_s":0.00217,"view_duration_s":0.00174,"duration_s":0.02998,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003537,"correlation_id":"2nSxc24QRY5","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000447,"redis_calls":2,"redis_duration_s":0.00021,"cpu_s":0.09,"db_duration_s":0.00291,"view_duration_s":0.00441,"duration_s":0.09539,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"300"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00263,"correlation_id":"Ky6eYekn1P8","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002637,"redis_calls":7,"redis_duration_s":0.000477,"cpu_s":0.03,"db_duration_s":0.00189,"view_duration_s":0.00174,"duration_s":0.02338,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"325"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002583,"correlation_id":"fct5VoP3ug3","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002653,"redis_calls":7,"redis_duration_s":0.000434,"cpu_s":0.03,"db_duration_s":0.00205,"view_duration_s":0.0018,"duration_s":0.02372,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"350"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002548,"correlation_id":"Rv4opZ8heE2","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002876,"redis_calls":7,"redis_duration_s":0.0004,"cpu_s":0.03,"db_duration_s":0.00216,"view_duration_s":0.00176,"duration_s":0.02383,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"375"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002458,"correlation_id":"Ih6lbAuN825","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.00292,"redis_calls":7,"redis_duration_s":0.000476,"cpu_s":0.03,"db_duration_s":0.00229,"view_duration_s":0.00167,"duration_s":0.02509,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002644,"correlation_id":"87evAsecgr2","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000454,"redis_calls":2,"redis_duration_s":0.000197,"cpu_s":0.09,"db_duration_s":0.00292,"view_duration_s":0.00429,"duration_s":0.08964,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"400"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002551,"correlation_id":"AJdxPw6yPHa","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.004445,"redis_calls":7,"redis_duration_s":0.000505,"cpu_s":0.03,"db_duration_s":0.00247,"view_duration_s":0.0017,"duration_s":0.02952,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"a50cc0ad-563b-4125-be75-b7124330458e","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.00041,"duration_s":0.04604,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project","format":"html","controller":"ProjectsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.006349,"correlation_id":"3UuHIuelTI1","meta.user":"test_namespace","meta.caller_id":"ProjectsController#show","gitaly_calls":3,"gitaly_duration_s":0.003523,"redis_calls":55,"redis_duration_s":0.003566,"cpu_s":0.17,"db_duration_s":0.01248,"view_duration_s":0.12724,"duration_s":0.18182,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"operationName","value":"pathLastCommit"},{"key":"variables","value":"[FILTERED]"},{"key":"query","value":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"},{"key":"graphql","value":{"operationName":"pathLastCommit","variables":"[FILTERED]","query":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002522,"correlation_id":"Yns2JMUM0M1","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.003705,"redis_calls":6,"redis_duration_s":0.000472,"cpu_s":0.05,"db_duration_s":0.00548,"view_duration_s":0.0003,"duration_s":0.06069,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.006853,"correlation_id":"mIhW26340v1","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000801,"redis_calls":5,"redis_duration_s":0.000386,"cpu_s":0.09,"db_duration_s":0.00321,"view_duration_s":0.0044,"duration_s":0.09465,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/panther","format":"html","controller":"ProjectsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"id","value":"panther"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002553,"correlation_id":"wCyyobaslq8","meta.user":"test_namespace","meta.caller_id":"ProjectsController#show","gitaly_calls":5,"gitaly_duration_s":0.003609,"redis_calls":36,"redis_duration_s":0.005849,"cpu_s":0.14,"db_duration_s":0.01098,"view_duration_s":0.10927,"duration_s":0.14611,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002537,"correlation_id":"I9TCeRJbFL1","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002751,"redis_calls":7,"redis_duration_s":0.000461,"cpu_s":0.03,"db_duration_s":0.0019,"view_duration_s":0.0017,"duration_s":0.02369,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"25"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003467,"correlation_id":"raH0TweTRi5","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002686,"redis_calls":7,"redis_duration_s":0.000478,"cpu_s":0.03,"db_duration_s":0.0019,"view_duration_s":0.00174,"duration_s":0.02386,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"50"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003313,"correlation_id":"OtgQsHSuPr3","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.004534,"redis_calls":7,"redis_duration_s":0.000579,"cpu_s":0.04,"db_duration_s":0.00314,"view_duration_s":0.00375,"duration_s":0.03949,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"operationName","value":"pathLastCommit"},{"key":"variables","value":"[FILTERED]"},{"key":"query","value":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"},{"key":"graphql","value":{"operationName":"pathLastCommit","variables":"[FILTERED]","query":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003281,"correlation_id":"T4tx11YC2t1","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.010449,"redis_calls":3,"redis_duration_s":0.00038,"cpu_s":0.05,"db_duration_s":0.00871,"view_duration_s":0.00062,"duration_s":0.07768,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/gitlab","format":"html","controller":"ProjectsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"id","value":"gitlab"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002303,"correlation_id":"W6KMWj9Wtv1","meta.user":"test_namespace","meta.caller_id":"ProjectsController#show","gitaly_calls":5,"gitaly_duration_s":0.004733,"redis_calls":39,"redis_duration_s":0.002878,"cpu_s":0.16,"db_duration_s":0.01551,"view_duration_s":0.1243,"duration_s":0.17886,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"75"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002508,"correlation_id":"kdv6WTgZkL5","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003445,"redis_calls":7,"redis_duration_s":0.000507,"cpu_s":0.03,"db_duration_s":0.00232,"view_duration_s":0.0018,"duration_s":0.02558,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002881,"correlation_id":"16IlNJHm0n1","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000571,"redis_calls":2,"redis_duration_s":0.000212,"cpu_s":0.06,"db_duration_s":0.0043,"view_duration_s":0.00277,"duration_s":0.07471,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003131,"correlation_id":"jvSfXTjHez9","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000469,"redis_calls":2,"redis_duration_s":0.000455,"cpu_s":0.13,"db_duration_s":0.0047,"view_duration_s":0.00808,"duration_s":0.14931,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"100"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003492,"correlation_id":"Xr3rARitLka","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.007567,"redis_calls":7,"redis_duration_s":0.000518,"cpu_s":0.09,"db_duration_s":0.00231,"view_duration_s":0.00223,"duration_s":0.09243,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project","format":"html","controller":"ProjectsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"id","value":"another-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002213,"correlation_id":"h4WmdSnI1s3","meta.user":"test_namespace","meta.caller_id":"ProjectsController#show","gitaly_calls":3,"gitaly_duration_s":0.004195,"redis_calls":35,"redis_duration_s":0.00248,"cpu_s":0.27,"db_duration_s":0.01317,"view_duration_s":0.11441,"duration_s":0.27144,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/panther/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"panther"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002387,"correlation_id":"UlQghdpMx54","meta.user":"test_namespace","meta.project":"test_namespace/panther","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":1,"gitaly_duration_s":0.002958,"redis_calls":8,"redis_duration_s":0.000658,"cpu_s":0.03,"db_duration_s":0.00205,"view_duration_s":0.0031,"duration_s":0.02302,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"125"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003569,"correlation_id":"tJmhqU86gR1","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003111,"redis_calls":7,"redis_duration_s":0.000556,"cpu_s":0.04,"db_duration_s":0.00217,"view_duration_s":0.00312,"duration_s":0.03195,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/panther/-/blob/master/README.md","format":"json","controller":"Projects::BlobController","action":"show","status":200,"params":[{"key":"viewer","value":"rich"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"panther"},{"key":"id","value":"master/README.md"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002493,"correlation_id":"mea3UwkHUB5","meta.user":"test_namespace","meta.project":"test_namespace/panther","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::BlobController#show","gitaly_calls":6,"gitaly_duration_s":0.007006,"redis_calls":8,"redis_duration_s":0.000643,"cpu_s":0.2,"db_duration_s":0.00257,"view_duration_s":0.00223,"duration_s":0.20267,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"operationName","value":"pathLastCommit"},{"key":"variables","value":"[FILTERED]"},{"key":"query","value":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"},{"key":"graphql","value":{"operationName":"pathLastCommit","variables":"[FILTERED]","query":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002531,"correlation_id":"ejCSmXxsCC7","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.003362,"redis_calls":3,"redis_duration_s":0.000346,"cpu_s":0.04,"db_duration_s":0.00473,"view_duration_s":0.0004,"duration_s":0.04703,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"150"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003786,"correlation_id":"71wNAxxIjW1","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002704,"redis_calls":7,"redis_duration_s":0.000422,"cpu_s":0.03,"db_duration_s":0.00185,"view_duration_s":0.0017,"duration_s":0.0233,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/panther/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"25"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"panther"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002959,"correlation_id":"CrrALoq0hI9","meta.user":"test_namespace","meta.project":"test_namespace/panther","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":1,"gitaly_duration_s":0.004394,"redis_calls":8,"redis_duration_s":0.000672,"cpu_s":0.03,"db_duration_s":0.0022,"view_duration_s":0.00111,"duration_s":0.02376,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003312,"correlation_id":"ZUXw0VPyXea","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000602,"redis_calls":2,"redis_duration_s":0.000195,"cpu_s":0.09,"db_duration_s":0.00574,"view_duration_s":0.00425,"duration_s":0.10159,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002723,"correlation_id":"tRtfdV0Ih24","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000501,"redis_calls":2,"redis_duration_s":0.000216,"cpu_s":0.1,"db_duration_s":0.00415,"view_duration_s":0.00461,"duration_s":0.10845,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"175"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002583,"correlation_id":"a36o3iE3Ze1","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002675,"redis_calls":7,"redis_duration_s":0.000464,"cpu_s":0.03,"db_duration_s":0.00198,"view_duration_s":0.00178,"duration_s":0.02369,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"200"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002729,"correlation_id":"gXzeAjP0ne4","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002724,"redis_calls":7,"redis_duration_s":0.000457,"cpu_s":0.03,"db_duration_s":0.00183,"view_duration_s":0.00169,"duration_s":0.02298,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/gitlab/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"gitlab"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00278,"correlation_id":"D0bWdXXAuK","meta.user":"test_namespace","meta.project":"test_namespace/gitlab","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":1,"gitaly_duration_s":0.002935,"redis_calls":8,"redis_duration_s":0.08157,"cpu_s":0.11,"db_duration_s":0.00217,"view_duration_s":0.00206,"duration_s":0.10852,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/gitlab/-/blob/master/README.md","format":"json","controller":"Projects::BlobController","action":"show","status":200,"params":[{"key":"viewer","value":"rich"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"gitlab"},{"key":"id","value":"master/README.md"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002482,"correlation_id":"rRyw0FuNSm6","meta.user":"test_namespace","meta.project":"test_namespace/gitlab","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::BlobController#show","gitaly_calls":6,"gitaly_duration_s":0.029962,"redis_calls":10,"redis_duration_s":0.09717,"cpu_s":0.22,"db_duration_s":0.0023,"view_duration_s":0.0009,"duration_s":0.24981,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"225"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002345,"correlation_id":"8kRAQ5LZu52","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003009,"redis_calls":7,"redis_duration_s":0.000446,"cpu_s":0.03,"db_duration_s":0.00205,"view_duration_s":0.00171,"duration_s":0.02396,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/issues","format":"html","controller":"Projects::IssuesController","action":"index","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00241,"correlation_id":"CgKwK9ImgI2","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::IssuesController#index","redis_calls":26,"redis_duration_s":0.001696,"cpu_s":0.09,"db_duration_s":0.00651,"view_duration_s":0.04853,"duration_s":0.08076,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"250"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002631,"correlation_id":"UVGYDJqx9E8","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002746,"redis_calls":7,"redis_duration_s":0.000507,"cpu_s":0.03,"db_duration_s":0.0026,"view_duration_s":0.00169,"duration_s":0.02413,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002439,"correlation_id":"oJoeiow7Ac9","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000436,"redis_calls":2,"redis_duration_s":0.00016,"cpu_s":0.09,"db_duration_s":0.00303,"view_duration_s":0.00438,"duration_s":0.0953,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/gitlab/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"25"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"gitlab"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002784,"correlation_id":"kfVkVoKm111","meta.user":"test_namespace","meta.project":"test_namespace/gitlab","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":1,"gitaly_duration_s":0.002829,"redis_calls":8,"redis_duration_s":0.084214,"cpu_s":0.12,"db_duration_s":0.00185,"view_duration_s":0.00201,"duration_s":0.10995,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/gitlab/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"50"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"gitlab"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002698,"correlation_id":"DA6diuqHBo2","meta.user":"test_namespace","meta.project":"test_namespace/gitlab","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":1,"gitaly_duration_s":0.002729,"redis_calls":8,"redis_duration_s":0.021275,"cpu_s":0.05,"db_duration_s":0.00184,"view_duration_s":0.00181,"duration_s":0.04659,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/gitlab/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"75"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"gitlab"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002541,"correlation_id":"INZ7JEqJCo5","meta.user":"test_namespace","meta.project":"test_namespace/gitlab","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":1,"gitaly_duration_s":0.003266,"redis_calls":8,"redis_duration_s":0.081327,"cpu_s":0.11,"db_duration_s":0.00202,"view_duration_s":0.00158,"duration_s":0.10841,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"operationName","value":"pathLastCommit"},{"key":"variables","value":"[FILTERED]"},{"key":"query","value":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"},{"key":"graphql","value":{"operationName":"pathLastCommit","variables":"[FILTERED]","query":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00335,"correlation_id":"dgRhyZCLhx4","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.004265,"redis_calls":3,"redis_duration_s":0.00041,"cpu_s":0.07,"db_duration_s":0.00673,"view_duration_s":0.00033,"duration_s":0.07949,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00368,"correlation_id":"ark5ajEojt9","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000491,"redis_calls":2,"redis_duration_s":0.000227,"cpu_s":0.1,"db_duration_s":0.00344,"view_duration_s":0.0045,"duration_s":0.10499,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00267,"correlation_id":"v7cSdoXO6l3","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002777,"redis_calls":7,"redis_duration_s":0.000885,"cpu_s":0.03,"db_duration_s":0.00185,"view_duration_s":0.00179,"duration_s":0.02448,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"25"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002543,"correlation_id":"VB75fejy3Z9","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002667,"redis_calls":7,"redis_duration_s":0.000443,"cpu_s":0.03,"db_duration_s":0.00205,"view_duration_s":0.00172,"duration_s":0.02419,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"50"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002538,"correlation_id":"lyKQejMjRW6","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002613,"redis_calls":7,"redis_duration_s":0.000465,"cpu_s":0.03,"db_duration_s":0.00221,"view_duration_s":0.00172,"duration_s":0.02373,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"75"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002623,"correlation_id":"ZqKNEK3Bpt5","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002634,"redis_calls":7,"redis_duration_s":0.000445,"cpu_s":0.03,"db_duration_s":0.00187,"view_duration_s":0.00172,"duration_s":0.02373,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"100"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002479,"correlation_id":"sPMxU8A4a","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003165,"redis_calls":7,"redis_duration_s":0.000514,"cpu_s":0.04,"db_duration_s":0.0023,"view_duration_s":0.00341,"duration_s":0.03255,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00259,"correlation_id":"SwfMMIFMNt6","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000555,"redis_calls":2,"redis_duration_s":0.000319,"cpu_s":0.1,"db_duration_s":0.00377,"view_duration_s":0.00468,"duration_s":0.09913,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"125"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002565,"correlation_id":"WbSka0zTEXa","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.009207,"redis_calls":7,"redis_duration_s":0.000482,"cpu_s":0.03,"db_duration_s":0.00199,"view_duration_s":0.0019,"duration_s":0.03088,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"150"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002606,"correlation_id":"j3nKXTYTin1","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002629,"redis_calls":7,"redis_duration_s":0.00048,"cpu_s":0.03,"db_duration_s":0.00184,"view_duration_s":0.00188,"duration_s":0.02378,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"175"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002792,"correlation_id":"LtYfH7t3SD5","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002734,"redis_calls":7,"redis_duration_s":0.000489,"cpu_s":0.03,"db_duration_s":0.00191,"view_duration_s":0.00233,"duration_s":0.02495,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"200"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002576,"correlation_id":"lJXFnaDIrq3","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002906,"redis_calls":7,"redis_duration_s":0.000494,"cpu_s":0.03,"db_duration_s":0.0027,"view_duration_s":0.00179,"duration_s":0.02536,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002662,"correlation_id":"5LMyTTvhZF7","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.001056,"redis_calls":2,"redis_duration_s":0.000332,"cpu_s":0.09,"db_duration_s":0.00375,"view_duration_s":0.0044,"duration_s":0.09277,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"225"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00263,"correlation_id":"C5kI8AUjpw2","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002645,"redis_calls":7,"redis_duration_s":0.000478,"cpu_s":0.03,"db_duration_s":0.00186,"view_duration_s":0.00168,"duration_s":0.02369,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"250"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003744,"correlation_id":"U7FSx5kDYk2","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002711,"redis_calls":7,"redis_duration_s":0.000411,"cpu_s":0.03,"db_duration_s":0.0019,"view_duration_s":0.00176,"duration_s":0.02341,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"275"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002665,"correlation_id":"U2q0dSgPB85","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002727,"redis_calls":7,"redis_duration_s":0.000462,"cpu_s":0.03,"db_duration_s":0.00221,"view_duration_s":0.0017,"duration_s":0.02409,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"300"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.0028,"correlation_id":"iwC22pvVdL5","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.00308,"redis_calls":7,"redis_duration_s":0.000501,"cpu_s":0.03,"db_duration_s":0.00245,"view_duration_s":0.00293,"duration_s":0.02697,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002726,"correlation_id":"UVNcJThajV5","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000482,"redis_calls":2,"redis_duration_s":0.000219,"cpu_s":0.17,"db_duration_s":0.003,"view_duration_s":0.00579,"duration_s":0.1722,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"325"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002719,"correlation_id":"ZDMHZ09EwP4","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002665,"redis_calls":7,"redis_duration_s":0.000432,"cpu_s":0.03,"db_duration_s":0.00186,"view_duration_s":0.00186,"duration_s":0.02395,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"350"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002557,"correlation_id":"u512JyvNBY1","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002653,"redis_calls":7,"redis_duration_s":0.000424,"cpu_s":0.03,"db_duration_s":0.00187,"view_duration_s":0.00166,"duration_s":0.02318,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"375"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002447,"correlation_id":"tZTVFasP1Ta","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002651,"redis_calls":7,"redis_duration_s":0.000528,"cpu_s":0.03,"db_duration_s":0.00213,"view_duration_s":0.00166,"duration_s":0.0233,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.006002,"correlation_id":"Nmqw5agGcl7","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000586,"redis_calls":2,"redis_duration_s":0.000286,"cpu_s":0.09,"db_duration_s":0.00327,"view_duration_s":0.00437,"duration_s":0.08924,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"400"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002563,"correlation_id":"ggDBmhjtEx1","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002708,"redis_calls":7,"redis_duration_s":0.000453,"cpu_s":0.03,"db_duration_s":0.00184,"view_duration_s":0.00175,"duration_s":0.02333,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"425"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002615,"correlation_id":"fhY1HhEwIP","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002577,"redis_calls":7,"redis_duration_s":0.000465,"cpu_s":0.03,"db_duration_s":0.00185,"view_duration_s":0.00182,"duration_s":0.02373,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"119445bd-e8d5-4dae-8bda-e6c8738e07b5","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.0004,"duration_s":0.04422,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"450"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002411,"correlation_id":"8zjKAWxEB88","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002985,"redis_calls":7,"redis_duration_s":0.000408,"cpu_s":0.03,"db_duration_s":0.00185,"view_duration_s":0.00174,"duration_s":0.02359,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"475"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002499,"correlation_id":"EozqHAhFuo8","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002624,"redis_calls":7,"redis_duration_s":0.00048,"cpu_s":0.03,"db_duration_s":0.00257,"view_duration_s":0.00175,"duration_s":0.02393,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002626,"correlation_id":"Wujs8vTXe72","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000438,"redis_calls":2,"redis_duration_s":0.000174,"cpu_s":0.09,"db_duration_s":0.00304,"view_duration_s":0.00437,"duration_s":0.08967,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"500"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002603,"correlation_id":"X3BtIFBVLY4","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002706,"redis_calls":7,"redis_duration_s":0.00044,"cpu_s":0.03,"db_duration_s":0.00202,"view_duration_s":0.0017,"duration_s":0.02395,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"525"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002619,"correlation_id":"Unjf8qrNCh5","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002536,"redis_calls":7,"redis_duration_s":0.00043,"cpu_s":0.03,"db_duration_s":0.00202,"view_duration_s":0.00169,"duration_s":0.02365,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"550"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002551,"correlation_id":"AO7mtDsvAi3","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002637,"redis_calls":7,"redis_duration_s":0.000428,"cpu_s":0.03,"db_duration_s":0.00187,"view_duration_s":0.00172,"duration_s":0.02337,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002586,"correlation_id":"VexzT7ZdLN7","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000477,"redis_calls":2,"redis_duration_s":0.000186,"cpu_s":0.08,"db_duration_s":0.00293,"view_duration_s":0.00433,"duration_s":0.08495,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"575"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002652,"correlation_id":"sUClzQURod4","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002761,"redis_calls":7,"redis_duration_s":0.000476,"cpu_s":0.03,"db_duration_s":0.00209,"view_duration_s":0.00168,"duration_s":0.0243,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"600"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002598,"correlation_id":"3uR2TgLhfZ2","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002563,"redis_calls":7,"redis_duration_s":0.000435,"cpu_s":0.03,"db_duration_s":0.00203,"view_duration_s":0.00177,"duration_s":0.02416,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"625"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002579,"correlation_id":"hSVK9EjDFF7","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.00287,"redis_calls":7,"redis_duration_s":0.000454,"cpu_s":0.03,"db_duration_s":0.00222,"view_duration_s":0.00175,"duration_s":0.02408,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"650"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002589,"correlation_id":"bIhdNtOxiya","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002638,"redis_calls":7,"redis_duration_s":0.000474,"cpu_s":0.03,"db_duration_s":0.00185,"view_duration_s":0.00173,"duration_s":0.02352,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002616,"correlation_id":"KKn0eoC9RQ4","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000593,"redis_calls":2,"redis_duration_s":0.000266,"cpu_s":0.04,"db_duration_s":0.00287,"view_duration_s":0.0006,"duration_s":0.0433,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"675"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002258,"correlation_id":"Fka2XBRGhH1","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002607,"redis_calls":7,"redis_duration_s":0.000441,"cpu_s":0.03,"db_duration_s":0.00181,"view_duration_s":0.00169,"duration_s":0.02292,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"700"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002587,"correlation_id":"IRmJq6hkpJ2","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002604,"redis_calls":7,"redis_duration_s":0.000455,"cpu_s":0.03,"db_duration_s":0.00189,"view_duration_s":0.00064,"duration_s":0.02226,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002579,"correlation_id":"D9qfNBJO9Z1","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002591,"redis_calls":7,"redis_duration_s":0.000425,"cpu_s":0.03,"db_duration_s":0.00198,"view_duration_s":0.00169,"duration_s":0.02318,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"25"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002595,"correlation_id":"yNFsuZ8lsy6","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002671,"redis_calls":7,"redis_duration_s":0.000486,"cpu_s":0.03,"db_duration_s":0.00215,"view_duration_s":0.00176,"duration_s":0.02415,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"50"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002667,"correlation_id":"hsffwpfKFN2","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002568,"redis_calls":7,"redis_duration_s":0.000448,"cpu_s":0.03,"db_duration_s":0.0022,"view_duration_s":0.00184,"duration_s":0.02533,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"75"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002709,"correlation_id":"Ooyeu4iC5B2","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002634,"redis_calls":7,"redis_duration_s":0.000577,"cpu_s":0.03,"db_duration_s":0.00196,"view_duration_s":0.00191,"duration_s":0.02652,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"100"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002677,"correlation_id":"5wZSoDt4e61","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003078,"redis_calls":7,"redis_duration_s":0.000468,"cpu_s":0.03,"db_duration_s":0.00211,"view_duration_s":0.00192,"duration_s":0.02821,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"125"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002684,"correlation_id":"1awSz3wG6u8","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003803,"redis_calls":7,"redis_duration_s":0.000444,"cpu_s":0.03,"db_duration_s":0.0022,"view_duration_s":0.00187,"duration_s":0.0261,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"150"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002584,"correlation_id":"mMmUUuVPXf4","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002639,"redis_calls":7,"redis_duration_s":0.000435,"cpu_s":0.03,"db_duration_s":0.00194,"view_duration_s":0.00178,"duration_s":0.02387,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"175"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002592,"correlation_id":"gTNANGusLW9","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.00264,"redis_calls":7,"redis_duration_s":0.000653,"cpu_s":0.03,"db_duration_s":0.00198,"view_duration_s":0.00197,"duration_s":0.0243,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"200"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00255,"correlation_id":"St1qwRhNaQ8","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002658,"redis_calls":7,"redis_duration_s":0.000504,"cpu_s":0.03,"db_duration_s":0.0021,"view_duration_s":0.00173,"duration_s":0.02395,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"225"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002615,"correlation_id":"2z6ebsXWj78","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002655,"redis_calls":7,"redis_duration_s":0.000463,"cpu_s":0.03,"db_duration_s":0.00195,"view_duration_s":0.0023,"duration_s":0.02439,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"250"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002526,"correlation_id":"ufnr0lzqXK2","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002707,"redis_calls":7,"redis_duration_s":0.000476,"cpu_s":0.03,"db_duration_s":0.00198,"view_duration_s":0.00172,"duration_s":0.02405,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"275"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002695,"correlation_id":"w3TovujFUh3","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002675,"redis_calls":7,"redis_duration_s":0.000422,"cpu_s":0.03,"db_duration_s":0.00194,"view_duration_s":0.00174,"duration_s":0.02349,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"300"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002643,"correlation_id":"621VazyBpH5","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002539,"redis_calls":7,"redis_duration_s":0.000461,"cpu_s":0.03,"db_duration_s":0.0021,"view_duration_s":0.00176,"duration_s":0.02392,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"325"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002724,"correlation_id":"Ksn29kvjr69","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002668,"redis_calls":7,"redis_duration_s":0.000436,"cpu_s":0.03,"db_duration_s":0.00192,"view_duration_s":0.00193,"duration_s":0.02396,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"350"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002595,"correlation_id":"hHNAN6L2JM7","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002651,"redis_calls":7,"redis_duration_s":0.00044,"cpu_s":0.03,"db_duration_s":0.00207,"view_duration_s":0.00173,"duration_s":0.02411,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"375"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002606,"correlation_id":"GrbsFEH7mv6","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002636,"redis_calls":7,"redis_duration_s":0.000476,"cpu_s":0.03,"db_duration_s":0.00205,"view_duration_s":0.0017,"duration_s":0.02751,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"400"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00255,"correlation_id":"iIF2WkULN81","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.00258,"redis_calls":7,"redis_duration_s":0.000412,"cpu_s":0.03,"db_duration_s":0.00185,"view_duration_s":0.00171,"duration_s":0.02282,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"425"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003496,"correlation_id":"nv2JtC5Oiv6","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002615,"redis_calls":7,"redis_duration_s":0.000417,"cpu_s":0.03,"db_duration_s":0.00188,"view_duration_s":0.00172,"duration_s":0.02311,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"450"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002601,"correlation_id":"CVnCkQjk1u6","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002665,"redis_calls":7,"redis_duration_s":0.000499,"cpu_s":0.03,"db_duration_s":0.00216,"view_duration_s":0.00332,"duration_s":0.02806,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"475"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00345,"correlation_id":"4MXHZtTfBJ8","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.006492,"redis_calls":7,"redis_duration_s":0.000593,"cpu_s":0.04,"db_duration_s":0.00249,"view_duration_s":0.00318,"duration_s":0.0366,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"500"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003502,"correlation_id":"g03POfARdN5","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.006089,"redis_calls":7,"redis_duration_s":0.00056,"cpu_s":0.04,"db_duration_s":0.00224,"view_duration_s":0.00312,"duration_s":0.03062,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"525"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002554,"correlation_id":"WjV5Q7j7Y86","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.004435,"redis_calls":7,"redis_duration_s":0.000535,"cpu_s":0.03,"db_duration_s":0.00217,"view_duration_s":0.00182,"duration_s":0.02637,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"550"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002668,"correlation_id":"q9wWHlH6KTa","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.008181,"redis_calls":7,"redis_duration_s":0.000537,"cpu_s":0.04,"db_duration_s":0.0024,"view_duration_s":0.00327,"duration_s":0.03728,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"575"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002614,"correlation_id":"8ugXeB8GBu5","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002849,"redis_calls":7,"redis_duration_s":0.000531,"cpu_s":0.03,"db_duration_s":0.00217,"view_duration_s":0.00227,"duration_s":0.02629,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"600"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002589,"correlation_id":"0V29XZGF585","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002586,"redis_calls":7,"redis_duration_s":0.000439,"cpu_s":0.03,"db_duration_s":0.00192,"view_duration_s":0.00171,"duration_s":0.02376,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"625"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002565,"correlation_id":"zT0X9lUS3s3","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.006426,"redis_calls":7,"redis_duration_s":0.000482,"cpu_s":0.03,"db_duration_s":0.00187,"view_duration_s":0.00175,"duration_s":0.02739,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"650"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002571,"correlation_id":"jcEWaZ1sV57","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002617,"redis_calls":7,"redis_duration_s":0.000731,"cpu_s":0.03,"db_duration_s":0.00183,"view_duration_s":0.00167,"duration_s":0.02348,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"675"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002414,"correlation_id":"c9d1PYd8FL5","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002572,"redis_calls":7,"redis_duration_s":0.000424,"cpu_s":0.03,"db_duration_s":0.00182,"view_duration_s":0.00168,"duration_s":0.02281,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/another-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"700"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"another-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002472,"correlation_id":"hUc3pBh6uaa","meta.user":"test_namespace","meta.project":"test_namespace/another-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002662,"redis_calls":7,"redis_duration_s":0.000498,"cpu_s":0.03,"db_duration_s":0.00219,"view_duration_s":0.00063,"duration_s":0.02351,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"7986e86c-6d1e-4e59-af2e-517d11af3288","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.00047,"duration_s":0.04506,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project","format":"html","controller":"ProjectsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002234,"correlation_id":"ibJH80LXhv2","meta.user":"test_namespace","meta.caller_id":"ProjectsController#show","gitaly_calls":3,"gitaly_duration_s":0.003309,"redis_calls":41,"redis_duration_s":0.002959,"cpu_s":0.17,"db_duration_s":0.01249,"view_duration_s":0.1237,"duration_s":0.17549,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"operationName","value":"pathLastCommit"},{"key":"variables","value":"[FILTERED]"},{"key":"query","value":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"},{"key":"graphql","value":{"operationName":"pathLastCommit","variables":"[FILTERED]","query":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002662,"correlation_id":"AKhGim3QCY3","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.003468,"redis_calls":3,"redis_duration_s":0.000325,"cpu_s":0.05,"db_duration_s":0.00542,"view_duration_s":0.00029,"duration_s":0.05931,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002466,"correlation_id":"BsKkK9gffV2","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000459,"redis_calls":2,"redis_duration_s":0.000233,"cpu_s":0.09,"db_duration_s":0.00297,"view_duration_s":0.0045,"duration_s":0.09581,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002649,"correlation_id":"dlpS0lZ6iL8","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002767,"redis_calls":7,"redis_duration_s":0.000505,"cpu_s":0.03,"db_duration_s":0.00205,"view_duration_s":0.00174,"duration_s":0.02455,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002621,"correlation_id":"yYnApFPi7v5","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000443,"redis_calls":2,"redis_duration_s":0.000171,"cpu_s":0.09,"db_duration_s":0.00284,"view_duration_s":0.00756,"duration_s":0.09215,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"25"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003375,"correlation_id":"e0kGmYK2W28","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002749,"redis_calls":7,"redis_duration_s":0.000434,"cpu_s":0.03,"db_duration_s":0.00183,"view_duration_s":0.00172,"duration_s":0.02385,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"50"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002618,"correlation_id":"jJqVsl03md5","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002822,"redis_calls":7,"redis_duration_s":0.000466,"cpu_s":0.03,"db_duration_s":0.00217,"view_duration_s":0.00181,"duration_s":0.0262,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"75"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002577,"correlation_id":"DtbkQTIDzC9","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002705,"redis_calls":7,"redis_duration_s":0.000457,"cpu_s":0.03,"db_duration_s":0.00185,"view_duration_s":0.00169,"duration_s":0.02332,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"100"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002653,"correlation_id":"iJEUDpPVUf1","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002637,"redis_calls":7,"redis_duration_s":0.000463,"cpu_s":0.03,"db_duration_s":0.002,"view_duration_s":0.00185,"duration_s":0.02417,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"125"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002538,"correlation_id":"fcIrhMKt4Ta","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003955,"redis_calls":7,"redis_duration_s":0.000692,"cpu_s":0.03,"db_duration_s":0.00254,"view_duration_s":0.00334,"duration_s":0.03229,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003501,"correlation_id":"7BypKittyk","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000514,"redis_calls":2,"redis_duration_s":0.000247,"cpu_s":0.18,"db_duration_s":0.00389,"view_duration_s":0.00767,"duration_s":0.1879,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"150"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003298,"correlation_id":"46wo4k634c7","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002693,"redis_calls":7,"redis_duration_s":0.000502,"cpu_s":0.03,"db_duration_s":0.00234,"view_duration_s":0.00172,"duration_s":0.02374,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/issues","format":"html","controller":"Projects::IssuesController","action":"index","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002301,"correlation_id":"Zdzp5jGMSi4","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::IssuesController#index","redis_calls":15,"redis_duration_s":0.000994,"cpu_s":0.09,"db_duration_s":0.00666,"view_duration_s":0.04679,"duration_s":0.0795,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"175"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002744,"correlation_id":"Bft92Cp2S2a","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002801,"redis_calls":7,"redis_duration_s":0.000455,"cpu_s":0.03,"db_duration_s":0.00204,"view_duration_s":0.00185,"duration_s":0.02553,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/boards","format":"html","controller":"Projects::BoardsController","action":"index","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002295,"correlation_id":"ncKElejfEq6","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::BoardsController#index","redis_calls":25,"redis_duration_s":0.001689,"cpu_s":0.39,"db_duration_s":0.02382,"view_duration_s":0.32988,"duration_s":0.39805,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/labels","format":"html","controller":"Projects::LabelsController","action":"index","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.007079,"correlation_id":"Pu1sXDhl2d2","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::LabelsController#index","redis_calls":20,"redis_duration_s":0.001515,"cpu_s":0.1,"db_duration_s":0.01208,"view_duration_s":0.06127,"duration_s":0.09779,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/boards/1/lists","format":"json","controller":"Boards::ListsController","action":"index","status":200,"params":[{"key":"board_id","value":"1"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002416,"correlation_id":"CrDX49FV8Q4","meta.user":"test_namespace","meta.caller_id":"Boards::ListsController#index","redis_calls":1,"redis_duration_s":0.000104,"cpu_s":0.05,"db_duration_s":0.01793,"view_duration_s":0.00024,"duration_s":0.06364,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/milestones","format":"html","controller":"Projects::MilestonesController","action":"index","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.001933,"correlation_id":"7mYtdPRNM8a","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::MilestonesController#index","redis_calls":17,"redis_duration_s":0.001196,"cpu_s":0.09,"db_duration_s":0.00449,"view_duration_s":0.06033,"duration_s":0.08465,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/boards/1/lists/2/issues","format":"json","controller":"Boards::IssuesController","action":"index","status":200,"params":[{"key":"id","value":"2"},{"key":"page","value":"1"},{"key":"board_id","value":"1"},{"key":"list_id","value":"2"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002492,"correlation_id":"xRJ1A6TPiu3","meta.user":"test_namespace","meta.caller_id":"Boards::IssuesController#index","redis_calls":1,"redis_duration_s":7.8e-05,"cpu_s":0.03,"db_duration_s":0.0078,"view_duration_s":0.00018,"duration_s":0.02999,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/boards/1/lists/1/issues","format":"json","controller":"Boards::IssuesController","action":"index","status":200,"params":[{"key":"id","value":"1"},{"key":"page","value":"1"},{"key":"board_id","value":"1"},{"key":"list_id","value":"1"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002812,"correlation_id":"ecrskRhZGwa","meta.user":"test_namespace","meta.caller_id":"Boards::IssuesController#index","redis_calls":1,"redis_duration_s":8.9e-05,"cpu_s":0.05,"db_duration_s":0.0274,"view_duration_s":0.00018,"duration_s":0.07537,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/merge_requests","format":"html","controller":"Projects::MergeRequestsController","action":"index","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002455,"correlation_id":"fno2tfCSu02","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::MergeRequestsController#index","redis_calls":17,"redis_duration_s":0.001469,"cpu_s":0.14,"db_duration_s":0.00872,"view_duration_s":0.06235,"duration_s":0.13731,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/pipelines","format":"html","controller":"Projects::PipelinesController","action":"index","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002386,"correlation_id":"YnxqJFLOln6","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::PipelinesController#index","redis_calls":18,"redis_duration_s":0.001449,"cpu_s":0.1,"db_duration_s":0.00672,"view_duration_s":0.05556,"duration_s":0.08914,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/pipelines.json","format":"json","controller":"Projects::PipelinesController","action":"index","status":200,"params":[{"key":"scope","value":"all"},{"key":"page","value":"1"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.004117,"correlation_id":"4bAfQBk1zHa","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::PipelinesController#index","redis_calls":6,"redis_duration_s":0.000549,"cpu_s":0.04,"db_duration_s":0.00429,"view_duration_s":0.00016,"duration_s":0.02448,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/pipelines.json","format":"json","controller":null,"action":null,"status":304,"params":[{"key":"scope","value":"all"},{"key":"page","value":"1"}],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"redis_calls":1,"redis_duration_s":0.000107,"etag_route":"project_pipelines","correlation_id":null,"cpu_s":0.0,"db_duration_s":0.0,"view_duration_s":0.0,"duration_s":0.0001,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"7636bea7-f4fd-4778-a613-93182b859436","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.00046,"duration_s":0.04539,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/tree/master","format":"html","controller":"Projects::TreeController","action":"show","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002307,"correlation_id":"can8kVHiwTa","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::TreeController#show","gitaly_calls":4,"gitaly_duration_s":0.005706,"redis_calls":21,"redis_duration_s":0.002401,"cpu_s":0.1,"db_duration_s":0.00699,"view_duration_s":0.05974,"duration_s":0.10883,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"operationName","value":"pathLastCommit"},{"key":"variables","value":"[FILTERED]"},{"key":"query","value":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"},{"key":"graphql","value":{"operationName":"pathLastCommit","variables":"[FILTERED]","query":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.0027,"correlation_id":"H4KTbSglQy","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.003106,"redis_calls":3,"redis_duration_s":0.000264,"cpu_s":0.05,"db_duration_s":0.00485,"view_duration_s":0.00029,"duration_s":0.05752,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/issues","format":"html","controller":"Projects::IssuesController","action":"index","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002359,"correlation_id":"WrQe2DqUNx","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::IssuesController#index","redis_calls":15,"redis_duration_s":0.001214,"cpu_s":0.12,"db_duration_s":0.00672,"view_duration_s":0.07938,"duration_s":0.1109,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/issues","format":"html","controller":"Projects::IssuesController","action":"index","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002331,"correlation_id":"6LnpzZXgjo8","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::IssuesController#index","redis_calls":15,"redis_duration_s":0.001193,"cpu_s":0.08,"db_duration_s":0.00509,"view_duration_s":0.0451,"duration_s":0.07291,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002884,"correlation_id":"sOIdJ2bcEE3","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.000847,"redis_calls":2,"redis_duration_s":0.000187,"cpu_s":0.1,"db_duration_s":0.0034,"view_duration_s":0.00489,"duration_s":0.10933,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/boards","format":"html","controller":"Projects::BoardsController","action":"index","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002029,"correlation_id":"tUalSi8DWg3","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::BoardsController#index","redis_calls":15,"redis_duration_s":0.001516,"cpu_s":0.28,"db_duration_s":0.00841,"view_duration_s":0.25106,"duration_s":0.28142,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002634,"correlation_id":"5MN32Fteqr1","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002604,"redis_calls":7,"redis_duration_s":0.000403,"cpu_s":0.03,"db_duration_s":0.00184,"view_duration_s":0.00174,"duration_s":0.02325,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"25"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002689,"correlation_id":"kM2Lk2FUac1","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.00732,"redis_calls":7,"redis_duration_s":0.000447,"cpu_s":0.03,"db_duration_s":0.00196,"view_duration_s":0.00196,"duration_s":0.02887,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"50"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002603,"correlation_id":"iBLx0RQXOK1","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002622,"redis_calls":7,"redis_duration_s":0.000445,"cpu_s":0.03,"db_duration_s":0.0019,"view_duration_s":0.00174,"duration_s":0.02352,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"75"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00324,"correlation_id":"JIUclI3f3k","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003545,"redis_calls":7,"redis_duration_s":0.000535,"cpu_s":0.04,"db_duration_s":0.00231,"view_duration_s":0.00175,"duration_s":0.03083,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002851,"correlation_id":"GLA8lUf5Fza","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.000963,"redis_calls":2,"redis_duration_s":0.00022,"cpu_s":0.11,"db_duration_s":0.00336,"view_duration_s":0.00528,"duration_s":0.11828,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"100"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002821,"correlation_id":"ruoXiFoj0c3","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002689,"redis_calls":7,"redis_duration_s":0.000444,"cpu_s":0.03,"db_duration_s":0.00196,"view_duration_s":0.00189,"duration_s":0.02448,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/boards/1/lists","format":"json","controller":"Boards::ListsController","action":"index","status":200,"params":[{"key":"board_id","value":"1"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002407,"correlation_id":"9uz6AfGMhz1","meta.user":"test_namespace","meta.caller_id":"Boards::ListsController#index","redis_calls":1,"redis_duration_s":8.9e-05,"cpu_s":0.03,"db_duration_s":0.00338,"view_duration_s":0.00032,"duration_s":0.02441,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"125"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003183,"correlation_id":"0fGuTW6zom1","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002789,"redis_calls":7,"redis_duration_s":0.00044,"cpu_s":0.03,"db_duration_s":0.00199,"view_duration_s":0.00172,"duration_s":0.02365,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/boards/1/lists/1/issues","format":"json","controller":"Boards::IssuesController","action":"index","status":200,"params":[{"key":"id","value":"1"},{"key":"page","value":"1"},{"key":"board_id","value":"1"},{"key":"list_id","value":"1"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002585,"correlation_id":"B3Xt2vQIh88","meta.user":"test_namespace","meta.caller_id":"Boards::IssuesController#index","redis_calls":1,"redis_duration_s":0.000108,"cpu_s":0.03,"db_duration_s":0.00645,"view_duration_s":0.00023,"duration_s":0.03106,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"150"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003234,"correlation_id":"MVmOzSHDsA8","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002794,"redis_calls":7,"redis_duration_s":0.000482,"cpu_s":0.03,"db_duration_s":0.00212,"view_duration_s":0.00175,"duration_s":0.02504,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/boards/1/lists/2/issues","format":"json","controller":"Boards::IssuesController","action":"index","status":200,"params":[{"key":"id","value":"2"},{"key":"page","value":"1"},{"key":"board_id","value":"1"},{"key":"list_id","value":"2"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002772,"correlation_id":"pWgJuxM7Ps9","meta.user":"test_namespace","meta.caller_id":"Boards::IssuesController#index","redis_calls":1,"redis_duration_s":8.7e-05,"cpu_s":0.06,"db_duration_s":0.01869,"view_duration_s":0.00019,"duration_s":0.07177,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002692,"correlation_id":"qHxVR3phZ9","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.000761,"redis_calls":2,"redis_duration_s":0.000174,"cpu_s":0.1,"db_duration_s":0.0029,"view_duration_s":0.00465,"duration_s":0.103,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"175"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002606,"correlation_id":"a7P3de7ksY1","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002575,"redis_calls":7,"redis_duration_s":0.000498,"cpu_s":0.03,"db_duration_s":0.00198,"view_duration_s":0.00174,"duration_s":0.02345,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"200"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002728,"correlation_id":"NNkRUK0rJv5","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002781,"redis_calls":7,"redis_duration_s":0.000452,"cpu_s":0.03,"db_duration_s":0.00211,"view_duration_s":0.00178,"duration_s":0.02464,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"225"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002635,"correlation_id":"BXldER7bm46","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003218,"redis_calls":7,"redis_duration_s":0.00046,"cpu_s":0.03,"db_duration_s":0.00222,"view_duration_s":0.00175,"duration_s":0.02478,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"250"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002589,"correlation_id":"9gDV8iYD1G4","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003343,"redis_calls":7,"redis_duration_s":0.00051,"cpu_s":0.03,"db_duration_s":0.00245,"view_duration_s":0.00174,"duration_s":0.02661,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002854,"correlation_id":"GNgErj1ccY5","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.00084,"redis_calls":2,"redis_duration_s":0.000373,"cpu_s":0.11,"db_duration_s":0.0035,"view_duration_s":0.00551,"duration_s":0.1188,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"275"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00266,"correlation_id":"YRn08XMe7E8","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002724,"redis_calls":7,"redis_duration_s":0.000737,"cpu_s":0.03,"db_duration_s":0.00191,"view_duration_s":0.00179,"duration_s":0.0241,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"300"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002578,"correlation_id":"CAJD0WAs7G7","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002607,"redis_calls":7,"redis_duration_s":0.00043,"cpu_s":0.03,"db_duration_s":0.00185,"view_duration_s":0.00171,"duration_s":0.02315,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"325"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002798,"correlation_id":"05Dbeok4Cq4","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002616,"redis_calls":7,"redis_duration_s":0.000439,"cpu_s":0.03,"db_duration_s":0.00212,"view_duration_s":0.00186,"duration_s":0.02563,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"350"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002641,"correlation_id":"v0s8JKaJF7a","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002676,"redis_calls":7,"redis_duration_s":0.000436,"cpu_s":0.03,"db_duration_s":0.00186,"view_duration_s":0.00208,"duration_s":0.02516,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"d2093ae3-4af4-4465-9b72-676f4d43214c","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.00049,"duration_s":0.04528,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/boards","format":"html","controller":"Projects::BoardsController","action":"index","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002316,"correlation_id":"9TSPKfhP6c","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::BoardsController#index","redis_calls":15,"redis_duration_s":0.00108,"cpu_s":0.26,"db_duration_s":0.00836,"view_duration_s":0.22436,"duration_s":0.2551,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/boards/1/lists","format":"json","controller":"Boards::ListsController","action":"index","status":200,"params":[{"key":"board_id","value":"1"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002379,"correlation_id":"MEHQTRH3SS4","meta.user":"test_namespace","meta.caller_id":"Boards::ListsController#index","redis_calls":1,"redis_duration_s":9.1e-05,"cpu_s":0.02,"db_duration_s":0.00362,"view_duration_s":0.00024,"duration_s":0.0228,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/boards/1/lists/2/issues","format":"json","controller":"Boards::IssuesController","action":"index","status":200,"params":[{"key":"id","value":"2"},{"key":"page","value":"1"},{"key":"board_id","value":"1"},{"key":"list_id","value":"2"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003354,"correlation_id":"MXRbXzQ4Y24","meta.user":"test_namespace","meta.caller_id":"Boards::IssuesController#index","redis_calls":1,"redis_duration_s":0.000102,"cpu_s":0.03,"db_duration_s":0.00526,"view_duration_s":0.00018,"duration_s":0.02362,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/boards/1/lists/1/issues","format":"json","controller":"Boards::IssuesController","action":"index","status":200,"params":[{"key":"id","value":"1"},{"key":"page","value":"1"},{"key":"board_id","value":"1"},{"key":"list_id","value":"1"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003328,"correlation_id":"uMgF10bUA3","meta.user":"test_namespace","meta.caller_id":"Boards::IssuesController#index","redis_calls":1,"redis_duration_s":0.000113,"cpu_s":0.03,"db_duration_s":0.00874,"view_duration_s":0.00017,"duration_s":0.03183,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/merge_requests","format":"html","controller":"Projects::MergeRequestsController","action":"index","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.006466,"correlation_id":"6d9Zobdeem2","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::MergeRequestsController#index","redis_calls":29,"redis_duration_s":0.00202,"cpu_s":0.19,"db_duration_s":0.00852,"view_duration_s":0.1406,"duration_s":0.17918,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/value_stream_analytics","format":"html","controller":"Projects::CycleAnalyticsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.006667,"correlation_id":"CG6rrFUmpM8","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::CycleAnalyticsController#show","redis_calls":18,"redis_duration_s":0.001227,"cpu_s":0.08,"db_duration_s":0.01568,"view_duration_s":0.04357,"duration_s":0.082,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/value_stream_analytics","format":"json","controller":"Projects::CycleAnalyticsController","action":"show","status":200,"params":[{"key":"cycle_analytics","value":{"start_date":"30"}},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00254,"correlation_id":"AQqpbJrknj2","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::CycleAnalyticsController#show","gitaly_calls":1,"gitaly_duration_s":0.004534,"redis_calls":3,"redis_duration_s":0.000242,"cpu_s":0.04,"db_duration_s":0.01384,"view_duration_s":0.00037,"duration_s":0.04118,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/value_stream_analytics/events/issue.json","format":"json","controller":"Projects::CycleAnalytics::EventsController","action":"issue","status":200,"params":[{"key":"cycle_analytics","value":{"start_date":"30"}},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002413,"correlation_id":"dYL4vV1A2l2","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::CycleAnalytics::EventsController#issue","redis_calls":1,"redis_duration_s":9.3e-05,"cpu_s":0.02,"db_duration_s":0.0025,"view_duration_s":0.00012,"duration_s":0.0147,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/environments/metrics","format":"html","controller":"Projects::EnvironmentsController","action":"metrics_redirect","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002466,"correlation_id":"vOsk6qPlCC8","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::EnvironmentsController#metrics_redirect","redis_calls":22,"redis_duration_s":0.001569,"cpu_s":0.08,"db_duration_s":0.00433,"view_duration_s":0.05056,"duration_s":0.07535,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"f1acf3f7-089a-4271-8427-01872e3b5fb9","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.00043,"duration_s":0.04694,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"1e8f8996-c721-4759-9a95-deb6ace17465","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.00044,"duration_s":0.04513,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"427c2c55-e6f4-4f83-a8bc-fcc64645756b","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.00045,"duration_s":0.04575,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project","format":"html","controller":"ProjectsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002421,"correlation_id":"pHcMfUvGBY6","meta.user":"test_namespace","meta.caller_id":"ProjectsController#show","gitaly_calls":3,"gitaly_duration_s":0.003573,"redis_calls":54,"redis_duration_s":0.003834,"cpu_s":0.25,"db_duration_s":0.0141,"view_duration_s":0.19956,"duration_s":0.2566,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"operationName","value":"pathLastCommit"},{"key":"variables","value":"[FILTERED]"},{"key":"query","value":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"},{"key":"graphql","value":{"operationName":"pathLastCommit","variables":"[FILTERED]","query":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00272,"correlation_id":"ibzU6gexB72","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.003748,"redis_calls":3,"redis_duration_s":0.000354,"cpu_s":0.05,"db_duration_s":0.00577,"view_duration_s":0.0003,"duration_s":0.06143,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/tree/master","format":"html","controller":"Projects::TreeController","action":"show","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002465,"correlation_id":"Hug1UpIRqha","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::TreeController#show","gitaly_calls":4,"gitaly_duration_s":0.00662,"redis_calls":29,"redis_duration_s":0.001959,"cpu_s":0.2,"db_duration_s":0.0071,"view_duration_s":0.05918,"duration_s":0.11379,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"operationName","value":"pathLastCommit"},{"key":"variables","value":"[FILTERED]"},{"key":"query","value":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"},{"key":"graphql","value":{"operationName":"pathLastCommit","variables":"[FILTERED]","query":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002787,"correlation_id":"acK0wiikkB2","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.003406,"redis_calls":3,"redis_duration_s":0.00036,"cpu_s":0.05,"db_duration_s":0.00542,"view_duration_s":0.00031,"duration_s":0.06119,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/issues","format":"html","controller":"Projects::IssuesController","action":"index","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002259,"correlation_id":"k1s12mhNtc7","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::IssuesController#index","redis_calls":16,"redis_duration_s":0.001081,"cpu_s":0.08,"db_duration_s":0.00646,"view_duration_s":0.04651,"duration_s":0.077,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003695,"correlation_id":"a7AEHEsgiR2","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000571,"redis_calls":2,"redis_duration_s":0.000211,"cpu_s":0.15,"db_duration_s":0.00416,"view_duration_s":0.00814,"duration_s":0.16001,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003384,"correlation_id":"2C46Jaq2xV4","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.001728,"redis_calls":3,"redis_duration_s":0.000329,"cpu_s":0.16,"db_duration_s":0.00346,"view_duration_s":0.00488,"duration_s":0.16847,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/merge_requests","format":"html","controller":"Projects::MergeRequestsController","action":"index","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002381,"correlation_id":"fESUx2JG1p3","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::MergeRequestsController#index","redis_calls":17,"redis_duration_s":0.001314,"cpu_s":0.08,"db_duration_s":0.00757,"view_duration_s":0.0485,"duration_s":0.07925,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002682,"correlation_id":"ncAZQYwZwM8","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003733,"redis_calls":7,"redis_duration_s":0.000581,"cpu_s":0.04,"db_duration_s":0.00294,"view_duration_s":0.00323,"duration_s":0.03467,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/pipelines","format":"html","controller":"Projects::PipelinesController","action":"index","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003237,"correlation_id":"z59shEQ19z5","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::PipelinesController#index","redis_calls":18,"redis_duration_s":0.002926,"cpu_s":0.09,"db_duration_s":0.00588,"view_duration_s":0.04412,"duration_s":0.07478,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002619,"correlation_id":"ZzgX3zjnrz1","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002838,"redis_calls":7,"redis_duration_s":0.000422,"cpu_s":0.03,"db_duration_s":0.00202,"view_duration_s":0.00179,"duration_s":0.02459,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"25"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002874,"correlation_id":"ziTx2hJQqN4","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.00295,"redis_calls":7,"redis_duration_s":0.000595,"cpu_s":0.03,"db_duration_s":0.00217,"view_duration_s":0.00183,"duration_s":0.02468,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"25"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002519,"correlation_id":"y0COpAkASi7","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002747,"redis_calls":7,"redis_duration_s":0.000409,"cpu_s":0.03,"db_duration_s":0.00196,"view_duration_s":0.00175,"duration_s":0.02386,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"50"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002572,"correlation_id":"UZn1PlT96H4","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.00268,"redis_calls":7,"redis_duration_s":0.000445,"cpu_s":0.03,"db_duration_s":0.00193,"view_duration_s":0.00172,"duration_s":0.02368,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"50"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003112,"correlation_id":"w9QhnLAqXx","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.00433,"redis_calls":7,"redis_duration_s":0.000557,"cpu_s":0.04,"db_duration_s":0.00286,"view_duration_s":0.00342,"duration_s":0.04063,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002849,"correlation_id":"d1JwAT21s71","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000557,"redis_calls":2,"redis_duration_s":0.000255,"cpu_s":0.1,"db_duration_s":0.00433,"view_duration_s":0.00439,"duration_s":0.11898,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00263,"correlation_id":"b1i6yr3ppI4","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.000811,"redis_calls":2,"redis_duration_s":0.000197,"cpu_s":0.11,"db_duration_s":0.00329,"view_duration_s":0.00541,"duration_s":0.12269,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"75"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002389,"correlation_id":"3CtuQkuoYN","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002589,"redis_calls":7,"redis_duration_s":0.000476,"cpu_s":0.03,"db_duration_s":0.00187,"view_duration_s":0.00171,"duration_s":0.02322,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"75"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002592,"correlation_id":"yuk9Wf5K0m3","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002686,"redis_calls":7,"redis_duration_s":0.000485,"cpu_s":0.03,"db_duration_s":0.00185,"view_duration_s":0.00239,"duration_s":0.02447,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"100"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002649,"correlation_id":"OVWRy81dRD7","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002659,"redis_calls":7,"redis_duration_s":0.000478,"cpu_s":0.03,"db_duration_s":0.00203,"view_duration_s":0.00175,"duration_s":0.02386,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"125"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002614,"correlation_id":"HSGg4X2lYm4","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002642,"redis_calls":7,"redis_duration_s":0.000592,"cpu_s":0.03,"db_duration_s":0.00218,"view_duration_s":0.00292,"duration_s":0.02606,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"100"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003391,"correlation_id":"rK2EY4C3c84","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002896,"redis_calls":7,"redis_duration_s":0.000423,"cpu_s":0.03,"db_duration_s":0.0022,"view_duration_s":0.00174,"duration_s":0.02405,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/pipelines.json","format":"json","controller":null,"action":null,"status":304,"params":[{"key":"scope","value":"all"},{"key":"page","value":"1"}],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"redis_calls":1,"redis_duration_s":0.000124,"etag_route":"project_pipelines","correlation_id":null,"cpu_s":0.0,"db_duration_s":0.0,"view_duration_s":0.0,"duration_s":0.00012,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"150"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003095,"correlation_id":"85IJIuk9c45","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002968,"redis_calls":7,"redis_duration_s":0.000537,"cpu_s":0.03,"db_duration_s":0.00241,"view_duration_s":0.00171,"duration_s":0.02518,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/tree/master","format":"html","controller":"Projects::TreeController","action":"show","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.001963,"correlation_id":"14yo0pH2xN8","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::TreeController#show","gitaly_calls":4,"gitaly_duration_s":0.006926,"redis_calls":21,"redis_duration_s":0.001538,"cpu_s":0.1,"db_duration_s":0.0082,"view_duration_s":0.05977,"duration_s":0.11179,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"125"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002547,"correlation_id":"KXFVdNU47G1","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002716,"redis_calls":7,"redis_duration_s":0.000436,"cpu_s":0.03,"db_duration_s":0.00229,"view_duration_s":0.00188,"duration_s":0.02449,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"3e2297b5-1ec5-49d8-9e56-99f268891ecb","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.0004,"duration_s":0.04569,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"150"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003062,"correlation_id":"Y1QYM4sIwx5","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.00528,"redis_calls":7,"redis_duration_s":0.000549,"cpu_s":0.04,"db_duration_s":0.00256,"view_duration_s":0.00327,"duration_s":0.03755,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002546,"correlation_id":"SXUXZTnFKs5","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000609,"redis_calls":2,"redis_duration_s":0.000697,"cpu_s":0.1,"db_duration_s":0.00427,"view_duration_s":0.00437,"duration_s":0.11762,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002709,"correlation_id":"VHOMLxoW23","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.000793,"redis_calls":2,"redis_duration_s":0.00018,"cpu_s":0.11,"db_duration_s":0.00401,"view_duration_s":0.00475,"duration_s":0.12594,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"175"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00247,"correlation_id":"5jNRTN797H7","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.00301,"redis_calls":7,"redis_duration_s":0.000939,"cpu_s":0.04,"db_duration_s":0.00229,"view_duration_s":0.00331,"duration_s":0.03185,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"175"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.007464,"correlation_id":"6vatiCjof45","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.00269,"redis_calls":7,"redis_duration_s":0.000478,"cpu_s":0.03,"db_duration_s":0.00209,"view_duration_s":0.00187,"duration_s":0.02438,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/commits/master","format":"html","controller":"Projects::CommitsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00222,"correlation_id":"m41ENGlG1y3","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::CommitsController#show","gitaly_calls":3,"gitaly_duration_s":0.010662,"redis_calls":58,"redis_duration_s":0.006214,"cpu_s":0.28,"db_duration_s":0.00861,"view_duration_s":0.13351,"duration_s":0.28456,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"200"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00259,"correlation_id":"uSuSCLD2vWa","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003231,"redis_calls":7,"redis_duration_s":0.000609,"cpu_s":0.04,"db_duration_s":0.00222,"view_duration_s":0.00262,"duration_s":0.03348,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/branches","format":"html","controller":"Projects::BranchesController","action":"index","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002424,"correlation_id":"MPFoAjGMtU2","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::BranchesController#index","gitaly_calls":3,"gitaly_duration_s":0.004157,"redis_calls":18,"redis_duration_s":0.001966,"cpu_s":0.09,"db_duration_s":0.00523,"view_duration_s":0.06564,"duration_s":0.09496,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"200"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00265,"correlation_id":"7oKpYnwv4d9","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002783,"redis_calls":7,"redis_duration_s":0.000505,"cpu_s":0.03,"db_duration_s":0.00183,"view_duration_s":0.00172,"duration_s":0.02369,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"225"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002572,"correlation_id":"YImDN3lkN72","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002995,"redis_calls":7,"redis_duration_s":0.000502,"cpu_s":0.03,"db_duration_s":0.00217,"view_duration_s":0.00174,"duration_s":0.02412,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/tags","format":"html","controller":"Projects::TagsController","action":"index","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002261,"correlation_id":"Jea0xwO9Ue4","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::TagsController#index","gitaly_calls":1,"gitaly_duration_s":0.000459,"redis_calls":25,"redis_duration_s":0.001725,"cpu_s":0.08,"db_duration_s":0.0046,"view_duration_s":0.04403,"duration_s":0.07197,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"250"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00229,"correlation_id":"b2Pg7N9He2a","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002728,"redis_calls":7,"redis_duration_s":0.000422,"cpu_s":0.03,"db_duration_s":0.00186,"view_duration_s":0.00172,"duration_s":0.02308,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"225"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002585,"correlation_id":"0kYgVskUZR8","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.016661,"redis_calls":7,"redis_duration_s":0.001904,"cpu_s":0.04,"db_duration_s":0.00279,"view_duration_s":0.00332,"duration_s":0.05075,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002501,"correlation_id":"ORNrsZ4Agx4","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.000868,"redis_calls":2,"redis_duration_s":0.0002,"cpu_s":0.12,"db_duration_s":0.00537,"view_duration_s":0.00483,"duration_s":0.13344,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/graphs/master","format":"html","controller":"Projects::GraphsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002262,"correlation_id":"rGLLYZnk829","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::GraphsController#show","gitaly_calls":2,"gitaly_duration_s":0.00606,"redis_calls":18,"redis_duration_s":0.002033,"cpu_s":0.11,"db_duration_s":0.0185,"view_duration_s":0.07474,"duration_s":0.13199,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003273,"correlation_id":"5Hqoaexznwa","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000647,"redis_calls":2,"redis_duration_s":0.000373,"cpu_s":0.13,"db_duration_s":0.0036,"view_duration_s":0.00739,"duration_s":0.13915,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"275"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002661,"correlation_id":"5whUSw7Vi74","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002751,"redis_calls":7,"redis_duration_s":0.000473,"cpu_s":0.03,"db_duration_s":0.0022,"view_duration_s":0.00175,"duration_s":0.02496,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/network/master","format":"html","controller":"Projects::NetworkController","action":"show","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002285,"correlation_id":"lr0AWyf4aL1","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::NetworkController#show","gitaly_calls":2,"gitaly_duration_s":0.002708,"redis_calls":18,"redis_duration_s":0.001325,"cpu_s":0.07,"db_duration_s":0.00389,"view_duration_s":0.04089,"duration_s":0.06926,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"300"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002497,"correlation_id":"0G0N8wOJK5","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003597,"redis_calls":7,"redis_duration_s":0.000467,"cpu_s":0.03,"db_duration_s":0.00221,"view_duration_s":0.00176,"duration_s":0.02666,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"250"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002457,"correlation_id":"TbFEwtyhDj9","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003395,"redis_calls":7,"redis_duration_s":0.001431,"cpu_s":0.03,"db_duration_s":0.00216,"view_duration_s":0.00321,"duration_s":0.02947,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/compare","format":"html","controller":"Projects::CompareController","action":"index","status":200,"params":[{"key":"from","value":"master"},{"key":"to","value":"master"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00258,"correlation_id":"SkglFac1mv5","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::CompareController#index","redis_calls":15,"redis_duration_s":0.001157,"cpu_s":0.1,"db_duration_s":0.0056,"view_duration_s":0.0613,"duration_s":0.08872,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"325"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002537,"correlation_id":"Qe8EZUEqlC6","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002752,"redis_calls":7,"redis_duration_s":0.00048,"cpu_s":0.03,"db_duration_s":0.00182,"view_duration_s":0.0017,"duration_s":0.02326,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"operationName","value":"pathLastCommit"},{"key":"variables","value":"[FILTERED]"},{"key":"query","value":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"},{"key":"graphql","value":{"operationName":"pathLastCommit","variables":"[FILTERED]","query":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00227,"correlation_id":"GgYfnravB76","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.003215,"redis_calls":3,"redis_duration_s":0.000254,"cpu_s":0.05,"db_duration_s":0.00509,"view_duration_s":0.0003,"duration_s":0.05702,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"350"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002729,"correlation_id":"xpJVVZxy5w5","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002847,"redis_calls":7,"redis_duration_s":0.000483,"cpu_s":0.1,"db_duration_s":0.00254,"view_duration_s":0.00229,"duration_s":0.09731,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/autocomplete/users.json","format":"json","controller":"AutocompleteController","action":"users","status":200,"params":[{"key":"project_id","value":"12"},{"key":"active","value":"true"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002451,"correlation_id":"X45hzVezcQa","meta.user":"test_namespace","meta.caller_id":"AutocompleteController#users","redis_calls":1,"redis_duration_s":0.000108,"cpu_s":0.02,"db_duration_s":0.00387,"view_duration_s":0.00028,"duration_s":0.02387,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002888,"correlation_id":"WeeysVWMOD1","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.000896,"redis_calls":2,"redis_duration_s":0.000224,"cpu_s":0.11,"db_duration_s":0.00295,"view_duration_s":0.00561,"duration_s":0.11949,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/branches/diverging_commit_counts","format":"json","controller":"Projects::BranchesController","action":"diverging_commit_counts","status":200,"params":[{"key":"names","value":["master"]},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002417,"correlation_id":"VFDmYOk83q","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::BranchesController#diverging_commit_counts","gitaly_calls":3,"gitaly_duration_s":0.004248,"redis_calls":7,"redis_duration_s":0.000513,"cpu_s":0.03,"db_duration_s":0.00158,"view_duration_s":0.00013,"duration_s":0.02536,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/commits/master/signatures","format":"json","controller":"Projects::CommitsController","action":"signatures","status":200,"params":[{"key":"utf8","value":"✓"},{"key":"search","value":""},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.006758,"correlation_id":"MsSZETIfqua","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::CommitsController#signatures","gitaly_calls":3,"gitaly_duration_s":0.009759,"redis_calls":47,"redis_duration_s":0.003212,"cpu_s":0.11,"db_duration_s":0.00484,"view_duration_s":0.00014,"duration_s":0.10604,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"275"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002383,"correlation_id":"FnDqfHf5B68","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.0027,"redis_calls":7,"redis_duration_s":0.000398,"cpu_s":0.03,"db_duration_s":0.00196,"view_duration_s":0.00175,"duration_s":0.02349,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002972,"correlation_id":"pUTYx9FmNU8","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.000964,"redis_calls":2,"redis_duration_s":0.000193,"cpu_s":0.1,"db_duration_s":0.00348,"view_duration_s":0.00488,"duration_s":0.11314,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003458,"correlation_id":"8u7OnNjXJx4","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000521,"redis_calls":4,"redis_duration_s":0.000431,"cpu_s":0.13,"db_duration_s":0.00474,"view_duration_s":0.00782,"duration_s":0.1422,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/issues","format":"html","controller":"Projects::IssuesController","action":"index","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002243,"correlation_id":"2DjLhizciv3","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::IssuesController#index","redis_calls":15,"redis_duration_s":0.092712,"cpu_s":0.2,"db_duration_s":0.00802,"view_duration_s":0.16375,"duration_s":0.20294,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"375"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002905,"correlation_id":"0pNVyIoUQm4","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002801,"redis_calls":7,"redis_duration_s":0.000485,"cpu_s":0.03,"db_duration_s":0.00182,"view_duration_s":0.00179,"duration_s":0.02411,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/uploads/-/system/user/avatar/2/avatar.png","format":"html","controller":"UploadsController","action":"show","status":200,"params":[{"key":"model","value":"user"},{"key":"mounted_as","value":"avatar"},{"key":"id","value":"2"},{"key":"filename","value":"avatar.png"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002229,"correlation_id":"Q9boLXVNVB8","meta.user":"test_namespace","meta.caller_id":"UploadsController#show","redis_calls":1,"redis_duration_s":9.6e-05,"cpu_s":0.01,"db_duration_s":0.00133,"view_duration_s":0.0,"duration_s":0.00849,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"300"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002232,"correlation_id":"4TGhtA6MyV5","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003066,"redis_calls":7,"redis_duration_s":0.000428,"cpu_s":0.03,"db_duration_s":0.00176,"view_duration_s":0.00171,"duration_s":0.02312,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/tree/master","format":"html","controller":"Projects::TreeController","action":"show","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002382,"correlation_id":"elTfqwKhcL4","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::TreeController#show","gitaly_calls":4,"gitaly_duration_s":0.005918,"redis_calls":21,"redis_duration_s":0.001403,"cpu_s":0.1,"db_duration_s":0.00668,"view_duration_s":0.05851,"duration_s":0.11161,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/graphs/master","format":"json","controller":"Projects::GraphsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002155,"correlation_id":"0OQF0Zf2Ym6","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::GraphsController#show","gitaly_calls":3,"gitaly_duration_s":0.253571,"redis_calls":6,"redis_duration_s":0.000327,"cpu_s":0.17,"db_duration_s":0.00177,"view_duration_s":0.00013,"duration_s":0.32177,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.007072,"correlation_id":"4C2gYG44kQ1","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003468,"redis_calls":9,"redis_duration_s":0.00064,"cpu_s":0.03,"db_duration_s":0.00226,"view_duration_s":0.00177,"duration_s":0.02623,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"400"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002683,"correlation_id":"M69aWfLXa33","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.00434,"redis_calls":7,"redis_duration_s":0.00058,"cpu_s":0.04,"db_duration_s":0.00251,"view_duration_s":0.00236,"duration_s":0.03602,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/alert_management","format":"html","controller":"Projects::AlertManagementController","action":"index","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00229,"correlation_id":"QYc77AhCs77","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::AlertManagementController#index","redis_calls":17,"redis_duration_s":0.001282,"cpu_s":0.08,"db_duration_s":0.00526,"view_duration_s":0.04986,"duration_s":0.07387,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"325"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.107681,"correlation_id":"WKHfW3Ztwa2","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003208,"redis_calls":7,"redis_duration_s":0.000532,"cpu_s":0.04,"db_duration_s":0.00219,"view_duration_s":0.00382,"duration_s":0.02978,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/network/master","format":"json","controller":"Projects::NetworkController","action":"show","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002255,"correlation_id":"v07qWp7ZRl4","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::NetworkController#show","gitaly_calls":6,"gitaly_duration_s":0.125125,"redis_calls":6,"redis_duration_s":0.000374,"cpu_s":0.81,"db_duration_s":0.02046,"view_duration_s":0.65434,"duration_s":0.89153,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"25"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003563,"correlation_id":"zLaCsCCz8C2","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003397,"redis_calls":7,"redis_duration_s":0.000566,"cpu_s":0.04,"db_duration_s":0.00221,"view_duration_s":0.00185,"duration_s":0.03102,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002629,"correlation_id":"LjPgkRQuUR6","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.000782,"redis_calls":3,"redis_duration_s":0.000272,"cpu_s":0.11,"db_duration_s":0.00315,"view_duration_s":0.00451,"duration_s":0.11515,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/environments","format":"html","controller":"Projects::EnvironmentsController","action":"index","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002283,"correlation_id":"UAZri9oAUc1","meta.user":"test_namespace","meta.caller_id":"Projects::EnvironmentsController#index","redis_calls":16,"redis_duration_s":0.001051,"cpu_s":0.07,"db_duration_s":0.00426,"view_duration_s":0.04288,"duration_s":0.06712,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"50"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002237,"correlation_id":"K1YyUe3z9f9","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003026,"redis_calls":7,"redis_duration_s":0.00038,"cpu_s":0.03,"db_duration_s":0.00189,"view_duration_s":0.00172,"duration_s":0.02307,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002556,"correlation_id":"YhQ3D6OVMM7","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000455,"redis_calls":2,"redis_duration_s":0.000191,"cpu_s":0.1,"db_duration_s":0.00331,"view_duration_s":0.00491,"duration_s":0.10294,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"425"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003612,"correlation_id":"zv9VBpNT1K9","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.01261,"redis_calls":7,"redis_duration_s":0.000726,"cpu_s":0.04,"db_duration_s":0.0029,"view_duration_s":0.00181,"duration_s":0.04185,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002557,"correlation_id":"JwOcURjFLb5","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.000808,"redis_calls":2,"redis_duration_s":0.000189,"cpu_s":0.12,"db_duration_s":0.00336,"view_duration_s":0.00455,"duration_s":0.13047,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"350"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002646,"correlation_id":"l5qMg6asOy1","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002809,"redis_calls":7,"redis_duration_s":0.00042,"cpu_s":0.03,"db_duration_s":0.00184,"view_duration_s":0.00179,"duration_s":0.02374,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/serverless/functions","format":"html","controller":"Projects::Serverless::FunctionsController","action":"index","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002362,"correlation_id":"TjDpranmAj3","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::Serverless::FunctionsController#index","redis_calls":25,"redis_duration_s":0.001666,"cpu_s":0.08,"db_duration_s":0.00402,"view_duration_s":0.04889,"duration_s":0.07239,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"75"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002576,"correlation_id":"7za8YL0WmR5","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.00359,"redis_calls":7,"redis_duration_s":0.000432,"cpu_s":0.03,"db_duration_s":0.00194,"view_duration_s":0.00174,"duration_s":0.02585,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"100"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002609,"correlation_id":"FotOjfEbbX4","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003333,"redis_calls":7,"redis_duration_s":0.000501,"cpu_s":0.04,"db_duration_s":0.0022,"view_duration_s":0.00312,"duration_s":0.02931,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/value_stream_analytics","format":"html","controller":"Projects::CycleAnalyticsController","action":"show","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002375,"correlation_id":"tR4zhr1VNx3","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::CycleAnalyticsController#show","redis_calls":16,"redis_duration_s":0.001473,"cpu_s":0.1,"db_duration_s":0.02041,"view_duration_s":0.06721,"duration_s":0.1107,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"450"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003511,"correlation_id":"K42RrQqoke","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003555,"redis_calls":7,"redis_duration_s":0.00051,"cpu_s":0.04,"db_duration_s":0.00226,"view_duration_s":0.00171,"duration_s":0.02854,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"375"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002817,"correlation_id":"BtTfkwfVwv1","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003141,"redis_calls":7,"redis_duration_s":0.000506,"cpu_s":0.03,"db_duration_s":0.0021,"view_duration_s":0.00283,"duration_s":0.02769,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/wikis/home","format":"html","controller":"Projects::WikisController","action":"show","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"home"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002363,"correlation_id":"6xMgYUPBs45","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::WikisController#show","gitaly_calls":5,"gitaly_duration_s":0.003244,"redis_calls":16,"redis_duration_s":0.001289,"cpu_s":0.08,"db_duration_s":0.00445,"view_duration_s":0.05152,"duration_s":0.08221,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"125"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002521,"correlation_id":"oEoaVhIiVX3","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002764,"redis_calls":7,"redis_duration_s":0.000489,"cpu_s":0.03,"db_duration_s":0.00232,"view_duration_s":0.00181,"duration_s":0.02445,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/snippets","format":"html","controller":"Projects::SnippetsController","action":"index","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002383,"correlation_id":"EIl1X3tyeia","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::SnippetsController#index","redis_calls":15,"redis_duration_s":0.001126,"cpu_s":0.08,"db_duration_s":0.00612,"view_duration_s":0.0436,"duration_s":0.07014,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002564,"correlation_id":"FfcaFgT0yV8","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.000801,"redis_calls":2,"redis_duration_s":0.000195,"cpu_s":0.1,"db_duration_s":0.00308,"view_duration_s":0.00495,"duration_s":0.10604,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"150"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002551,"correlation_id":"XnimkyWGsw2","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003077,"redis_calls":7,"redis_duration_s":0.000432,"cpu_s":0.03,"db_duration_s":0.00207,"view_duration_s":0.00172,"duration_s":0.02425,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"475"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002694,"correlation_id":"njsyGUa2321","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002755,"redis_calls":7,"redis_duration_s":0.000457,"cpu_s":0.03,"db_duration_s":0.00189,"view_duration_s":0.00188,"duration_s":0.02437,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"400"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002682,"correlation_id":"4O20tVXoMW8","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002795,"redis_calls":7,"redis_duration_s":0.000423,"cpu_s":0.03,"db_duration_s":0.00185,"view_duration_s":0.00185,"duration_s":0.02372,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"175"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002609,"correlation_id":"atuXu217IN","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002761,"redis_calls":7,"redis_duration_s":0.000429,"cpu_s":0.03,"db_duration_s":0.00199,"view_duration_s":0.00171,"duration_s":0.02333,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002448,"correlation_id":"wCyFPXAKCx3","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":1,"gitaly_duration_s":0.000459,"redis_calls":2,"redis_duration_s":0.000212,"cpu_s":0.09,"db_duration_s":0.00333,"view_duration_s":0.00459,"duration_s":0.09453,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00267,"correlation_id":"rUJRiznUJy8","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.000791,"redis_calls":2,"redis_duration_s":0.000186,"cpu_s":0.1,"db_duration_s":0.00332,"view_duration_s":0.00489,"duration_s":0.10625,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"200"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00268,"correlation_id":"MnzP1n0RSk7","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002787,"redis_calls":7,"redis_duration_s":0.000994,"cpu_s":0.03,"db_duration_s":0.00187,"view_duration_s":0.00238,"duration_s":0.02481,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getAlerts","variables":"[FILTERED]","query":"query getAlerts($projectPath: ID!, $statuses: [AlertManagementStatus!]) {\n  project(fullPath: $projectPath) {\n    alertManagementAlerts(statuses: $statuses) {\n      nodes {\n        ...AlertListItem\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment AlertListItem on AlertManagementAlert {\n  iid\n  title\n  severity\n  status\n  startedAt\n  endedAt\n  eventCount\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getAlerts","variables":"[FILTERED]","query":"query getAlerts($projectPath: ID!, $statuses: [AlertManagementStatus!]) {\n  project(fullPath: $projectPath) {\n    alertManagementAlerts(statuses: $statuses) {\n      nodes {\n        ...AlertListItem\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment AlertListItem on AlertManagementAlert {\n  iid\n  title\n  severity\n  status\n  startedAt\n  endedAt\n  eventCount\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002756,"correlation_id":"WjAMgP0AwK1","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","redis_calls":1,"redis_duration_s":9.4e-05,"cpu_s":0.02,"db_duration_s":0.00266,"view_duration_s":0.00017,"duration_s":0.02226,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/environments.json","format":"json","controller":"Projects::EnvironmentsController","action":"index","status":200,"params":[{"key":"scope","value":"available"},{"key":"page","value":"1"},{"key":"nested","value":"true"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002814,"correlation_id":"N6KLxBOUC9","meta.user":"test_namespace","meta.caller_id":"Projects::EnvironmentsController#index","redis_calls":2,"redis_duration_s":0.07698,"cpu_s":0.11,"db_duration_s":0.00675,"view_duration_s":0.00021,"duration_s":0.10562,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"500"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002575,"correlation_id":"x6n74lsQqw","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.00311,"redis_calls":7,"redis_duration_s":0.000507,"cpu_s":0.03,"db_duration_s":0.00228,"view_duration_s":0.00186,"duration_s":0.02612,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"7cddcec7-f060-4887-ba7b-ff7afee0b453","cpu_s":0.13,"db_duration_s":0.0,"view_duration_s":0.00045,"duration_s":0.04615,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"425"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002682,"correlation_id":"ZIEiBb3EeO8","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002669,"redis_calls":7,"redis_duration_s":0.000542,"cpu_s":0.03,"db_duration_s":0.00185,"view_duration_s":0.00205,"duration_s":0.02493,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"225"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002842,"correlation_id":"HTrfeEgSbF9","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002757,"redis_calls":7,"redis_duration_s":0.000448,"cpu_s":0.03,"db_duration_s":0.00191,"view_duration_s":0.0018,"duration_s":0.02434,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/serverless/functions.json","format":"json","controller":"Projects::Serverless::FunctionsController","action":"index","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002289,"correlation_id":"ZXqkx1iHKN5","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::Serverless::FunctionsController#index","redis_calls":7,"redis_duration_s":0.000537,"cpu_s":0.03,"db_duration_s":0.00261,"view_duration_s":0.00013,"duration_s":0.0201,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"250"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003225,"correlation_id":"cDMSr8V9bj8","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003049,"redis_calls":8,"redis_duration_s":0.000552,"cpu_s":0.03,"db_duration_s":0.00242,"view_duration_s":0.00179,"duration_s":0.02651,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002836,"correlation_id":"8vlVvvbK9K2","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.000825,"redis_calls":2,"redis_duration_s":0.000199,"cpu_s":0.1,"db_duration_s":0.00359,"view_duration_s":0.0049,"duration_s":0.11646,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"450"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002899,"correlation_id":"a4Gv6eJuIF6","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002839,"redis_calls":7,"redis_duration_s":0.000539,"cpu_s":0.03,"db_duration_s":0.00226,"view_duration_s":0.00184,"duration_s":0.02514,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"275"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002723,"correlation_id":"x5g0rR5euj4","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002705,"redis_calls":7,"redis_duration_s":0.000453,"cpu_s":0.03,"db_duration_s":0.00218,"view_duration_s":0.00187,"duration_s":0.02456,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/value_stream_analytics","format":"json","controller":"Projects::CycleAnalyticsController","action":"show","status":200,"params":[{"key":"cycle_analytics","value":{"start_date":"30"}},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002563,"correlation_id":"lfKjfdxMbU1","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::CycleAnalyticsController#show","gitaly_calls":1,"gitaly_duration_s":0.004123,"redis_calls":2,"redis_duration_s":0.000236,"cpu_s":0.04,"db_duration_s":0.01537,"view_duration_s":0.00042,"duration_s":0.0458,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"300"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002735,"correlation_id":"52UlCqkT46a","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.00266,"redis_calls":7,"redis_duration_s":0.000484,"cpu_s":0.03,"db_duration_s":0.00191,"view_duration_s":0.00183,"duration_s":0.02424,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002661,"correlation_id":"VRu2TGcYtMa","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.00085,"redis_calls":2,"redis_duration_s":0.000177,"cpu_s":0.1,"db_duration_s":0.00331,"view_duration_s":0.00452,"duration_s":0.10556,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"operationName","value":"pathLastCommit"},{"key":"variables","value":"[FILTERED]"},{"key":"query","value":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"},{"key":"graphql","value":{"operationName":"pathLastCommit","variables":"[FILTERED]","query":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002481,"correlation_id":"eVbYWPlzoL","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.003686,"redis_calls":4,"redis_duration_s":0.001678,"cpu_s":0.11,"db_duration_s":0.00618,"view_duration_s":0.0003,"duration_s":0.12246,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"475"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002945,"correlation_id":"qd3z61fV9Q7","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002982,"redis_calls":7,"redis_duration_s":0.000492,"cpu_s":0.03,"db_duration_s":0.00216,"view_duration_s":0.00176,"duration_s":0.02451,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/value_stream_analytics/events/issue.json","format":"json","controller":"Projects::CycleAnalytics::EventsController","action":"issue","status":200,"params":[{"key":"cycle_analytics","value":{"start_date":"30"}},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002584,"correlation_id":"5gjvbLnnyi2","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::CycleAnalytics::EventsController#issue","redis_calls":1,"redis_duration_s":0.000112,"cpu_s":0.02,"db_duration_s":0.00261,"view_duration_s":0.00012,"duration_s":0.01539,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"325"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002441,"correlation_id":"waeeA08Un94","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003363,"redis_calls":7,"redis_duration_s":0.000844,"cpu_s":0.03,"db_duration_s":0.00201,"view_duration_s":0.0031,"duration_s":0.03005,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/serverless/functions.json","format":"json","controller":"Projects::Serverless::FunctionsController","action":"index","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002345,"correlation_id":"FPs6YsFk6q8","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::Serverless::FunctionsController#index","redis_calls":4,"redis_duration_s":0.000357,"cpu_s":0.03,"db_duration_s":0.00214,"view_duration_s":0.00013,"duration_s":0.01805,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"350"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003674,"correlation_id":"MNP4xIGLOp7","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003154,"redis_calls":7,"redis_duration_s":0.000549,"cpu_s":0.03,"db_duration_s":0.0024,"view_duration_s":0.00191,"duration_s":0.02581,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002645,"correlation_id":"PDdwX9kpNG4","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.000868,"redis_calls":2,"redis_duration_s":0.000188,"cpu_s":0.11,"db_duration_s":0.00334,"view_duration_s":0.00612,"duration_s":0.11737,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"500"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002698,"correlation_id":"7k5ay5yh3V5","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002821,"redis_calls":7,"redis_duration_s":0.000505,"cpu_s":0.03,"db_duration_s":0.0019,"view_duration_s":0.00182,"duration_s":0.02451,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"375"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003384,"correlation_id":"peXGfvNIaG3","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003242,"redis_calls":7,"redis_duration_s":0.000553,"cpu_s":0.04,"db_duration_s":0.00225,"view_duration_s":0.00333,"duration_s":0.02895,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002748,"correlation_id":"zsDePzKQmR2","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.000985,"redis_calls":2,"redis_duration_s":0.000319,"cpu_s":0.11,"db_duration_s":0.00317,"view_duration_s":0.00466,"duration_s":0.11528,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"400"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002624,"correlation_id":"l14ebMmVLE","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003091,"redis_calls":7,"redis_duration_s":0.000538,"cpu_s":0.03,"db_duration_s":0.00209,"view_duration_s":0.00168,"duration_s":0.02475,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"525"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002879,"correlation_id":"S7UocGgnu8a","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002843,"redis_calls":7,"redis_duration_s":0.000453,"cpu_s":0.03,"db_duration_s":0.00204,"view_duration_s":0.00177,"duration_s":0.02432,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"425"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002648,"correlation_id":"NGNks7hD7j2","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002646,"redis_calls":7,"redis_duration_s":0.000411,"cpu_s":0.03,"db_duration_s":0.00192,"view_duration_s":0.00177,"duration_s":0.02351,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002644,"correlation_id":"h69EeHHtbs4","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002792,"redis_calls":7,"redis_duration_s":0.000412,"cpu_s":0.03,"db_duration_s":0.00188,"view_duration_s":0.00182,"duration_s":0.02402,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"450"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002609,"correlation_id":"TkNE4BsPq76","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002741,"redis_calls":7,"redis_duration_s":0.000427,"cpu_s":0.03,"db_duration_s":0.00202,"view_duration_s":0.0017,"duration_s":0.02355,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"550"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002611,"correlation_id":"alKpVYv8bZ6","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002656,"redis_calls":7,"redis_duration_s":0.000486,"cpu_s":0.03,"db_duration_s":0.00218,"view_duration_s":0.00183,"duration_s":0.02483,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002742,"correlation_id":"LCaIyOV5Ck3","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.000888,"redis_calls":2,"redis_duration_s":0.000192,"cpu_s":0.1,"db_duration_s":0.00323,"view_duration_s":0.00469,"duration_s":0.10832,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"25"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002621,"correlation_id":"QGHUI2Q1pJ3","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002831,"redis_calls":7,"redis_duration_s":0.000505,"cpu_s":0.03,"db_duration_s":0.00216,"view_duration_s":0.00184,"duration_s":0.02495,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"475"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002572,"correlation_id":"LlcCdBOSnS9","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002706,"redis_calls":7,"redis_duration_s":0.000427,"cpu_s":0.03,"db_duration_s":0.00212,"view_duration_s":0.00171,"duration_s":0.0237,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002615,"correlation_id":"nWct5fgDs1","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.000823,"redis_calls":2,"redis_duration_s":0.000186,"cpu_s":0.1,"db_duration_s":0.00301,"view_duration_s":0.0051,"duration_s":0.10435,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"500"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002605,"correlation_id":"4Ngcd52hjka","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002627,"redis_calls":7,"redis_duration_s":0.000497,"cpu_s":0.03,"db_duration_s":0.00186,"view_duration_s":0.0018,"duration_s":0.0238,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"575"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00254,"correlation_id":"5y60j0kRmM1","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002673,"redis_calls":7,"redis_duration_s":0.000467,"cpu_s":0.03,"db_duration_s":0.00193,"view_duration_s":0.0017,"duration_s":0.02317,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"50"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002645,"correlation_id":"SD6sbT0s7v3","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002664,"redis_calls":7,"redis_duration_s":0.000489,"cpu_s":0.03,"db_duration_s":0.00186,"view_duration_s":0.00184,"duration_s":0.02382,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"525"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002494,"correlation_id":"ckUBkcU3Q25","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002618,"redis_calls":7,"redis_duration_s":0.000418,"cpu_s":0.03,"db_duration_s":0.00217,"view_duration_s":0.00175,"duration_s":0.02359,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"550"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002522,"correlation_id":"HVR1Rhj82D2","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002653,"redis_calls":7,"redis_duration_s":0.00048,"cpu_s":0.03,"db_duration_s":0.00196,"view_duration_s":0.00177,"duration_s":0.02373,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"600"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002578,"correlation_id":"V0JakChDbta","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.008274,"redis_calls":7,"redis_duration_s":0.000459,"cpu_s":0.03,"db_duration_s":0.00191,"view_duration_s":0.00173,"duration_s":0.02907,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"75"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002582,"correlation_id":"XLlKOQmOQP3","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.0027,"redis_calls":7,"redis_duration_s":0.000442,"cpu_s":0.03,"db_duration_s":0.00224,"view_duration_s":0.00167,"duration_s":0.02373,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"575"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003214,"correlation_id":"4gCMsi1POu","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003252,"redis_calls":7,"redis_duration_s":0.000492,"cpu_s":0.03,"db_duration_s":0.00241,"view_duration_s":0.00201,"duration_s":0.02635,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003379,"correlation_id":"2PEl5IHYKz1","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.000829,"redis_calls":2,"redis_duration_s":0.000208,"cpu_s":0.1,"db_duration_s":0.00324,"view_duration_s":0.0049,"duration_s":0.10506,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002618,"correlation_id":"P0Uny8CB0B6","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.000777,"redis_calls":2,"redis_duration_s":0.000552,"cpu_s":0.1,"db_duration_s":0.00323,"view_duration_s":0.00509,"duration_s":0.1033,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"625"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00237,"correlation_id":"NMw3P8vvGj6","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002685,"redis_calls":7,"redis_duration_s":0.000448,"cpu_s":0.03,"db_duration_s":0.00214,"view_duration_s":0.00203,"duration_s":0.02453,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"21bf821d-7456-43cc-a57d-3657b36a7ba0","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.00045,"duration_s":0.04634,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"100"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002594,"correlation_id":"sRHJGczHe21","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002976,"redis_calls":7,"redis_duration_s":0.000478,"cpu_s":0.03,"db_duration_s":0.00219,"view_duration_s":0.00169,"duration_s":0.0242,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"650"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002612,"correlation_id":"GGLR07PKK06","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002682,"redis_calls":7,"redis_duration_s":0.000433,"cpu_s":0.03,"db_duration_s":0.00188,"view_duration_s":0.0018,"duration_s":0.02367,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"600"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002555,"correlation_id":"TA9ppNO1O64","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002722,"redis_calls":7,"redis_duration_s":0.000515,"cpu_s":0.03,"db_duration_s":0.00208,"view_duration_s":0.00179,"duration_s":0.02409,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"675"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002527,"correlation_id":"VygntHwQIBa","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002742,"redis_calls":7,"redis_duration_s":0.000433,"cpu_s":0.03,"db_duration_s":0.0021,"view_duration_s":0.00176,"duration_s":0.02397,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"125"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002613,"correlation_id":"LaahBL6u6G","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.00265,"redis_calls":7,"redis_duration_s":0.000423,"cpu_s":0.03,"db_duration_s":0.00207,"view_duration_s":0.0017,"duration_s":0.0236,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002595,"correlation_id":"hfq0VbtLL46","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.000817,"redis_calls":2,"redis_duration_s":0.000176,"cpu_s":0.11,"db_duration_s":0.00319,"view_duration_s":0.00454,"duration_s":0.11432,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"700"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003556,"correlation_id":"ohkODjZGVF3","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003205,"redis_calls":7,"redis_duration_s":0.000535,"cpu_s":0.04,"db_duration_s":0.00222,"view_duration_s":0.00211,"duration_s":0.03077,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"625"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002415,"correlation_id":"wY4TONr6WL9","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003108,"redis_calls":7,"redis_duration_s":0.000491,"cpu_s":0.03,"db_duration_s":0.00212,"view_duration_s":0.0019,"duration_s":0.02429,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002624,"correlation_id":"ho5HkP1RGp","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.000865,"redis_calls":2,"redis_duration_s":0.000181,"cpu_s":0.09,"db_duration_s":0.00291,"view_duration_s":0.0044,"duration_s":0.10019,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"150"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002578,"correlation_id":"aIGGN1pGTo7","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.00265,"redis_calls":7,"redis_duration_s":0.000422,"cpu_s":0.03,"db_duration_s":0.00191,"view_duration_s":0.00184,"duration_s":0.02392,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"175"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003995,"correlation_id":"5JIuwV4GFKa","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003007,"redis_calls":7,"redis_duration_s":0.000444,"cpu_s":0.03,"db_duration_s":0.00216,"view_duration_s":0.00185,"duration_s":0.02877,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"725"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002642,"correlation_id":"gOk3g0xNSZ7","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002769,"redis_calls":7,"redis_duration_s":0.000438,"cpu_s":0.03,"db_duration_s":0.00199,"view_duration_s":0.00177,"duration_s":0.02423,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"650"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002578,"correlation_id":"GkylJ7cqXA1","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002771,"redis_calls":7,"redis_duration_s":0.000429,"cpu_s":0.03,"db_duration_s":0.00195,"view_duration_s":0.00179,"duration_s":0.0243,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"200"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002565,"correlation_id":"2ClDlYbncD","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002861,"redis_calls":7,"redis_duration_s":0.000966,"cpu_s":0.03,"db_duration_s":0.00197,"view_duration_s":0.00172,"duration_s":0.02441,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002606,"correlation_id":"JqWS4PEr9x","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.000799,"redis_calls":2,"redis_duration_s":0.000175,"cpu_s":0.1,"db_duration_s":0.00301,"view_duration_s":0.00849,"duration_s":0.10797,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"225"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002444,"correlation_id":"FVI4NfDd0d5","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003049,"redis_calls":7,"redis_duration_s":0.000483,"cpu_s":0.12,"db_duration_s":0.00298,"view_duration_s":0.00229,"duration_s":0.11458,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"675"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002919,"correlation_id":"YHSrWTVMG86","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003196,"redis_calls":7,"redis_duration_s":0.000455,"cpu_s":0.03,"db_duration_s":0.00222,"view_duration_s":0.00182,"duration_s":0.02609,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"250"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002795,"correlation_id":"EIyi1PqHMJ1","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003325,"redis_calls":7,"redis_duration_s":0.000463,"cpu_s":0.03,"db_duration_s":0.00215,"view_duration_s":0.00185,"duration_s":0.0276,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"275"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003591,"correlation_id":"3ElvLwxgD96","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.005777,"redis_calls":7,"redis_duration_s":0.000523,"cpu_s":0.03,"db_duration_s":0.0024,"view_duration_s":0.00181,"duration_s":0.02842,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"700"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002693,"correlation_id":"0lHRCWtskr1","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002729,"redis_calls":7,"redis_duration_s":0.000491,"cpu_s":0.03,"db_duration_s":0.00205,"view_duration_s":0.00182,"duration_s":0.02432,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"300"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002595,"correlation_id":"Vy2qZuM3zA9","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002755,"redis_calls":7,"redis_duration_s":0.000451,"cpu_s":0.03,"db_duration_s":0.00189,"view_duration_s":0.00171,"duration_s":0.02377,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"325"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003065,"correlation_id":"BQNlDQIz4Z1","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002799,"redis_calls":7,"redis_duration_s":0.0005,"cpu_s":0.03,"db_duration_s":0.00226,"view_duration_s":0.00179,"duration_s":0.02502,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002668,"correlation_id":"cfI6UQ3sZg3","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.000884,"redis_calls":2,"redis_duration_s":0.000451,"cpu_s":0.1,"db_duration_s":0.00335,"view_duration_s":0.00539,"duration_s":0.11181,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"725"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00267,"correlation_id":"0rXCLAAOUM5","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003055,"redis_calls":7,"redis_duration_s":0.00048,"cpu_s":0.03,"db_duration_s":0.00209,"view_duration_s":0.00179,"duration_s":0.02446,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"350"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002588,"correlation_id":"GqoEhDD2ba","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002669,"redis_calls":7,"redis_duration_s":0.000433,"cpu_s":0.03,"db_duration_s":0.00189,"view_duration_s":0.0017,"duration_s":0.02337,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/pipelines.json","format":"json","controller":null,"action":null,"status":304,"params":[{"key":"scope","value":"all"},{"key":"page","value":"1"}],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"redis_calls":1,"redis_duration_s":0.000177,"etag_route":"project_pipelines","correlation_id":null,"cpu_s":0.0,"db_duration_s":0.0,"view_duration_s":0.0,"duration_s":9.0e-05,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"375"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002446,"correlation_id":"avcka1PfDN3","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002665,"redis_calls":7,"redis_duration_s":0.000441,"cpu_s":0.03,"db_duration_s":0.00185,"view_duration_s":0.00168,"duration_s":0.02312,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"750"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002638,"correlation_id":"Fb1ExlUv0k4","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.00271,"redis_calls":7,"redis_duration_s":0.000461,"cpu_s":0.03,"db_duration_s":0.0019,"view_duration_s":0.00175,"duration_s":0.02656,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"1c215e9a-c190-4b3a-ab3f-c8dec4e9fe46","cpu_s":0.08,"db_duration_s":0.0,"view_duration_s":0.00042,"duration_s":0.07248,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"400"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002576,"correlation_id":"uDfKFVuyqk2","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002647,"redis_calls":7,"redis_duration_s":0.000471,"cpu_s":0.03,"db_duration_s":0.00183,"view_duration_s":0.00169,"duration_s":0.02318,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"425"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002581,"correlation_id":"8lS5GIf7M65","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002607,"redis_calls":7,"redis_duration_s":0.000479,"cpu_s":0.03,"db_duration_s":0.00188,"view_duration_s":0.0017,"duration_s":0.02284,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002609,"correlation_id":"yN7Ds2ycVka","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.000874,"redis_calls":2,"redis_duration_s":0.000194,"cpu_s":0.1,"db_duration_s":0.00304,"view_duration_s":0.00525,"duration_s":0.10353,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"775"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.006988,"correlation_id":"A67Zld9OJp7","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002694,"redis_calls":7,"redis_duration_s":0.000541,"cpu_s":0.03,"db_duration_s":0.00217,"view_duration_s":0.00124,"duration_s":0.02458,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"450"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002579,"correlation_id":"oFoFAqxeYa9","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003155,"redis_calls":7,"redis_duration_s":0.000446,"cpu_s":0.03,"db_duration_s":0.00202,"view_duration_s":0.00177,"duration_s":0.02415,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/environments.json","format":"json","controller":null,"action":null,"status":304,"params":[{"key":"scope","value":"available"},{"key":"page","value":"1"},{"key":"nested","value":"true"}],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"redis_calls":1,"redis_duration_s":9.7e-05,"etag_route":"environments","correlation_id":null,"cpu_s":0.0,"db_duration_s":0.0,"view_duration_s":0.0,"duration_s":9.0e-05,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"475"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002533,"correlation_id":"Rr01ZdcM901","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002593,"redis_calls":7,"redis_duration_s":0.000422,"cpu_s":0.03,"db_duration_s":0.00224,"view_duration_s":0.00174,"duration_s":0.02398,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"500"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002562,"correlation_id":"XSyjLjazmR1","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002602,"redis_calls":7,"redis_duration_s":0.000436,"cpu_s":0.03,"db_duration_s":0.00197,"view_duration_s":0.00178,"duration_s":0.02345,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"525"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002562,"correlation_id":"tCqnSPTrrA5","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002654,"redis_calls":7,"redis_duration_s":0.00044,"cpu_s":0.03,"db_duration_s":0.00189,"view_duration_s":0.00174,"duration_s":0.02359,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"550"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002562,"correlation_id":"8mDi0r6m8F","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002674,"redis_calls":7,"redis_duration_s":0.000475,"cpu_s":0.03,"db_duration_s":0.00198,"view_duration_s":0.0017,"duration_s":0.02351,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"575"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002513,"correlation_id":"ZI6agesRat9","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002726,"redis_calls":7,"redis_duration_s":0.000493,"cpu_s":0.03,"db_duration_s":0.00257,"view_duration_s":0.0017,"duration_s":0.02398,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002624,"correlation_id":"LIjdr2Q2Y5a","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.000821,"redis_calls":2,"redis_duration_s":0.000169,"cpu_s":0.1,"db_duration_s":0.00287,"view_duration_s":0.0045,"duration_s":0.10331,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"600"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002581,"correlation_id":"glRxQtMJd81","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002732,"redis_calls":7,"redis_duration_s":0.000409,"cpu_s":0.03,"db_duration_s":0.00188,"view_duration_s":0.00167,"duration_s":0.02313,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"625"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003725,"correlation_id":"Bo386lyqnx8","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002687,"redis_calls":7,"redis_duration_s":0.00046,"cpu_s":0.03,"db_duration_s":0.00193,"view_duration_s":0.00174,"duration_s":0.02351,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"650"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00262,"correlation_id":"KWLTQqVCYr","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002996,"redis_calls":7,"redis_duration_s":0.000422,"cpu_s":0.03,"db_duration_s":0.00197,"view_duration_s":0.00171,"duration_s":0.02576,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/pipelines.json","format":"json","controller":null,"action":null,"status":304,"params":[{"key":"scope","value":"all"},{"key":"page","value":"1"}],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"redis_calls":1,"redis_duration_s":0.000105,"etag_route":"project_pipelines","correlation_id":null,"cpu_s":0.0,"db_duration_s":0.0,"view_duration_s":0.0,"duration_s":0.00012,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"675"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002615,"correlation_id":"wAeIloU1VM3","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003118,"redis_calls":7,"redis_duration_s":0.000498,"cpu_s":0.03,"db_duration_s":0.00208,"view_duration_s":0.00305,"duration_s":0.02745,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"700"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002585,"correlation_id":"c1oGBKdHoe1","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002688,"redis_calls":7,"redis_duration_s":0.000433,"cpu_s":0.03,"db_duration_s":0.00221,"view_duration_s":0.00173,"duration_s":0.02394,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/pipelines.json","format":"json","controller":null,"action":null,"status":304,"params":[{"key":"scope","value":"all"},{"key":"page","value":"1"}],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"redis_calls":1,"redis_duration_s":9.9e-05,"etag_route":"project_pipelines","correlation_id":null,"cpu_s":0.0,"db_duration_s":0.0,"view_duration_s":0.0,"duration_s":0.0001,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"725"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002598,"correlation_id":"Cz6YaYX2DV9","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002756,"redis_calls":7,"redis_duration_s":0.000451,"cpu_s":0.03,"db_duration_s":0.00211,"view_duration_s":0.00177,"duration_s":0.02416,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"750"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002562,"correlation_id":"dG6rsPmMJ8","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002914,"redis_calls":8,"redis_duration_s":0.000479,"cpu_s":0.03,"db_duration_s":0.00206,"view_duration_s":0.00181,"duration_s":0.02391,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"775"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00302,"correlation_id":"Bu3iZ4R5q45","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.00262,"redis_calls":7,"redis_duration_s":0.000413,"cpu_s":0.03,"db_duration_s":0.00187,"view_duration_s":0.00128,"duration_s":0.02296,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"c2f7ada9-e203-458a-a840-6826a9f6fb29","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.0004,"duration_s":0.04637,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/uploads/-/system/user/avatar/2/avatar.png","format":"html","controller":"UploadsController","action":"show","status":200,"params":[{"key":"width","value":"23"},{"key":"model","value":"user"},{"key":"mounted_as","value":"avatar"},{"key":"id","value":"2"},{"key":"filename","value":"avatar.png"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002488,"correlation_id":"bPlZptSP4f5","meta.user":"test_namespace","meta.caller_id":"UploadsController#show","redis_calls":1,"redis_duration_s":0.000107,"cpu_s":0.01,"db_duration_s":0.00157,"view_duration_s":0.0,"duration_s":0.00917,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/environments.json","format":"json","controller":null,"action":null,"status":304,"params":[{"key":"scope","value":"available"},{"key":"page","value":"1"},{"key":"nested","value":"true"}],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"redis_calls":1,"redis_duration_s":0.000109,"etag_route":"environments","correlation_id":null,"cpu_s":0.01,"db_duration_s":0.0,"view_duration_s":0.0,"duration_s":0.0001,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"3ae0e7e1-d152-45c4-ad1a-b97cd3f64bea","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.00045,"duration_s":0.04715,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/issues","format":"html","controller":"Projects::IssuesController","action":"index","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.00223,"correlation_id":"1uhjfTp5Vn3","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::IssuesController#index","redis_calls":28,"redis_duration_s":0.002082,"cpu_s":0.09,"db_duration_s":0.00545,"view_duration_s":0.04763,"duration_s":0.07905,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/tree/master","format":"html","controller":"Projects::TreeController","action":"show","status":200,"params":[{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.006592,"correlation_id":"RoXobpln6g2","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::TreeController#show","gitaly_calls":4,"gitaly_duration_s":0.006014,"redis_calls":36,"redis_duration_s":0.002502,"cpu_s":0.11,"db_duration_s":0.00664,"view_duration_s":0.06112,"duration_s":0.11087,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"operationName","value":"pathLastCommit"},{"key":"variables","value":"[FILTERED]"},{"key":"query","value":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"},{"key":"graphql","value":{"operationName":"pathLastCommit","variables":"[FILTERED]","query":"query pathLastCommit($projectPath: ID!, $path: String, $ref: String!) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        lastCommit {\n          sha\n          title\n          titleHtml\n          description\n          message\n          webUrl\n          authoredDate\n          authorName\n          authorGravatar\n          author {\n            name\n            avatarUrl\n            webUrl\n            __typename\n          }\n          signatureHtml\n          pipelines(ref: $ref, first: 1) {\n            edges {\n              node {\n                detailedStatus {\n                  detailsPath\n                  icon\n                  tooltip\n                  text\n                  group\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002734,"correlation_id":"tbDvilp9WC2","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.00326,"redis_calls":3,"redis_duration_s":0.000293,"cpu_s":0.05,"db_duration_s":0.00548,"view_duration_s":0.00045,"duration_s":0.06413,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/uploads/-/system/user/avatar/2/avatar.png","format":"html","controller":"UploadsController","action":"show","status":200,"params":[{"key":"width","value":"40"},{"key":"model","value":"user"},{"key":"mounted_as","value":"avatar"},{"key":"id","value":"2"},{"key":"filename","value":"avatar.png"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002448,"correlation_id":"9wKazaAzZd5","meta.user":"test_namespace","meta.caller_id":"UploadsController#show","redis_calls":1,"redis_duration_s":9.7e-05,"cpu_s":0.01,"db_duration_s":0.00151,"view_duration_s":0.0,"duration_s":0.00863,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getPermissions","variables":"[FILTERED]","query":"query getPermissions($projectPath: ID!) {\n  project(fullPath: $projectPath) {\n    userPermissions {\n      pushCode\n      forkProject\n      createMergeRequestIn\n      __typename\n    }\n    __typename\n  }\n}\n"},{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003327,"correlation_id":"pbsKJEVwEn6","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.001175,"redis_calls":5,"redis_duration_s":0.000396,"cpu_s":0.11,"db_duration_s":0.00355,"view_duration_s":0.00482,"duration_s":0.11096,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"0"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002597,"correlation_id":"AQ1CuVLj1S","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002696,"redis_calls":7,"redis_duration_s":0.000476,"cpu_s":0.03,"db_duration_s":0.0019,"view_duration_s":0.00172,"duration_s":0.02351,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"25"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003521,"correlation_id":"0TTbir75ue1","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003239,"redis_calls":7,"redis_duration_s":0.000574,"cpu_s":0.04,"db_duration_s":0.00236,"view_duration_s":0.00223,"duration_s":0.0268,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003697,"correlation_id":"Rs6z9N6JxM6","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.00084,"redis_calls":2,"redis_duration_s":0.000169,"cpu_s":0.11,"db_duration_s":0.00296,"view_duration_s":0.00472,"duration_s":0.11247,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"50"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002575,"correlation_id":"ldnlLKiT7q8","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.00272,"redis_calls":7,"redis_duration_s":0.000484,"cpu_s":0.11,"db_duration_s":0.0831,"view_duration_s":0.00231,"duration_s":0.10679,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"75"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002606,"correlation_id":"hMmofAgGRM6","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.00324,"redis_calls":7,"redis_duration_s":0.000458,"cpu_s":0.03,"db_duration_s":0.002,"view_duration_s":0.00191,"duration_s":0.02517,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"100"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002586,"correlation_id":"GBNf9lxAal9","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002653,"redis_calls":7,"redis_duration_s":0.000416,"cpu_s":0.03,"db_duration_s":0.00183,"view_duration_s":0.00184,"duration_s":0.02327,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"125"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.006695,"correlation_id":"YvNJvgfC9h2","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002931,"redis_calls":9,"redis_duration_s":0.000652,"cpu_s":0.03,"db_duration_s":0.00191,"view_duration_s":0.00171,"duration_s":0.02418,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"150"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002637,"correlation_id":"eKZID99eR96","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.007037,"redis_calls":7,"redis_duration_s":0.000525,"cpu_s":0.03,"db_duration_s":0.00225,"view_duration_s":0.00314,"duration_s":0.03226,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002601,"correlation_id":"BhhVu3MT7N7","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.000859,"redis_calls":2,"redis_duration_s":0.000195,"cpu_s":0.13,"db_duration_s":0.00387,"view_duration_s":0.01729,"duration_s":0.14043,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"175"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.004115,"correlation_id":"1uG14g1yaH5","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003648,"redis_calls":7,"redis_duration_s":0.001058,"cpu_s":0.05,"db_duration_s":0.00186,"view_duration_s":0.00611,"duration_s":0.03617,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"200"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002617,"correlation_id":"15MTPHzbuxa","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.003155,"redis_calls":7,"redis_duration_s":0.000446,"cpu_s":0.03,"db_duration_s":0.00221,"view_duration_s":0.00256,"duration_s":0.02742,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"225"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.004116,"correlation_id":"QysX8PaXIz3","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002994,"redis_calls":7,"redis_duration_s":0.000471,"cpu_s":0.05,"db_duration_s":0.00191,"view_duration_s":0.00426,"duration_s":0.03294,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"250"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002598,"correlation_id":"WexDdybU9U8","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.002615,"redis_calls":7,"redis_duration_s":0.000401,"cpu_s":0.03,"db_duration_s":0.00181,"view_duration_s":0.00173,"duration_s":0.02318,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/test_namespace/fake-project/-/refs/master/logs_tree","format":"json","controller":"Projects::RefsController","action":"logs_tree","status":200,"params":[{"key":"offset","value":"275"},{"key":"namespace_id","value":"test_namespace"},{"key":"project_id","value":"fake-project"},{"key":"id","value":"master"}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.003577,"correlation_id":"TWBec5kjSH2","meta.user":"test_namespace","meta.project":"test_namespace/fake-project","meta.root_namespace":"test_namespace","meta.caller_id":"Projects::RefsController#logs_tree","gitaly_calls":2,"gitaly_duration_s":0.015715,"redis_calls":7,"redis_duration_s":0.000645,"cpu_s":0.07,"db_duration_s":0.0028,"view_duration_s":0.00843,"duration_s":0.06433,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"POST","path":"/api/graphql","format":"*/*","controller":"GraphqlController","action":"execute","status":200,"params":[{"key":"_json","value":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]},{"key":"graphql","value":{"_json":[{"operationName":"getFiles","variables":"[FILTERED]","query":"fragment TreeEntry on Entry {\n  id\n  sha\n  name\n  flatPath\n  type\n  __typename\n}\n\nquery getFiles($projectPath: ID!, $path: String, $ref: String!, $pageSize: Int!, $nextPageCursor: String, $vueLfsEnabled: Boolean = false) {\n  project(fullPath: $projectPath) {\n    repository {\n      tree(path: $path, ref: $ref) {\n        trees(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        submodules(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              treeUrl\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        blobs(first: $pageSize, after: $nextPageCursor) {\n          edges {\n            node {\n              ...TreeEntry\n              webUrl\n              lfsOid @include(if: $vueLfsEnabled)\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            ...PageInfo\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PageInfo on PageInfo {\n  hasNextPage\n  endCursor\n  __typename\n}\n"}]}}],"remote_ip":"71.94.254.254","user_id":2,"username":"test_namespace","ua":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36","queue_duration_s":0.002663,"correlation_id":"UKRp6Zt2276","meta.user":"test_namespace","meta.caller_id":"GraphqlController#execute","gitaly_calls":2,"gitaly_duration_s":0.00096,"redis_calls":3,"redis_duration_s":0.000311,"cpu_s":0.13,"db_duration_s":0.00415,"view_duration_s":0.00461,"duration_s":0.14369,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"57e0a7ec-1f3e-4109-8980-43e5109659ed","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.00043,"duration_s":0.04565,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"be9014f6-5fa5-4cc2-ac7a-6aae85548a16","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.00043,"duration_s":0.04694,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"aa449495-a909-4b62-8327-59f4d03f44f5","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.00038,"duration_s":0.0457,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"f20206e0-0fb4-4c21-a88f-a15daf408863","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.00037,"duration_s":0.04557,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"e43c5e2f-5dc5-4191-b81b-d389081e2f48","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.00038,"duration_s":0.04632,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"7d1d0b5b-d12e-4b9d-8dd3-1780e17150b5","cpu_s":0.06,"db_duration_s":0.0,"view_duration_s":0.00043,"duration_s":0.04641,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"7b5e7b7d-bc36-4b4a-b719-33e491e1b114","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.0004,"duration_s":0.04604,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"4458d6ba-a207-4b81-928d-aca1c864be6f","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.00041,"duration_s":0.04597,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"9d148827-09f5-4324-8a69-8068812f0fd4","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.0004,"duration_s":0.04648,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"f8e32843-760b-4c14-b80c-01fabe6ffa73","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.00077,"duration_s":0.04658,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"8e70426a-7605-453a-988e-cc99112ac9e6","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.00037,"duration_s":0.04567,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"d7361bf5-20ad-4e3d-b04c-aa99652280ad","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.00036,"duration_s":0.0462,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"c01ce2c1-d9e3-4e69-bfa3-b27e50af0268","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.00039,"duration_s":0.0459,"tag":"test","time":"2019-11-14T13:12:46.156Z"}
{"method":"GET","path":"/-/metrics","format":"html","controller":"MetricsController","action":"index","status":200,"params":[],"remote_ip":null,"user_id":null,"username":null,"ua":null,"queue_duration_s":null,"correlation_id":"94852f58-7e9a-4003-b3af-bf73c3645c3a","cpu_s":0.05,"db_duration_s":0.0,"view_duration_s":0.00037,"duration_s":0.04493,"tag":"test","time":"2019-11-14T13:12:46.156Z"}